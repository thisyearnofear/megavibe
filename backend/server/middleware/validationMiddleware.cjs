const Joi = require("joi");
const { validationResult } = require("express-validator"); // Import validationResult

const paymentSchema = Joi.object({
  amount: Joi.number().required(),
  songId: Joi.string(),
});

const validatePayment = (req, res, next) => {
  // Use validationResult to check for validation errors generated by express-validator
  const errors = validationResult(req);

  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  // Additional validation using Joi
  const { error } = paymentSchema.validate(req.body);
  if (error) {
    return res.status(400).send(error.details[0].message);
  }

  next();
};

const validateUserSession = (req, res, next) => {
  if (!req.user) {
    return res.status(401).end();
  }
  next();
};

const validateUser = (role) => (req, res, next) => {
  // Role-based validation logic here
  // Example: Check if the user's role matches the required role
  if (req.user && req.user.role === role) {
    next();
  } else {
    return res.status(403).end();
  }
};

const validateQuery = (validations) => (req, res, next) => {
  for (const validation of validations) {
    const { param, customValidation } = validation;
    const { error } = customValidation(req.query[param]);
    if (error) {
      return res.status(400).send(error.details[0].message);
    }
  }
  next();
};

const validateRequest = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      message: "Validation failed",
      errors: errors.array(),
    });
  }
  next();
};

const handleErrors = (err, req, res, next) => {
  res.status(err.statusCode || 500).json({
    message: err.message,
  });
};

module.exports = {
  validatePayment,
  validateUserSession,
  validateUser,
  validateQuery,
  validateRequest,
  handleErrors,
};
