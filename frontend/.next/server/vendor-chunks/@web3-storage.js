"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@web3-storage";
exports.ids = ["vendor-chunks/@web3-storage"];
exports.modules = {

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/aggregate.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_DEAL_SIZE: () => (/* binding */ DEFAULT_DEAL_SIZE),\n/* harmony export */   InclusionProof: () => (/* reexport module object */ _inclusion_js__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   MAX_CAPACITY: () => (/* binding */ MAX_CAPACITY),\n/* harmony export */   Proof: () => (/* binding */ Proof),\n/* harmony export */   Size: () => (/* reexport safe */ _piece_size_js__WEBPACK_IMPORTED_MODULE_9__.Expanded),\n/* harmony export */   Tree: () => (/* reexport module object */ _aggregate_tree_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   resolveProof: () => (/* binding */ resolveProof),\n/* harmony export */   resolveSegment: () => (/* binding */ resolveSegment),\n/* harmony export */   toLink: () => (/* binding */ toLink)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _aggregate_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aggregate/tree.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate/tree.js\");\n/* harmony import */ var _segment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./segment.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/segment.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/index.js\");\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piece.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./uint64.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\");\n/* harmony import */ var _inclusion_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./inclusion.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/inclusion.js\");\n/* harmony import */ var multiformats_bytes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! multiformats/bytes */ \"(rsc)/../node_modules/multiformats/dist/src/bytes.js\");\n/* harmony import */ var _piece_size_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./piece/size.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst NodeSize = BigInt(_node_js__WEBPACK_IMPORTED_MODULE_5__.Size);\nconst EntrySize = Number(_index_js__WEBPACK_IMPORTED_MODULE_3__.EntrySize);\nconst MAX_CAPACITY = _piece_size_js__WEBPACK_IMPORTED_MODULE_9__.Expanded.fromHeight(_aggregate_tree_js__WEBPACK_IMPORTED_MODULE_1__.MAX_HEIGHT);\n\nconst Proof = _inclusion_js__WEBPACK_IMPORTED_MODULE_7__.Proof;\n/**\n * Default aggregate size (32GiB).\n */ // Default is chosen based on our current average rate of 30GiB per hour.\n// The 16GiB may also be a viable option, however given our current rate\n// 32GiB is better default.\nconst DEFAULT_DEAL_SIZE = _piece_size_js__WEBPACK_IMPORTED_MODULE_9__.Expanded.from(2n ** 35n);\n\n/**\n * @param {object} [options]\n * @param {API.PieceSize} [options.size] - Size of the aggregate in\n * (fr32 padded) bytes. If omitted default to 32 GiB. Note that sizes >=8GiB\n * are are too expensive for service providers and it may be challenging to\n * find a deal.\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher] - A sync sha256 hasher.\n */ const createBuilder = ({ size = DEFAULT_DEAL_SIZE, hasher } = {})=>new AggregateBuilder({\n        size,\n        hasher\n    });\n/**\n * @param {object} options\n * @param {API.Piece[]} options.pieces - Pieces to add to the aggregate\n * @param {API.PieceSize} [options.size] - Size of the aggregate in\n * (fr32 padded) bytes. If omitted default to 32 GiB\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher] - A sync sha256 hasher.\n */ const build = ({ pieces, size = DEFAULT_DEAL_SIZE, hasher })=>{\n    const builder = createBuilder({\n        size,\n        hasher\n    });\n    for (const piece of pieces){\n        builder.write(piece);\n    }\n    return builder.build();\n};\n/**\n *\n * @param {object} tree\n * @param {API.MerkleTreeNode} tree.root\n * @param {number} tree.height\n */ const toLink = ({ root, height })=>_piece_js__WEBPACK_IMPORTED_MODULE_4__.toLink({\n        root,\n        height,\n        padding: 0n\n    });\nclass AggregateBuilder {\n    /**\n   * @param {object} source\n   * @param {API.PieceSize} source.size\n   * @param {API.uint64} [source.offset]\n   * @param {API.MerkleTreeNodeSource[]} [source.parts]\n   * @param {number} [source.limit]\n   * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [source.hasher]\n   */ constructor({ size, limit = _index_js__WEBPACK_IMPORTED_MODULE_3__.maxIndexEntriesInDeal(size), offset = 0n, parts = [], hasher }){\n        this.size = _piece_size_js__WEBPACK_IMPORTED_MODULE_9__.Expanded.from(size);\n        this.offset = offset;\n        this.parts = parts;\n        /**\n     * Maximum number of pieces that could be added to this aggregate.\n     */ this.limit = limit;\n        this.hasher = hasher;\n    }\n    /**\n   * Size of the index in bytes.\n   */ get indexSize() {\n        return this.limit * EntrySize;\n    }\n    /**\n   * Height of the perfect binary merkle tree corresponding to this aggregate.\n   */ get height() {\n        return (0,_uint64_js__WEBPACK_IMPORTED_MODULE_6__.log2Ceil)(this.size / NodeSize);\n    }\n    /**\n   * @returns {API.AggregateView}\n   */ build() {\n        const { size, parts, limit, offset, height, hasher } = this;\n        const index = createIndex(parts, {\n            hasher\n        });\n        const tree = _aggregate_tree_js__WEBPACK_IMPORTED_MODULE_1__.create(height, {\n            hasher\n        });\n        _aggregate_tree_js__WEBPACK_IMPORTED_MODULE_1__.batchSet(tree, parts);\n        _aggregate_tree_js__WEBPACK_IMPORTED_MODULE_1__.batchSet(tree, createIndexNodes(size, index));\n        return new Aggregate({\n            size,\n            tree,\n            index,\n            offset,\n            parts,\n            limit\n        });\n    }\n    /**\n   * @param {API.Piece} piece\n   */ write(piece) {\n        const result = this.estimate(piece);\n        if (result.error) {\n            throw result.error;\n        } else {\n            const { parts, offset } = result.ok;\n            const [part] = parts;\n            this.offset += offset;\n            this.parts.push(part);\n        }\n        return this;\n    }\n    /**\n   * Computes addition to the current aggregate if it were to write\n   * provided segment.\n   *\n   * @param {API.Piece} piece\n   * @returns {API.Result<{\n   *   parts: [API.MerkleTreeNodeSource]\n   *   offset: API.uint64\n   * }, RangeError>}\n   */ estimate(piece) {\n        if (this.parts.length >= this.limit) {\n            return {\n                error: new RangeError(`Too many pieces for a ${this.size} sized aggregate: ${this.parts.length + 1} > ${this.limit}`)\n            };\n        }\n        const size = _piece_size_js__WEBPACK_IMPORTED_MODULE_9__.Expanded.fromHeight(piece.height);\n        const sizeInNodes = size / NodeSize;\n        const level = (0,_uint64_js__WEBPACK_IMPORTED_MODULE_6__.log2Ceil)(sizeInNodes);\n        const index = (this.offset + sizeInNodes - 1n) / sizeInNodes;\n        const offset = (index + 1n) * sizeInNodes;\n        const total = offset * NodeSize + BigInt(this.limit) * BigInt(EntrySize);\n        if (total > this.size) {\n            return {\n                error: new RangeError(`\"Pieces are too large to fit in the index: ${total} (packed pieces) + ${this.limit * EntrySize} (index) > ${this.size} (dealSize)\"`)\n            };\n        }\n        return {\n            ok: {\n                parts: [\n                    {\n                        node: piece.root,\n                        location: {\n                            level,\n                            index\n                        }\n                    }\n                ],\n                offset: offset - this.offset\n            }\n        };\n    }\n}\n/**\n * @param {API.PieceSize} size\n * @param {API.SegmentInfo[]} segments\n * @returns {Iterable<API.MerkleTreeNodeSource>}\n */ const createIndexNodes = function*(size, segments) {\n    const indexStartNodes = (0,_inclusion_js__WEBPACK_IMPORTED_MODULE_7__.indexAreaStart)(size) / NodeSize;\n    for (const [n, segment] of segments.entries()){\n        const node = _segment_js__WEBPACK_IMPORTED_MODULE_2__.toIndexNode(segment);\n        const index = n * 2;\n        yield {\n            node: segment.root,\n            location: {\n                level: 0,\n                index: indexStartNodes + BigInt(index)\n            }\n        };\n        yield {\n            node,\n            location: {\n                level: 0,\n                index: indexStartNodes + BigInt(index + 1)\n            }\n        };\n    }\n};\n/**\n * @param {API.MerkleTreeNodeSource[]} parts\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher] - A sync sha256 hasher.\n * @returns {API.IndexData}\n */ const createIndex = (parts, options)=>parts.map((part)=>_segment_js__WEBPACK_IMPORTED_MODULE_2__.fromSourceWithChecksum(part, options));\n/**\n * @implements {API.AggregateView}\n */ class Aggregate {\n    /**\n   * @param {object} source\n   * @param {API.PieceSize} source.size\n   * @param {API.uint64} source.offset\n   * @param {API.MerkleTreeNodeSource[]} source.parts\n   * @param {API.IndexData} source.index\n   * @param {number} source.limit\n   * @param {API.AggregateTree} source.tree\n   */ constructor({ tree, parts, index, limit, size, offset }){\n        this.tree = tree;\n        this.parts = parts;\n        this.index = index;\n        this.limit = limit;\n        this.size = size;\n        this.offset = offset;\n        this.link = _piece_js__WEBPACK_IMPORTED_MODULE_4__.toLink({\n            height: tree.height,\n            root: tree.root,\n            padding: 0n\n        });\n    }\n    /**\n   * Size of the index in bytes.\n   */ get indexSize() {\n        return this.limit * EntrySize;\n    }\n    get root() {\n        return this.tree.root;\n    }\n    /**\n   * Height of the perfect binary merkle tree corresponding to this aggregate.\n   */ get height() {\n        return this.tree.height;\n    }\n    get padding() {\n        return 0n;\n    }\n    toJSON() {\n        return _piece_js__WEBPACK_IMPORTED_MODULE_4__.toJSON(this);\n    }\n    toInfo() {\n        return _piece_js__WEBPACK_IMPORTED_MODULE_4__.toInfo(this);\n    }\n    /**\n   * @param {API.PieceLink} piece\n   */ resolveProof(piece) {\n        return resolveProof(this, _piece_js__WEBPACK_IMPORTED_MODULE_4__.fromLink(piece));\n    }\n}\n/**\n *\n * @param {Aggregate} aggregate\n * @param {API.Piece} piece\n * @returns {API.Result<[number, API.SegmentInfo], RangeError>}\n */ const resolveSegment = (aggregate, piece)=>{\n    const { height, root } = piece;\n    const size = _piece_size_js__WEBPACK_IMPORTED_MODULE_9__.Expanded.fromHeight(height);\n    for (const [n, segment] of aggregate.index.entries()){\n        if (size === segment.size && multiformats_bytes__WEBPACK_IMPORTED_MODULE_8__.equals(root, segment.root)) {\n            return {\n                ok: [\n                    n,\n                    segment\n                ]\n            };\n        }\n    }\n    return {\n        error: new RangeError(`Piece ${piece} was not found in aggregate ${aggregate.link}`)\n    };\n};\n/**\n * @see https://github.com/filecoin-project/go-data-segment/blob/master/datasegment/creation.go#L86-L105\n *\n * @param {Aggregate} aggregate\n * @param {API.Piece} piece\n * @returns {API.Result<API.InclusionProof, RangeError>}\n */ const resolveProof = (aggregate, piece)=>{\n    const result = resolveSegment(aggregate, piece);\n    if (result.error) {\n        return result;\n    } else {\n        const [n, segment] = result.ok;\n        const { level, index } = _segment_js__WEBPACK_IMPORTED_MODULE_2__.toSource(segment).location;\n        const subTreeProof = aggregate.tree.collectProof(level, index);\n        const indexOffset = (0,_inclusion_js__WEBPACK_IMPORTED_MODULE_7__.indexAreaStart)(aggregate.size) / BigInt(EntrySize) + BigInt(n);\n        const indexProof = aggregate.tree.collectProof(1, indexOffset);\n        const inclusion = {\n            tree: subTreeProof,\n            index: indexProof\n        };\n        return {\n            ok: _inclusion_js__WEBPACK_IMPORTED_MODULE_7__.create(inclusion)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9hZ2dyZWdhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ1k7QUFDSjtBQUNKO0FBQ0E7QUFDRjtBQUNLO0FBQ1M7QUFDSjtBQUNEO0FBQ1E7QUFFRjtBQUVoRCxNQUFNWSxXQUFXQyxPQUFPUiwwQ0FBUztBQUNqQyxNQUFNUyxZQUFZQyxPQUFPWixnREFBZTtBQUNqQyxNQUFNYSxlQUFlUCwrREFBbUIsQ0FBQ1IsMERBQWUsRUFBQztBQUN2QztBQUNsQixNQUFNa0IsUUFBUVIsZ0RBQW9CO0FBRXpDOztDQUVDLEdBQ0QseUVBQXlFO0FBQ3pFLHdFQUF3RTtBQUN4RSwyQkFBMkI7QUFDcEIsTUFBTVMsb0JBQW9CWCx5REFBYSxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQUM7QUFFMUM7QUFFZjs7Ozs7OztDQU9DLEdBQ00sTUFBTWEsZ0JBQWdCLENBQUMsRUFBRUMsT0FBT0gsaUJBQWlCLEVBQUVJLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUNyRSxJQUFJQyxpQkFBaUI7UUFBRUY7UUFBTUM7SUFBTyxHQUFFO0FBRXhDOzs7Ozs7Q0FNQyxHQUNNLE1BQU1FLFFBQVEsQ0FBQyxFQUFFQyxNQUFNLEVBQUVKLE9BQU9ILGlCQUFpQixFQUFFSSxNQUFNLEVBQUU7SUFDaEUsTUFBTUksVUFBVU4sY0FBYztRQUFFQztRQUFNQztJQUFPO0lBRTdDLEtBQUssTUFBTUssU0FBU0YsT0FBUTtRQUMxQkMsUUFBUUUsS0FBSyxDQUFDRDtJQUNoQjtJQUVBLE9BQU9ELFFBQVFGLEtBQUs7QUFDdEIsRUFBQztBQUVEOzs7OztDQUtDLEdBQ00sTUFBTUssU0FBUyxDQUFDLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFLEdBQ3JDN0IsNkNBQVksQ0FBQztRQUFFNEI7UUFBTUM7UUFBUUMsU0FBUyxFQUFFO0lBQUMsR0FBRTtBQUU3QyxNQUFN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N0QsT0FBTztnQkFBRW1CLElBQUk7b0JBQUNZO29CQUFHQztpQkFBUTtZQUFDO1FBQzVCO0lBQ0Y7SUFFQSxPQUFPO1FBQ0xkLE9BQU8sSUFBSUssV0FDVCxDQUFDLE1BQU0sRUFBRTFCLE1BQU0sNEJBQTRCLEVBQUUrQyxVQUFVTixJQUFJLENBQUMsQ0FBQztJQUVqRTtBQUNGLEVBQUM7QUFFRDs7Ozs7O0NBTUMsR0FDTSxNQUFNRyxlQUFlLENBQUNHLFdBQVcvQztJQUN0QyxNQUFNbUIsU0FBUzJCLGVBQWVDLFdBQVcvQztJQUN6QyxJQUFJbUIsT0FBT0UsS0FBSyxFQUFFO1FBQ2hCLE9BQU9GO0lBQ1QsT0FBTztRQUNMLE1BQU0sQ0FBQ2UsR0FBR0MsUUFBUSxHQUFHaEIsT0FBT0csRUFBRTtRQUM5QixNQUFNLEVBQUVNLEtBQUssRUFBRWhCLEtBQUssRUFBRSxHQUFHdkMsaURBQWdCLENBQUM4RCxTQUFTSixRQUFRO1FBQzNELE1BQU1tQixlQUFlSCxVQUFVakMsSUFBSSxDQUFDcUMsWUFBWSxDQUFDdkIsT0FBT2hCO1FBRXhELE1BQU13QyxjQUNKMUUsNkRBQWNBLENBQUNxRSxVQUFVckQsSUFBSSxJQUFJVixPQUFPQyxhQUFhRCxPQUFPa0Q7UUFDOUQsTUFBTW1CLGFBQWFOLFVBQVVqQyxJQUFJLENBQUNxQyxZQUFZLENBQUMsR0FBR0M7UUFFbEQsTUFBTUUsWUFBWTtZQUFFeEMsTUFBTW9DO1lBQWN0QyxPQUFPeUM7UUFBVztRQUUxRCxPQUFPO1lBQUUvQixJQUFJeEMsaURBQXFCLENBQUN3RTtRQUFXO0lBQ2hEO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ad2ViMy1zdG9yYWdlL2RhdGEtc2VnbWVudC9zcmMvYWdncmVnYXRlLmpzP2Q0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVBJIGZyb20gJy4vYXBpLmpzJ1xuaW1wb3J0ICogYXMgVHJlZSBmcm9tICcuL2FnZ3JlZ2F0ZS90cmVlLmpzJ1xuaW1wb3J0ICogYXMgU2VnbWVudCBmcm9tICcuL3NlZ21lbnQuanMnXG5pbXBvcnQgKiBhcyBJbmRleCBmcm9tICcuL2luZGV4LmpzJ1xuaW1wb3J0ICogYXMgUGllY2UgZnJvbSAnLi9waWVjZS5qcydcbmltcG9ydCAqIGFzIE5vZGUgZnJvbSAnLi9ub2RlLmpzJ1xuaW1wb3J0IHsgbG9nMkNlaWwgfSBmcm9tICcuL3VpbnQ2NC5qcydcbmltcG9ydCB7IGluZGV4QXJlYVN0YXJ0IH0gZnJvbSAnLi9pbmNsdXNpb24uanMnXG5pbXBvcnQgKiBhcyBCeXRlcyBmcm9tICdtdWx0aWZvcm1hdHMvYnl0ZXMnXG5pbXBvcnQgeyBFeHBhbmRlZCB9IGZyb20gJy4vcGllY2Uvc2l6ZS5qcydcbmV4cG9ydCB7IEV4cGFuZGVkIGFzIFNpemUgfSBmcm9tICcuL3BpZWNlL3NpemUuanMnXG5cbmltcG9ydCAqIGFzIEluY2x1c2lvblByb29mIGZyb20gJy4vaW5jbHVzaW9uLmpzJ1xuXG5jb25zdCBOb2RlU2l6ZSA9IEJpZ0ludChOb2RlLlNpemUpXG5jb25zdCBFbnRyeVNpemUgPSBOdW1iZXIoSW5kZXguRW50cnlTaXplKVxuZXhwb3J0IGNvbnN0IE1BWF9DQVBBQ0lUWSA9IEV4cGFuZGVkLmZyb21IZWlnaHQoVHJlZS5NQVhfSEVJR0hUKVxuZXhwb3J0IHsgSW5jbHVzaW9uUHJvb2YgfVxuZXhwb3J0IGNvbnN0IFByb29mID0gSW5jbHVzaW9uUHJvb2YuUHJvb2ZcblxuLyoqXG4gKiBEZWZhdWx0IGFnZ3JlZ2F0ZSBzaXplICgzMkdpQikuXG4gKi9cbi8vIERlZmF1bHQgaXMgY2hvc2VuIGJhc2VkIG9uIG91ciBjdXJyZW50IGF2ZXJhZ2UgcmF0ZSBvZiAzMEdpQiBwZXIgaG91ci5cbi8vIFRoZSAxNkdpQiBtYXkgYWxzbyBiZSBhIHZpYWJsZSBvcHRpb24sIGhvd2V2ZXIgZ2l2ZW4gb3VyIGN1cnJlbnQgcmF0ZVxuLy8gMzJHaUIgaXMgYmV0dGVyIGRlZmF1bHQuXG5leHBvcnQgY29uc3QgREVGQVVMVF9ERUFMX1NJWkUgPSBFeHBhbmRlZC5mcm9tKDJuICoqIDM1bilcblxuZXhwb3J0IHsgVHJlZSB9XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtBUEkuUGllY2VTaXplfSBbb3B0aW9ucy5zaXplXSAtIFNpemUgb2YgdGhlIGFnZ3JlZ2F0ZSBpblxuICogKGZyMzIgcGFkZGVkKSBieXRlcy4gSWYgb21pdHRlZCBkZWZhdWx0IHRvIDMyIEdpQi4gTm90ZSB0aGF0IHNpemVzID49OEdpQlxuICogYXJlIGFyZSB0b28gZXhwZW5zaXZlIGZvciBzZXJ2aWNlIHByb3ZpZGVycyBhbmQgaXQgbWF5IGJlIGNoYWxsZW5naW5nIHRvXG4gKiBmaW5kIGEgZGVhbC5cbiAqIEBwYXJhbSB7QVBJLlN5bmNNdWx0aWhhc2hIYXNoZXI8QVBJLlNIQTI1Nl9DT0RFPn0gW29wdGlvbnMuaGFzaGVyXSAtIEEgc3luYyBzaGEyNTYgaGFzaGVyLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlQnVpbGRlciA9ICh7IHNpemUgPSBERUZBVUxUX0RFQUxfU0laRSwgaGFzaGVyIH0gPSB7fSkgPT5cbiAgbmV3IEFnZ3JlZ2F0ZUJ1aWxkZXIoeyBzaXplLCBoYXNoZXIgfSlcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtBUEkuUGllY2VbXX0gb3B0aW9ucy5waWVjZXMgLSBQaWVjZXMgdG8gYWRkIHRvIHRoZSBhZ2dyZWdhdGVcbiAqIEBwYXJhbSB7QVBJLlBpZWNlU2l6ZX0gW29wdGlvbnMuc2l6ZV0gLSBTaXplIG9mIHRoZSBhZ2dyZWdhdGUgaW5cbiAqIChmcjMyIHBhZGRlZCkgYnl0ZXMuIElmIG9taXR0ZWQgZGVmYXVsdCB0byAzMiBHaUJcbiAqIEBwYXJhbSB7QVBJLlN5bmNNdWx0aWhhc2hIYXNoZXI8QVBJLlNIQTI1Nl9DT0RFPn0gW29wdGlvbnMuaGFzaGVyXSAtIEEgc3luYyBzaGEyNTYgaGFzaGVyLlxuICovXG5leHBvcnQgY29uc3QgYnVpbGQgPSAoeyBwaWVjZXMsIHNpemUgPSBERUZBVUxUX0RFQUxfU0laRSwgaGFzaGVyIH0pID0+IHtcbiAgY29uc3QgYnVpbGRlciA9IGNyZWF0ZUJ1aWxkZXIoeyBzaXplLCBoYXNoZXIgfSlcblxuICBmb3IgKGNvbnN0IHBpZWNlIG9mIHBpZWNlcykge1xuICAgIGJ1aWxkZXIud3JpdGUocGllY2UpXG4gIH1cblxuICByZXR1cm4gYnVpbGRlci5idWlsZCgpXG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0cmVlXG4gKiBAcGFyYW0ge0FQSS5NZXJrbGVUcmVlTm9kZX0gdHJlZS5yb290XG4gKiBAcGFyYW0ge251bWJlcn0gdHJlZS5oZWlnaHRcbiAqL1xuZXhwb3J0IGNvbnN0IHRvTGluayA9ICh7IHJvb3QsIGhlaWdodCB9KSA9PlxuICBQaWVjZS50b0xpbmsoeyByb290LCBoZWlnaHQsIHBhZGRpbmc6IDBuIH0pXG5cbmNsYXNzIEFnZ3JlZ2F0ZUJ1aWxkZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IHNvdXJjZVxuICAgKiBAcGFyYW0ge0FQSS5QaWVjZVNpemV9IHNvdXJjZS5zaXplXG4gICAqIEBwYXJhbSB7QVBJLnVpbnQ2NH0gW3NvdXJjZS5vZmZzZXRdXG4gICAqIEBwYXJhbSB7QVBJLk1lcmtsZVRyZWVOb2RlU291cmNlW119IFtzb3VyY2UucGFydHNdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc291cmNlLmxpbWl0XVxuICAgKiBAcGFyYW0ge0FQSS5TeW5jTXVsdGloYXNoSGFzaGVyPEFQSS5TSEEyNTZfQ09ERT59IFtzb3VyY2UuaGFzaGVyXVxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIHNpemUsXG4gICAgbGltaXQgPSBJbmRleC5tYXhJbmRleEVudHJpZXNJbkRlYWwoc2l6ZSksXG4gICAgb2Zmc2V0ID0gMG4sXG4gICAgcGFydHMgPSBbXSxcbiAgICBoYXNoZXJcbiAgfSkge1xuICAgIHRoaXMuc2l6ZSA9IEV4cGFuZGVkLmZyb20oc2l6ZSlcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldFxuICAgIHRoaXMucGFydHMgPSBwYXJ0c1xuXG4gICAgLyoqXG4gICAgICogTWF4aW11bSBudW1iZXIgb2YgcGllY2VzIHRoYXQgY291bGQgYmUgYWRkZWQgdG8gdGhpcyBhZ2dyZWdhdGUuXG4gICAgICovXG4gICAgdGhpcy5saW1pdCA9IGxpbWl0XG4gICAgdGhpcy5oYXNoZXIgPSBoYXNoZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBpbmRleCBpbiBieXRlcy5cbiAgICovXG4gIGdldCBpbmRleFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMubGltaXQgKiBFbnRyeVNpemVcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWlnaHQgb2YgdGhlIHBlcmZlY3QgYmluYXJ5IG1lcmtsZSB0cmVlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhZ2dyZWdhdGUuXG4gICAqL1xuICBnZXQgaGVpZ2h0KCkge1xuICAgIHJldHVybiBsb2cyQ2VpbCh0aGlzLnNpemUgLyBOb2RlU2l6ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7QVBJLkFnZ3JlZ2F0ZVZpZXd9XG4gICAqL1xuICBidWlsZCgpIHtcbiAgICBjb25zdCB7IHNpemUsIHBhcnRzLCBsaW1pdCwgb2Zmc2V0LCBoZWlnaHQsIGhhc2hlciB9ID0gdGhpc1xuICAgIGNvbnN0IGluZGV4ID0gY3JlYXRlSW5kZXgocGFydHMsIHsgaGFzaGVyIH0pXG5cbiAgICBjb25zdCB0cmVlID0gVHJlZS5jcmVhdGUoaGVpZ2h0LCB7IGhhc2hlciB9KVxuICAgIFRyZWUuYmF0Y2hTZXQodHJlZSwgcGFydHMpXG4gICAgVHJlZS5iYXRjaFNldCh0cmVlLCBjcmVhdGVJbmRleE5vZGVzKHNpemUsIGluZGV4KSlcblxuICAgIHJldHVybiBuZXcgQWdncmVnYXRlKHtcbiAgICAgIHNpemUsXG4gICAgICB0cmVlLFxuICAgICAgaW5kZXgsXG4gICAgICBvZmZzZXQsXG4gICAgICBwYXJ0cyxcbiAgICAgIGxpbWl0LFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBUEkuUGllY2V9IHBpZWNlXG4gICAqL1xuICB3cml0ZShwaWVjZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZXN0aW1hdGUocGllY2UpXG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgdGhyb3cgcmVzdWx0LmVycm9yXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgcGFydHMsIG9mZnNldCB9ID0gcmVzdWx0Lm9rXG4gICAgICBjb25zdCBbcGFydF0gPSBwYXJ0c1xuXG4gICAgICB0aGlzLm9mZnNldCArPSBvZmZzZXRcbiAgICAgIHRoaXMucGFydHMucHVzaChwYXJ0KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgYWRkaXRpb24gdG8gdGhlIGN1cnJlbnQgYWdncmVnYXRlIGlmIGl0IHdlcmUgdG8gd3JpdGVcbiAgICogcHJvdmlkZWQgc2VnbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtBUEkuUGllY2V9IHBpZWNlXG4gICAqIEByZXR1cm5zIHtBUEkuUmVzdWx0PHtcbiAgICogICBwYXJ0czogW0FQSS5NZXJrbGVUcmVlTm9kZVNvdXJjZV1cbiAgICogICBvZmZzZXQ6IEFQSS51aW50NjRcbiAgICogfSwgUmFuZ2VFcnJvcj59XG4gICAqL1xuICBlc3RpbWF0ZShwaWVjZSkge1xuICAgIGlmICh0aGlzLnBhcnRzLmxlbmd0aCA+PSB0aGlzLmxpbWl0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICAgYFRvbyBtYW55IHBpZWNlcyBmb3IgYSAke3RoaXMuc2l6ZX0gc2l6ZWQgYWdncmVnYXRlOiAke1xuICAgICAgICAgICAgdGhpcy5wYXJ0cy5sZW5ndGggKyAxXG4gICAgICAgICAgfSA+ICR7dGhpcy5saW1pdH1gXG4gICAgICAgICksXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2l6ZSA9IEV4cGFuZGVkLmZyb21IZWlnaHQocGllY2UuaGVpZ2h0KVxuICAgIGNvbnN0IHNpemVJbk5vZGVzID0gc2l6ZSAvIE5vZGVTaXplXG4gICAgY29uc3QgbGV2ZWwgPSBsb2cyQ2VpbChzaXplSW5Ob2RlcylcblxuICAgIGNvbnN0IGluZGV4ID0gKHRoaXMub2Zmc2V0ICsgc2l6ZUluTm9kZXMgLSAxbikgLyBzaXplSW5Ob2Rlc1xuICAgIGNvbnN0IG9mZnNldCA9IChpbmRleCArIDFuKSAqIHNpemVJbk5vZGVzXG5cbiAgICBjb25zdCB0b3RhbCA9IG9mZnNldCAqIE5vZGVTaXplICsgQmlnSW50KHRoaXMubGltaXQpICogQmlnSW50KEVudHJ5U2l6ZSlcbiAgICBpZiAodG90YWwgPiB0aGlzLnNpemUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICBgXCJQaWVjZXMgYXJlIHRvbyBsYXJnZSB0byBmaXQgaW4gdGhlIGluZGV4OiAke3RvdGFsfSAocGFja2VkIHBpZWNlcykgKyAke1xuICAgICAgICAgICAgdGhpcy5saW1pdCAqIEVudHJ5U2l6ZVxuICAgICAgICAgIH0gKGluZGV4KSA+ICR7dGhpcy5zaXplfSAoZGVhbFNpemUpXCJgXG4gICAgICAgICksXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9rOiB7XG4gICAgICAgIHBhcnRzOiBbeyBub2RlOiBwaWVjZS5yb290LCBsb2NhdGlvbjogeyBsZXZlbCwgaW5kZXggfSB9XSxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSB0aGlzLm9mZnNldCxcbiAgICAgIH0sXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBUEkuUGllY2VTaXplfSBzaXplXG4gKiBAcGFyYW0ge0FQSS5TZWdtZW50SW5mb1tdfSBzZWdtZW50c1xuICogQHJldHVybnMge0l0ZXJhYmxlPEFQSS5NZXJrbGVUcmVlTm9kZVNvdXJjZT59XG4gKi9cbmNvbnN0IGNyZWF0ZUluZGV4Tm9kZXMgPSBmdW5jdGlvbiogKHNpemUsIHNlZ21lbnRzKSB7XG4gIGNvbnN0IGluZGV4U3RhcnROb2RlcyA9IGluZGV4QXJlYVN0YXJ0KHNpemUpIC8gTm9kZVNpemVcblxuICBmb3IgKGNvbnN0IFtuLCBzZWdtZW50XSBvZiBzZWdtZW50cy5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCBub2RlID0gU2VnbWVudC50b0luZGV4Tm9kZShzZWdtZW50KVxuICAgIGNvbnN0IGluZGV4ID0gbiAqIDJcblxuICAgIHlpZWxkIHtcbiAgICAgIG5vZGU6IHNlZ21lbnQucm9vdCxcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGxldmVsOiAwLFxuICAgICAgICBpbmRleDogaW5kZXhTdGFydE5vZGVzICsgQmlnSW50KGluZGV4KSxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgeWllbGQge1xuICAgICAgbm9kZSxcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGxldmVsOiAwLFxuICAgICAgICBpbmRleDogaW5kZXhTdGFydE5vZGVzICsgQmlnSW50KGluZGV4ICsgMSksXG4gICAgICB9LFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QVBJLk1lcmtsZVRyZWVOb2RlU291cmNlW119IHBhcnRzXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0FQSS5TeW5jTXVsdGloYXNoSGFzaGVyPEFQSS5TSEEyNTZfQ09ERT59IFtvcHRpb25zLmhhc2hlcl0gLSBBIHN5bmMgc2hhMjU2IGhhc2hlci5cbiAqIEByZXR1cm5zIHtBUEkuSW5kZXhEYXRhfVxuICovXG5jb25zdCBjcmVhdGVJbmRleCA9IChwYXJ0cywgb3B0aW9ucykgPT5cbiAgcGFydHMubWFwKChwYXJ0KSA9PiBTZWdtZW50LmZyb21Tb3VyY2VXaXRoQ2hlY2tzdW0ocGFydCwgb3B0aW9ucykpXG5cbi8qKlxuICogQGltcGxlbWVudHMge0FQSS5BZ2dyZWdhdGVWaWV3fVxuICovXG5jbGFzcyBBZ2dyZWdhdGUge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IHNvdXJjZVxuICAgKiBAcGFyYW0ge0FQSS5QaWVjZVNpemV9IHNvdXJjZS5zaXplXG4gICAqIEBwYXJhbSB7QVBJLnVpbnQ2NH0gc291cmNlLm9mZnNldFxuICAgKiBAcGFyYW0ge0FQSS5NZXJrbGVUcmVlTm9kZVNvdXJjZVtdfSBzb3VyY2UucGFydHNcbiAgICogQHBhcmFtIHtBUEkuSW5kZXhEYXRhfSBzb3VyY2UuaW5kZXhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNvdXJjZS5saW1pdFxuICAgKiBAcGFyYW0ge0FQSS5BZ2dyZWdhdGVUcmVlfSBzb3VyY2UudHJlZVxuICAgKi9cbiAgY29uc3RydWN0b3IoeyB0cmVlLCBwYXJ0cywgaW5kZXgsIGxpbWl0LCBzaXplLCBvZmZzZXQgfSkge1xuICAgIHRoaXMudHJlZSA9IHRyZWVcbiAgICB0aGlzLnBhcnRzID0gcGFydHNcbiAgICB0aGlzLmluZGV4ID0gaW5kZXhcbiAgICB0aGlzLmxpbWl0ID0gbGltaXRcbiAgICB0aGlzLnNpemUgPSBzaXplXG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXRcbiAgICB0aGlzLmxpbmsgPSBQaWVjZS50b0xpbmsoe1xuICAgICAgaGVpZ2h0OiB0cmVlLmhlaWdodCxcbiAgICAgIHJvb3Q6IHRyZWUucm9vdCxcbiAgICAgIHBhZGRpbmc6IDBuLFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgaW5kZXggaW4gYnl0ZXMuXG4gICAqL1xuICBnZXQgaW5kZXhTaXplKCkge1xuICAgIHJldHVybiB0aGlzLmxpbWl0ICogRW50cnlTaXplXG4gIH1cbiAgZ2V0IHJvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJlZS5yb290XG4gIH1cbiAgLyoqXG4gICAqIEhlaWdodCBvZiB0aGUgcGVyZmVjdCBiaW5hcnkgbWVya2xlIHRyZWUgY29ycmVzcG9uZGluZyB0byB0aGlzIGFnZ3JlZ2F0ZS5cbiAgICovXG4gIGdldCBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJlZS5oZWlnaHRcbiAgfVxuICBnZXQgcGFkZGluZygpIHtcbiAgICByZXR1cm4gMG5cbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIFBpZWNlLnRvSlNPTih0aGlzKVxuICB9XG4gIHRvSW5mbygpIHtcbiAgICByZXR1cm4gUGllY2UudG9JbmZvKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBUEkuUGllY2VMaW5rfSBwaWVjZVxuICAgKi9cbiAgcmVzb2x2ZVByb29mKHBpZWNlKSB7XG4gICAgcmV0dXJuIHJlc29sdmVQcm9vZih0aGlzLCBQaWVjZS5mcm9tTGluayhwaWVjZSkpXG4gIH1cbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtBZ2dyZWdhdGV9IGFnZ3JlZ2F0ZVxuICogQHBhcmFtIHtBUEkuUGllY2V9IHBpZWNlXG4gKiBAcmV0dXJucyB7QVBJLlJlc3VsdDxbbnVtYmVyLCBBUEkuU2VnbWVudEluZm9dLCBSYW5nZUVycm9yPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlc29sdmVTZWdtZW50ID0gKGFnZ3JlZ2F0ZSwgcGllY2UpID0+IHtcbiAgY29uc3QgeyBoZWlnaHQsIHJvb3QgfSA9IHBpZWNlXG4gIGNvbnN0IHNpemUgPSBFeHBhbmRlZC5mcm9tSGVpZ2h0KGhlaWdodClcbiAgZm9yIChjb25zdCBbbiwgc2VnbWVudF0gb2YgYWdncmVnYXRlLmluZGV4LmVudHJpZXMoKSkge1xuICAgIGlmIChzaXplID09PSBzZWdtZW50LnNpemUgJiYgQnl0ZXMuZXF1YWxzKHJvb3QsIHNlZ21lbnQucm9vdCkpIHtcbiAgICAgIHJldHVybiB7IG9rOiBbbiwgc2VnbWVudF0gfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXJyb3I6IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYFBpZWNlICR7cGllY2V9IHdhcyBub3QgZm91bmQgaW4gYWdncmVnYXRlICR7YWdncmVnYXRlLmxpbmt9YFxuICAgICksXG4gIH1cbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maWxlY29pbi1wcm9qZWN0L2dvLWRhdGEtc2VnbWVudC9ibG9iL21hc3Rlci9kYXRhc2VnbWVudC9jcmVhdGlvbi5nbyNMODYtTDEwNVxuICpcbiAqIEBwYXJhbSB7QWdncmVnYXRlfSBhZ2dyZWdhdGVcbiAqIEBwYXJhbSB7QVBJLlBpZWNlfSBwaWVjZVxuICogQHJldHVybnMge0FQSS5SZXN1bHQ8QVBJLkluY2x1c2lvblByb29mLCBSYW5nZUVycm9yPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlc29sdmVQcm9vZiA9IChhZ2dyZWdhdGUsIHBpZWNlKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHJlc29sdmVTZWdtZW50KGFnZ3JlZ2F0ZSwgcGllY2UpXG4gIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgW24sIHNlZ21lbnRdID0gcmVzdWx0Lm9rXG4gICAgY29uc3QgeyBsZXZlbCwgaW5kZXggfSA9IFNlZ21lbnQudG9Tb3VyY2Uoc2VnbWVudCkubG9jYXRpb25cbiAgICBjb25zdCBzdWJUcmVlUHJvb2YgPSBhZ2dyZWdhdGUudHJlZS5jb2xsZWN0UHJvb2YobGV2ZWwsIGluZGV4KVxuXG4gICAgY29uc3QgaW5kZXhPZmZzZXQgPVxuICAgICAgaW5kZXhBcmVhU3RhcnQoYWdncmVnYXRlLnNpemUpIC8gQmlnSW50KEVudHJ5U2l6ZSkgKyBCaWdJbnQobilcbiAgICBjb25zdCBpbmRleFByb29mID0gYWdncmVnYXRlLnRyZWUuY29sbGVjdFByb29mKDEsIGluZGV4T2Zmc2V0KVxuXG4gICAgY29uc3QgaW5jbHVzaW9uID0geyB0cmVlOiBzdWJUcmVlUHJvb2YsIGluZGV4OiBpbmRleFByb29mIH1cblxuICAgIHJldHVybiB7IG9rOiBJbmNsdXNpb25Qcm9vZi5jcmVhdGUoaW5jbHVzaW9uKSB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJBUEkiLCJUcmVlIiwiU2VnbWVudCIsIkluZGV4IiwiUGllY2UiLCJOb2RlIiwibG9nMkNlaWwiLCJpbmRleEFyZWFTdGFydCIsIkJ5dGVzIiwiRXhwYW5kZWQiLCJTaXplIiwiSW5jbHVzaW9uUHJvb2YiLCJOb2RlU2l6ZSIsIkJpZ0ludCIsIkVudHJ5U2l6ZSIsIk51bWJlciIsIk1BWF9DQVBBQ0lUWSIsImZyb21IZWlnaHQiLCJNQVhfSEVJR0hUIiwiUHJvb2YiLCJERUZBVUxUX0RFQUxfU0laRSIsImZyb20iLCJjcmVhdGVCdWlsZGVyIiwic2l6ZSIsImhhc2hlciIsIkFnZ3JlZ2F0ZUJ1aWxkZXIiLCJidWlsZCIsInBpZWNlcyIsImJ1aWxkZXIiLCJwaWVjZSIsIndyaXRlIiwidG9MaW5rIiwicm9vdCIsImhlaWdodCIsInBhZGRpbmciLCJjb25zdHJ1Y3RvciIsImxpbWl0IiwibWF4SW5kZXhFbnRyaWVzSW5EZWFsIiwib2Zmc2V0IiwicGFydHMiLCJpbmRleFNpemUiLCJpbmRleCIsImNyZWF0ZUluZGV4IiwidHJlZSIsImNyZWF0ZSIsImJhdGNoU2V0IiwiY3JlYXRlSW5kZXhOb2RlcyIsIkFnZ3JlZ2F0ZSIsInJlc3VsdCIsImVzdGltYXRlIiwiZXJyb3IiLCJvayIsInBhcnQiLCJwdXNoIiwibGVuZ3RoIiwiUmFuZ2VFcnJvciIsInNpemVJbk5vZGVzIiwibGV2ZWwiLCJ0b3RhbCIsIm5vZGUiLCJsb2NhdGlvbiIsInNlZ21lbnRzIiwiaW5kZXhTdGFydE5vZGVzIiwibiIsInNlZ21lbnQiLCJlbnRyaWVzIiwidG9JbmRleE5vZGUiLCJvcHRpb25zIiwibWFwIiwiZnJvbVNvdXJjZVdpdGhDaGVja3N1bSIsImxpbmsiLCJ0b0pTT04iLCJ0b0luZm8iLCJyZXNvbHZlUHJvb2YiLCJmcm9tTGluayIsInJlc29sdmVTZWdtZW50IiwiYWdncmVnYXRlIiwiZXF1YWxzIiwidG9Tb3VyY2UiLCJzdWJUcmVlUHJvb2YiLCJjb2xsZWN0UHJvb2YiLCJpbmRleE9mZnNldCIsImluZGV4UHJvb2YiLCJpbmNsdXNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate/tree.js":
/*!************************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/aggregate/tree.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_HEIGHT: () => (/* binding */ MAX_HEIGHT),\n/* harmony export */   batchSet: () => (/* binding */ batchSet),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   idxFor: () => (/* binding */ idxFor)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _zero_comm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../zero-comm.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/zero-comm.js\");\n/* harmony import */ var _proof_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../proof.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../uint64.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\");\n\n\n\n\n\n/**\n * We limit tree height to 60, since we have a perfect binary merkle tree this\n * will fit up to 2 ** 60 of leafs nodes.\n */ const MAX_HEIGHT = 60;\n/**\n * Creates a new tree with a given tree `height`.\n *\n * @param {number} height\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher]\n * @returns {API.AggregateTree}\n */ const create = (height, options)=>{\n    if (height > MAX_HEIGHT) {\n        throw new RangeError(`too many leafs: 2 ** ${height}`);\n    }\n    if (height < 0) {\n        throw new RangeError(`cannot have negative log2Leafs`);\n    }\n    return new AggregateTree(height, options);\n};\n/**\n * @implements {API.AggregateTree}\n */ class AggregateTree {\n    /**\n   * @param {number} height\n   * @param {object} [options]\n   * @param {SparseArray<API.MerkleTreeNode>} [options.data]\n   * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher]\n   */ constructor(height, options = {}){\n        /**\n     * The sparse array contains the data of the tree. Levels of the tree are\n     * counted from the leaf layer (layer 0).\n     *\n     * Where the leaf layer lands depends on the `height` of the tree.\n     */ this.data = options.data || new SparseArray();\n        this.height = height;\n        this.hasher = options.hasher;\n    }\n    get leafCount() {\n        // Since this is a perfect binary tree, the leaf count is 2 ** height, it\n        // is a bigint as it may exceed Number.MAX_SAFE_INTEGER (2 ** 53 - 1).\n        return 2n ** BigInt(this.height);\n    }\n    get root() {\n        return this.node(this.height, 0n);\n    }\n    /**\n   * Collects a proof from the specified node to the root of the tree.\n   *\n   * @param {number} level\n   * @param {API.uint64} offset\n   * @returns {API.ProofData}\n   */ collectProof(level, offset) {\n        _proof_js__WEBPACK_IMPORTED_MODULE_3__.validateLevelIndex(this.height, level, offset);\n        const path = [];\n        let currentLevel = level;\n        let position = offset;\n        while(currentLevel < this.height){\n            // idx^1 is the sibling index\n            const node = this.node(currentLevel, position ^ 1n);\n            position = position / 2n;\n            path.push(node);\n            currentLevel++;\n        }\n        return _proof_js__WEBPACK_IMPORTED_MODULE_3__.create({\n            path,\n            offset\n        });\n    }\n    /**\n   *\n   * @param {number} level\n   * @param {API.uint64} index\n   */ node(level, index) {\n        const node = getNodeRaw(this, level, index);\n        return node || _zero_comm_js__WEBPACK_IMPORTED_MODULE_2__.fromLevel(level);\n    }\n    /**\n   *\n   * @param {number} level\n   * @param {API.uint64} index\n   * @param {API.MerkleTreeNode} node\n   */ setNode(level, index, node) {\n        _proof_js__WEBPACK_IMPORTED_MODULE_3__.validateLevelIndex(this.height, level, index);\n        if (level > 0) {\n            let left = getNodeRaw(this, level - 1, 2n * index);\n            let right = getNodeRaw(this, level - 1, 2n * index + 1n);\n            if (left) {\n                throw new RangeError(\"left subtree is not empty\");\n            }\n            if (right) {\n                throw new RangeError(\"right subtree is not empty\");\n            }\n        }\n        this.data.set(idxFor(this.height, level, index), node);\n        let currentIndex = index;\n        let n = level;\n        while(n < this.height){\n            const nextIndex = currentIndex >> 1n;\n            // clear the lowest bit of index for left node\n            const left = getNodeRaw(this, n, currentIndex & ~1n);\n            // set the lowest bit of index for right now\n            const right = getNodeRaw(this, n, currentIndex | 1n);\n            const node = /* c8 ignore next 2 */ // TODO: make test to cover this code path\n            left == null && right == null ? _node_js__WEBPACK_IMPORTED_MODULE_1__.empty() : _proof_js__WEBPACK_IMPORTED_MODULE_3__.computeNode(left || _zero_comm_js__WEBPACK_IMPORTED_MODULE_2__.fromLevel(n), right || _zero_comm_js__WEBPACK_IMPORTED_MODULE_2__.fromLevel(n), {\n                hasher: this.hasher\n            });\n            this.data.set(idxFor(this.height, n + 1, nextIndex), node);\n            currentIndex = nextIndex;\n            n++;\n        }\n        return this;\n    }\n    clear() {\n        clear(this);\n        return this;\n    }\n}\n/**\n * @type {number}\n */ const SparseBlockLog2Size = 8;\n/**\n * @type {number}\n */ const SparseBlockSize = 1 << SparseBlockLog2Size;\nconst BigIntSparseBlockSize = BigInt(SparseBlockSize);\n/**\n * @template T\n * @implements {API.SparseArray<T>}\n */ class SparseArray {\n    /**\n   * @param {Map<API.uint64, T[]>} shards\n   */ constructor(shards = new Map()){\n        /**\n     * @private\n     */ this.shards = shards;\n    }\n    clear() {\n        this.shards.clear();\n        return this;\n    }\n    /**\n   * @param {API.uint64} index\n   * @returns {T | undefined}\n   */ at(index) {\n        const subIndex = index / BigIntSparseBlockSize;\n        const sub = this.shards.get(subIndex);\n        if (!sub) {\n            return undefined;\n        }\n        return sub[Number(index % BigIntSparseBlockSize)];\n    }\n    /**\n   * @param {API.uint64} index\n   * @param {T} value\n   */ set(index, value) {\n        const subIndex = index / BigIntSparseBlockSize;\n        let shard = this.shards.get(subIndex);\n        if (!shard) {\n            shard = new Array(SparseBlockSize);\n            this.shards.set(subIndex, shard);\n        }\n        shard[Number(index % BigIntSparseBlockSize)] = value;\n        return this;\n    }\n    // ignore fon now it will be used by inclusion code\n    /* c8 ignore next 25 */ /**\n   * @param {API.uint64} start\n   * @param {API.uint64} end\n   * @private\n   */ slice(start, end) {\n        const startShard = start / BigIntSparseBlockSize;\n        const endShard = (end - 1n) / BigIntSparseBlockSize;\n        if (startShard !== endShard) {\n            throw new Error(\"requested slice does not align with one sparse block\");\n        }\n        let shard = this.shards.get(startShard);\n        if (!shard) {\n            shard = new Array(SparseBlockSize);\n            this.shards.set(startShard, shard);\n        }\n        return shard.slice(Number(start % BigIntSparseBlockSize), Number(end % BigIntSparseBlockSize));\n    }\n}\n/**\n * @param {API.MerkleTreeBuilder} tree\n * @param {Iterable<API.MerkleTreeNodeSource>} values\n */ const batchSet = (tree, values)=>{\n    for (const { location: { level, index }, node } of values){\n        tree.setNode(level, index, node);\n    }\n};\n/**\n * @param {AggregateTree} tree\n */ const clear = (tree)=>{\n    tree.data.clear();\n};\n/**\n * @typedef {{\n * height: number\n * data: SparseArray<API.MerkleTreeNode>\n * }} Model\n *\n * @param {Model} tree\n * @param {number} level\n * @param {API.uint64} idx\n */ const getNodeRaw = (tree, level, idx)=>{\n    _proof_js__WEBPACK_IMPORTED_MODULE_3__.validateLevelIndex(tree.height, level, idx);\n    return tree.data.at(idxFor(tree.height, level, idx));\n};\n/**\n * @param {number} height\n * @param {number} level\n * @param {API.uint64} index\n * @returns {API.uint64}\n */ const idxFor = (height, level, index)=>{\n    const depth = height - level;\n    // Hybrid Tree stores the MT as smaller trees in chunks dictated by SparseBlockSize\n    // For example with SparseBlockLog2Size of 8, each SparseBlock will store a single\n    // 8 deep tree. These threes are then stored one after breath-wise.\n    const SubtreeDepth = SparseBlockLog2Size;\n    // how deep is the subtree counted by subtree\n    const depthOfSubtree = Math.floor(depth / SubtreeDepth);\n    const depthInSubtree = depth % SubtreeDepth;\n    // how wide is the subtree for given depth\n    const widthOfSubtreeAtDepth = (0,_uint64_js__WEBPACK_IMPORTED_MODULE_4__.pow2)(BigInt(depthInSubtree));\n    // what is the index of the subtree we should write to\n    const indexOfSubtree = index / widthOfSubtreeAtDepth;\n    // what is the index in subtree\n    const indexInSubtree = widthOfSubtreeAtDepth + index % widthOfSubtreeAtDepth;\n    const offsetOfSubtreeLayer = ((0,_uint64_js__WEBPACK_IMPORTED_MODULE_4__.pow2)(BigInt(depthOfSubtree + 1) * BigInt(SparseBlockLog2Size)) - 1n) / (BigIntSparseBlockSize - 1n) - 1n;\n    const offsetOfSubtree = offsetOfSubtreeLayer + BigIntSparseBlockSize * indexOfSubtree;\n    return offsetOfSubtree + indexInSubtree;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate/tree.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/api.js":
/*!*************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/api.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// @see https://github.com/microsoft/TypeScript/issues/41825\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9hcGkuanMiLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUNuRCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ad2ViMy1zdG9yYWdlL2RhdGEtc2VnbWVudC9zcmMvYXBpLmpzP2QzMTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzQxODI1XG5leHBvcnQge31cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js":
/*!******************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/constant.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BYTES_PER_FR: () => (/* binding */ BYTES_PER_FR),\n/* harmony export */   EXPANDED_BYTES_PER_NODE: () => (/* binding */ EXPANDED_BYTES_PER_NODE),\n/* harmony export */   EXPANDED_BYTES_PER_QUAD: () => (/* binding */ EXPANDED_BYTES_PER_QUAD),\n/* harmony export */   FRS_PER_QUAD: () => (/* binding */ FRS_PER_QUAD),\n/* harmony export */   FR_RATIO: () => (/* binding */ FR_RATIO),\n/* harmony export */   IN_BITS_FR: () => (/* binding */ IN_BITS_FR),\n/* harmony export */   IN_BYTES_PER_QUAD: () => (/* binding */ IN_BYTES_PER_QUAD),\n/* harmony export */   LEAFS_PER_QUAD: () => (/* binding */ LEAFS_PER_QUAD),\n/* harmony export */   MIN_PAYLOAD_SIZE: () => (/* binding */ MIN_PAYLOAD_SIZE),\n/* harmony export */   NODE_SIZE: () => (/* binding */ NODE_SIZE),\n/* harmony export */   OUT_BITS_FR: () => (/* binding */ OUT_BITS_FR),\n/* harmony export */   OUT_BYTES_PER_QUAD: () => (/* binding */ OUT_BYTES_PER_QUAD),\n/* harmony export */   PADDED_BYTES_PER_QUAD: () => (/* binding */ PADDED_BYTES_PER_QUAD)\n/* harmony export */ });\n/**\n * Number of bits per byte\n */ const BITS_PER_BYTE = 8;\n/**\n * The number of Frs per Block.\n */ const FRS_PER_QUAD = 4;\nconst LEAFS_PER_QUAD = /** @type {4n} */ BigInt(FRS_PER_QUAD);\n/**\n * The amount of bits in an Fr when not padded.\n */ const IN_BITS_FR = 254;\n/**\n * The amount of bits in an Fr when padded.\n */ const OUT_BITS_FR = 256;\nconst IN_BYTES_PER_QUAD = /** @type {127} */ FRS_PER_QUAD * IN_BITS_FR / BITS_PER_BYTE;\nconst OUT_BYTES_PER_QUAD = /** @type {128} */ FRS_PER_QUAD * OUT_BITS_FR / BITS_PER_BYTE;\nconst PADDED_BYTES_PER_QUAD = /** @type {127n} */ BigInt(IN_BYTES_PER_QUAD);\nconst EXPANDED_BYTES_PER_QUAD = /** @type {128n} */ BigInt(OUT_BYTES_PER_QUAD);\nconst BYTES_PER_FR = /** @type {32} */ OUT_BYTES_PER_QUAD / FRS_PER_QUAD;\nconst FR_RATIO = IN_BITS_FR / OUT_BITS_FR;\n/**\n * Size of a node in the merkle tree.\n */ const NODE_SIZE = /** @type {32} */ OUT_BYTES_PER_QUAD / FRS_PER_QUAD;\nconst EXPANDED_BYTES_PER_NODE = /** @type {32n} */ BigInt(NODE_SIZE);\n/**\n * The smallest amount of data for which FR32 padding has a defined result.\n * Silently upgrading 2 leaves to 4 would break the symmetry so we require\n * an extra byte and the rest can be 0 padded to expand to 4 leaves.\n */ const MIN_PAYLOAD_SIZE = 2 * NODE_SIZE + 1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9jb25zdGFudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDRCxNQUFNQSxnQkFBZ0I7QUFFdEI7O0NBRUMsR0FDTSxNQUFNQyxlQUFlLEVBQUM7QUFFdEIsTUFBTUMsaUJBQWlCLGVBQWUsR0FBSUMsT0FBT0YsY0FBYztBQUV0RTs7Q0FFQyxHQUNNLE1BQU1HLGFBQWEsSUFBRztBQUM3Qjs7Q0FFQyxHQUNNLE1BQU1DLGNBQWMsSUFBRztBQUV2QixNQUFNQyxvQkFDWCxnQkFBZ0IsR0FDZixlQUFnQkYsYUFBY0osY0FBYztBQUV4QyxNQUFNTyxxQkFDWCxnQkFBZ0IsR0FDZixlQUFnQkYsY0FBZUwsY0FBYztBQUV6QyxNQUFNUSx3QkFBd0IsaUJBQWlCLEdBQ3BETCxPQUFPRyxtQkFDUjtBQUVNLE1BQU1HLDBCQUEwQixpQkFBaUIsR0FDdEROLE9BQU9JLG9CQUNSO0FBRU0sTUFBTUcsZUFDWCxlQUFlLEdBQ2ZILHFCQUFxQk4sYUFBWTtBQUU1QixNQUFNVSxXQUFXUCxhQUFhQyxZQUFXO0FBRWhEOztDQUVDLEdBQ00sTUFBTU8sWUFDWCxlQUFlLEdBQ2RMLHFCQUFxQk4sYUFBYTtBQUU5QixNQUFNWSwwQkFBMEIsZ0JBQWdCLEdBQUlWLE9BQU9TLFdBQVc7QUFFN0U7Ozs7Q0FJQyxHQUNNLE1BQU1FLG1CQUFtQixJQUFJRixZQUFZLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9kYXRhLXNlZ21lbnQvc3JjL2NvbnN0YW50LmpzP2Q3Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBOdW1iZXIgb2YgYml0cyBwZXIgYnl0ZVxuICovXG5jb25zdCBCSVRTX1BFUl9CWVRFID0gOFxuXG4vKipcbiAqIFRoZSBudW1iZXIgb2YgRnJzIHBlciBCbG9jay5cbiAqL1xuZXhwb3J0IGNvbnN0IEZSU19QRVJfUVVBRCA9IDRcblxuZXhwb3J0IGNvbnN0IExFQUZTX1BFUl9RVUFEID0gLyoqIEB0eXBlIHs0bn0gKi8gKEJpZ0ludChGUlNfUEVSX1FVQUQpKVxuXG4vKipcbiAqIFRoZSBhbW91bnQgb2YgYml0cyBpbiBhbiBGciB3aGVuIG5vdCBwYWRkZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBJTl9CSVRTX0ZSID0gMjU0XG4vKipcbiAqIFRoZSBhbW91bnQgb2YgYml0cyBpbiBhbiBGciB3aGVuIHBhZGRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9VVF9CSVRTX0ZSID0gMjU2XG5cbmV4cG9ydCBjb25zdCBJTl9CWVRFU19QRVJfUVVBRCA9XG4gIC8qKiBAdHlwZSB7MTI3fSAqL1xuICAoKEZSU19QRVJfUVVBRCAqIElOX0JJVFNfRlIpIC8gQklUU19QRVJfQllURSlcblxuZXhwb3J0IGNvbnN0IE9VVF9CWVRFU19QRVJfUVVBRCA9XG4gIC8qKiBAdHlwZSB7MTI4fSAqL1xuICAoKEZSU19QRVJfUVVBRCAqIE9VVF9CSVRTX0ZSKSAvIEJJVFNfUEVSX0JZVEUpXG5cbmV4cG9ydCBjb25zdCBQQURERURfQllURVNfUEVSX1FVQUQgPSAvKiogQHR5cGUgezEyN259ICovIChcbiAgQmlnSW50KElOX0JZVEVTX1BFUl9RVUFEKVxuKVxuXG5leHBvcnQgY29uc3QgRVhQQU5ERURfQllURVNfUEVSX1FVQUQgPSAvKiogQHR5cGUgezEyOG59ICovIChcbiAgQmlnSW50KE9VVF9CWVRFU19QRVJfUVVBRClcbilcblxuZXhwb3J0IGNvbnN0IEJZVEVTX1BFUl9GUiA9XG4gIC8qKiBAdHlwZSB7MzJ9ICovXG4gIE9VVF9CWVRFU19QRVJfUVVBRCAvIEZSU19QRVJfUVVBRFxuXG5leHBvcnQgY29uc3QgRlJfUkFUSU8gPSBJTl9CSVRTX0ZSIC8gT1VUX0JJVFNfRlJcblxuLyoqXG4gKiBTaXplIG9mIGEgbm9kZSBpbiB0aGUgbWVya2xlIHRyZWUuXG4gKi9cbmV4cG9ydCBjb25zdCBOT0RFX1NJWkUgPVxuICAvKiogQHR5cGUgezMyfSAqL1xuICAoT1VUX0JZVEVTX1BFUl9RVUFEIC8gRlJTX1BFUl9RVUFEKVxuXG5leHBvcnQgY29uc3QgRVhQQU5ERURfQllURVNfUEVSX05PREUgPSAvKiogQHR5cGUgezMybn0gKi8gKEJpZ0ludChOT0RFX1NJWkUpKVxuXG4vKipcbiAqIFRoZSBzbWFsbGVzdCBhbW91bnQgb2YgZGF0YSBmb3Igd2hpY2ggRlIzMiBwYWRkaW5nIGhhcyBhIGRlZmluZWQgcmVzdWx0LlxuICogU2lsZW50bHkgdXBncmFkaW5nIDIgbGVhdmVzIHRvIDQgd291bGQgYnJlYWsgdGhlIHN5bW1ldHJ5IHNvIHdlIHJlcXVpcmVcbiAqIGFuIGV4dHJhIGJ5dGUgYW5kIHRoZSByZXN0IGNhbiBiZSAwIHBhZGRlZCB0byBleHBhbmQgdG8gNCBsZWF2ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBNSU5fUEFZTE9BRF9TSVpFID0gMiAqIE5PREVfU0laRSArIDFcbiJdLCJuYW1lcyI6WyJCSVRTX1BFUl9CWVRFIiwiRlJTX1BFUl9RVUFEIiwiTEVBRlNfUEVSX1FVQUQiLCJCaWdJbnQiLCJJTl9CSVRTX0ZSIiwiT1VUX0JJVFNfRlIiLCJJTl9CWVRFU19QRVJfUVVBRCIsIk9VVF9CWVRFU19QRVJfUVVBRCIsIlBBRERFRF9CWVRFU19QRVJfUVVBRCIsIkVYUEFOREVEX0JZVEVTX1BFUl9RVUFEIiwiQllURVNfUEVSX0ZSIiwiRlJfUkFUSU8iLCJOT0RFX1NJWkUiLCJFWFBBTkRFRF9CWVRFU19QRVJfTk9ERSIsIk1JTl9QQVlMT0FEX1NJWkUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/digest.js":
/*!****************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/digest.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HEIGHT_SIZE: () => (/* binding */ HEIGHT_SIZE),\n/* harmony export */   MAX_DIGEST_SIZE: () => (/* binding */ MAX_DIGEST_SIZE),\n/* harmony export */   MAX_HEIGHT: () => (/* binding */ MAX_HEIGHT),\n/* harmony export */   MAX_PAYLOAD_SIZE: () => (/* binding */ MAX_PAYLOAD_SIZE),\n/* harmony export */   MAX_SIZE: () => (/* binding */ MAX_SIZE),\n/* harmony export */   ROOT_SIZE: () => (/* binding */ ROOT_SIZE),\n/* harmony export */   TAG_SIZE: () => (/* binding */ TAG_SIZE),\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   fromBytes: () => (/* binding */ fromBytes),\n/* harmony export */   fromPiece: () => (/* binding */ fromPiece),\n/* harmony export */   height: () => (/* binding */ height),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   padding: () => (/* binding */ padding),\n/* harmony export */   root: () => (/* binding */ root),\n/* harmony export */   toBytes: () => (/* binding */ toBytes)\n/* harmony export */ });\n/* harmony import */ var multiformats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats */ \"(rsc)/../node_modules/multiformats/dist/src/index.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n/* harmony import */ var _ipld_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ipld.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/ipld.js\");\n/* harmony import */ var _piece_size_expanded_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piece/size/expanded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/expanded.js\");\n\n\n\n\n\n/**\n * @see https://github.com/multiformats/multicodec/pull/331/files\n */ const name = /** @type {const} */ \"fr32-sha2-256-trunc254-padded-binary-tree\";\n/**\n * @type {API.MulticodecCode<0x1011, typeof name>}\n * @see https://github.com/multiformats/multicodec/pull/331/files\n */ const code = 0x1011;\n/**\n * Varint is used to encode the tree height which is limited to 9 bytes.\n *\n * @see https://github.com/multiformats/unsigned-varint#practical-maximum-of-9-bytes-for-security\n */ const MAX_PADDING_SIZE = 9;\n/**\n * One byte is used to store the tree height.\n */ const HEIGHT_SIZE = 1;\n/**\n * Amount of bytes used to store the tree root.\n */ const ROOT_SIZE = _ipld_js__WEBPACK_IMPORTED_MODULE_3__.SHA256.size;\n/**\n * Size of the multihash digest in bytes.\n */ const MAX_DIGEST_SIZE = MAX_PADDING_SIZE + HEIGHT_SIZE + _ipld_js__WEBPACK_IMPORTED_MODULE_3__.SHA256.size;\nconst TAG_SIZE = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodingLength(code);\n/**\n * Max size of the multihash in bytes\n */ const MAX_SIZE = TAG_SIZE + multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodingLength(MAX_DIGEST_SIZE) + MAX_DIGEST_SIZE;\n/**\n * Since first byte in the digest is the tree height, the maximum height is 255.\n *\n * @type {255}\n */ const MAX_HEIGHT = 255;\n/**\n * Max payload is determined by the maximum height of the tree, which is limited\n * by the int we could store in one byte. We calculate the max piece size\n * and derive max payload size that can would produce it after FR32 padding.\n */ const MAX_PAYLOAD_SIZE = (0,_piece_size_expanded_js__WEBPACK_IMPORTED_MODULE_4__.fromHeight)(MAX_HEIGHT) * BigInt(_constant_js__WEBPACK_IMPORTED_MODULE_2__.IN_BITS_FR) / BigInt(_constant_js__WEBPACK_IMPORTED_MODULE_2__.OUT_BITS_FR);\n/**\n * @param {API.Piece} piece\n * @returns {API.PieceDigest}\n */ const fromPiece = ({ padding, height, root })=>{\n    const paddingLength = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodingLength(Number(padding));\n    const size = paddingLength + HEIGHT_SIZE + ROOT_SIZE;\n    const sizeLength = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodingLength(size);\n    const multihashLength = TAG_SIZE + sizeLength + size;\n    let offset = 0;\n    const bytes = new Uint8Array(multihashLength);\n    multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodeTo(code, bytes, offset);\n    offset += TAG_SIZE;\n    multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodeTo(size, bytes, offset);\n    offset += sizeLength;\n    multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodeTo(Number(padding), bytes, offset);\n    offset += paddingLength;\n    bytes[offset] = height;\n    offset += HEIGHT_SIZE;\n    bytes.set(root, offset);\n    return new Digest(bytes);\n};\n/**\n * @param {Uint8Array} bytes\n * @returns {API.PieceDigest}\n */ const fromBytes = (bytes)=>new Digest(bytes);\n/**\n * @param {object} input\n * @param {Uint8Array} input.digest\n */ const toBytes = ({ digest })=>{\n    const SIZE_BYTE_LENGTH = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodingLength(digest.length);\n    // number of bytes prefix will take up\n    const prefixByteLength = SIZE_BYTE_LENGTH + TAG_SIZE;\n    // if digest is view within a buffer that has enough bytes in front to\n    // fit the prefix it may be already include a prefix in which case we\n    // will simply use a larger slice.\n    if (digest.byteOffset >= prefixByteLength) {\n        const bytes = new Uint8Array(digest.buffer, digest.byteOffset - prefixByteLength, digest.byteOffset + digest.length);\n        // if the prefix matches our bytes represent a multihash\n        const [tag, offset] = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.decode(bytes);\n        if (tag === code && multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.decode(bytes, offset)[0] === digest.length) {\n            return bytes;\n        }\n    }\n    const bytes = new Uint8Array(digest.length + prefixByteLength);\n    multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodeTo(code, bytes);\n    multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.encodeTo(digest.length, bytes, TAG_SIZE);\n    bytes.set(digest, prefixByteLength);\n    return bytes;\n};\n/**\n * @param {object} input\n * @param {Uint8Array} input.digest\n */ const height = ({ digest })=>{\n    const [, offset] = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.decode(digest);\n    return digest[offset];\n};\n/**\n * @param {object} input\n * @param {Uint8Array} input.digest\n */ const padding = ({ digest })=>{\n    const [padding] = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.decode(digest);\n    return BigInt(padding);\n};\n/**\n * @param {object} input\n * @param {Uint8Array} input.digest\n */ const root = ({ digest })=>{\n    const [, offset] = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.decode(digest);\n    return digest.subarray(offset + HEIGHT_SIZE, offset + HEIGHT_SIZE + _ipld_js__WEBPACK_IMPORTED_MODULE_3__.SHA256.size);\n};\n/**\n * @implements {API.PieceDigest}\n */ class Digest {\n    /**\n   * @param {Uint8Array} bytes\n   */ constructor(bytes){\n        this.bytes = bytes;\n        const [tag] = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.decode(bytes);\n        if (tag !== code) {\n            throw new RangeError(`Expected multihash with code ${code}`);\n        }\n        let offset = TAG_SIZE;\n        const [size, length] = multiformats__WEBPACK_IMPORTED_MODULE_0__.varint.decode(bytes, offset);\n        offset += length;\n        const digest = bytes.subarray(offset);\n        if (digest.length !== size) {\n            throw new RangeError(`Invalid multihash size expected ${offset + size} bytes, got ${bytes.length} bytes`);\n        }\n        this.digest = digest;\n    }\n    get name() {\n        return name;\n    }\n    get code() {\n        return code;\n    }\n    get size() {\n        return this.digest.length;\n    }\n    get padding() {\n        return padding(this);\n    }\n    get height() {\n        return height(this);\n    }\n    get root() {\n        return root(this);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/digest.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/fr32.js":
/*!**************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/fr32.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromPieceSize: () => (/* binding */ fromPieceSize),\n/* harmony export */   pad: () => (/* binding */ pad),\n/* harmony export */   toPieceSize: () => (/* binding */ toPieceSize),\n/* harmony export */   toZeroPaddedSize: () => (/* binding */ toZeroPaddedSize),\n/* harmony export */   unpad: () => (/* binding */ unpad)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n\n\n/**\n * Determine the additional bytes of zeroed padding to append to the\n * end of a resource of `size` length in order to fit within a pow2 piece while\n * leaving enough room for Fr32 padding (2 bits per 254).\n *\n * @param {number} payloadSize - The size of the payload.\n * @returns {number}\n */ function toZeroPaddedSize(payloadSize) {\n    const size = Math.max(payloadSize, _constant_js__WEBPACK_IMPORTED_MODULE_1__.MIN_PAYLOAD_SIZE);\n    const highestBit = Math.floor(Math.log2(size));\n    const bound = Math.ceil(_constant_js__WEBPACK_IMPORTED_MODULE_1__.FR_RATIO * 2 ** (highestBit + 1));\n    // the size is either the closest pow2 number, or the next pow2 number if we\n    // don't have space for padding\n    return size <= bound ? bound : Math.ceil(_constant_js__WEBPACK_IMPORTED_MODULE_1__.FR_RATIO * 2 ** (highestBit + 2));\n}\n/**\n * Derives fr32 padded size from the source content size (that MUST be\n * multiples of {@link IN_BYTES_PER_QUAD}) in bytes.\n *\n * @param {number} size\n */ const toPieceSize = (size)=>toZeroPaddedSize(size) / _constant_js__WEBPACK_IMPORTED_MODULE_1__.FR_RATIO;\n/**\n * Derives fr32 unpadded size from the Fr32 padded size in bytes.\n *\n * @param {number} size\n */ const fromPieceSize = (size)=>size * _constant_js__WEBPACK_IMPORTED_MODULE_1__.FR_RATIO;\n/**\n * Takes source bytes that returns fr32 padded bytes.\n *\n * @param {Uint8Array} source\n * @param {Uint8Array} output\n * @returns {API.Fr23Padded}\n */ const pad = (source, output = new Uint8Array(toPieceSize(source.length)))=>{\n    const size = toZeroPaddedSize(source.byteLength);\n    // Calculate number of quads in the given source\n    const quadCount = size / _constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BYTES_PER_QUAD;\n    // Cycle over four(4) 31-byte groups, leaving 1 byte in between:\n    // 31 + 1 + 31 + 1 + 31 + 1 + 31 = 127\n    for(let n = 0; n < quadCount; n++){\n        const readOffset = n * _constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BYTES_PER_QUAD;\n        const writeOffset = n * _constant_js__WEBPACK_IMPORTED_MODULE_1__.OUT_BYTES_PER_QUAD;\n        // First 31 bytes + 6 bits are taken as-is (trimmed later)\n        output.set(source.subarray(readOffset, readOffset + 32), writeOffset);\n        // first 2-bit \"shim\" forced into the otherwise identical output\n        output[writeOffset + 31] &= 63;\n        // copy next Fr32 preceded with the last two bits of the previous Fr32\n        for(let i = 32; i < 64; i++){\n            output[writeOffset + i] = source[readOffset + i] << 2 | source[readOffset + i - 1] >> 6;\n        }\n        // next 2-bit shim\n        output[writeOffset + 63] &= 63;\n        for(let i = 64; i < 96; i++){\n            output[writeOffset + i] = source[readOffset + i] << 4 | source[readOffset + i - 1] >> 4;\n        }\n        // next 2-bit shim\n        output[writeOffset + 95] &= 63;\n        for(let i = 96; i < 127; i++){\n            output[writeOffset + i] = source[readOffset + i] << 6 | source[readOffset + i - 1] >> 2;\n        }\n        // we shim last 2-bits by shifting the last byte by two bits\n        output[writeOffset + 127] = source[readOffset + 126] >> 2;\n    }\n    return output;\n};\n/**\n * @param {API.Fr23Padded} source\n * @param {Uint8Array} [out]\n */ const unpad = (source, out = new Uint8Array(fromPieceSize(source.length)))=>{\n    const chunks = source.length / 128;\n    for(let chunk = 0; chunk < chunks; chunk++){\n        const inOffNext = chunk * 128 + 1;\n        const outOff = chunk * 127;\n        let at = source[chunk * 128];\n        for(let i = 0; i < 32; i++){\n            const next = source[i + inOffNext];\n            out[outOff + i] = at;\n            at = next;\n        }\n        out[outOff + 31] |= at << 6;\n        for(let i = 32; i < 64; i++){\n            const next = source[i + inOffNext];\n            out[outOff + i] = at >> 2;\n            out[outOff + i] |= next << 6;\n            at = next;\n        }\n        out[outOff + 63] ^= at << 6 ^ at << 4;\n        for(let i = 64; i < 96; i++){\n            const next = source[i + inOffNext];\n            out[outOff + i] = at >> 4;\n            out[outOff + i] |= next << 4;\n            at = next;\n        }\n        out[outOff + 95] ^= at << 4 ^ at << 2;\n        for(let i = 96; i < 127; i++){\n            const next = source[i + inOffNext];\n            out[outOff + i];\n            out[outOff + i] = at >> 6;\n            out[outOff + i] |= next << 2;\n            at = next;\n        }\n    }\n    return out;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/fr32.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/inclusion.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/inclusion.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Proof: () => (/* reexport module object */ _proof_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   index: () => (/* binding */ index),\n/* harmony export */   indexAreaStart: () => (/* binding */ indexAreaStart),\n/* harmony export */   link: () => (/* binding */ link),\n/* harmony export */   resolveAggregate: () => (/* binding */ resolveAggregate),\n/* harmony export */   resolveAggregateFromProofIndex: () => (/* binding */ resolveAggregateFromProofIndex),\n/* harmony export */   resolveAggregateFromProofTree: () => (/* binding */ resolveAggregateFromProofTree),\n/* harmony export */   tree: () => (/* binding */ tree)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/index.js\");\n/* harmony import */ var _proof_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./proof.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js\");\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./piece.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece.js\");\n/* harmony import */ var _inclusion_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./inclusion.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/inclusion.js\");\n/* harmony import */ var _segment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./segment.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/segment.js\");\n/* harmony import */ var _aggregate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./aggregate.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate.js\");\n/* harmony import */ var _ipld_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ipld.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/ipld.js\");\n/* harmony import */ var _piece_size_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./piece/size.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @param {API.PieceSize} size\n * @returns {API.uint64}\n */ const indexAreaStart = (size)=>size - BigInt((0,_index_js__WEBPACK_IMPORTED_MODULE_1__.maxIndexEntriesInDeal)(size)) * _index_js__WEBPACK_IMPORTED_MODULE_1__.EntrySize;\n/**\n * Encodes data layout into a CBOR block.\n *\n * @param {API.InclusionProof} proof\n * @returns {API.ByteView<API.InclusionProof, typeof CBOR.code>}\n */ const encode = (proof)=>_ipld_js__WEBPACK_IMPORTED_MODULE_7__.CBOR.encode(proof);\n/**\n * @param {API.InclusionProof} proof\n */ const link = (proof)=>_ipld_js__WEBPACK_IMPORTED_MODULE_7__.createLink(encode(proof), {\n        codec: _ipld_js__WEBPACK_IMPORTED_MODULE_7__.CBOR,\n        hasher: _ipld_js__WEBPACK_IMPORTED_MODULE_7__.SHA256\n    });\n/**\n * Decodes CBOR encoded data layout. It is reverse of {@link encode}.\n *\n * @param {API.ByteView<API.InclusionProof, typeof CBOR.code>} bytes\n */ const decode = (bytes)=>from(_ipld_js__WEBPACK_IMPORTED_MODULE_7__.CBOR.decode(bytes));\n/**\n * Takes proof in either object or array form and returns a proof data.\n *\n * @param {API.IntoInclusionProof} proof\n * @returns {API.InclusionProof}\n */ const from = ([tree, index])=>[\n        _proof_js__WEBPACK_IMPORTED_MODULE_2__.from(tree),\n        _proof_js__WEBPACK_IMPORTED_MODULE_2__.from(index)\n    ];\n/**\n * Takes data model and returns an IPLD View of it.\n *\n * @param {object} source\n * @param {API.ProofData} source.tree\n * @param {API.ProofData} source.index\n * @returns {API.InclusionProof}\n */ const create = ({ tree, index })=>[\n        tree,\n        index\n    ];\n/**\n * Accessor for the segment (sub) tree.\n *\n * @param {API.InclusionProof} proof\n * @returns {API.ProofData}\n */ const tree = ([tree])=>tree;\n/**\n * Accessor for the segment index.\n *\n * @param {API.InclusionProof} proof\n * @returns {API.ProofData}\n */ const index = ([_, index])=>index;\n/**\n * Resolves an (aggregate) piece (link) from the inclusion proof and a\n * (segment) piece (link). It will resolve (aggregate) piece root and size\n * from both tree and index proofs and unless they match it will return an\n * error. Function may also return an error if indices fall out of bound.\n *\n * @param {API.InclusionProof} proof\n * @param {API.PieceLink} segmentPiece\n * @returns {API.Result<API.AggregateLink, Error>}\n */ const resolveAggregate = (proof, segmentPiece)=>{\n    // Read out piece info from the given segment link\n    const piece = _piece_js__WEBPACK_IMPORTED_MODULE_3__.fromLink(segmentPiece);\n    const tree = _inclusion_js__WEBPACK_IMPORTED_MODULE_4__.tree(proof);\n    const index = _inclusion_js__WEBPACK_IMPORTED_MODULE_4__.index(proof);\n    const { ok: aggregate, error } = resolveAggregateFromProofTree({\n        tree\n    }, piece);\n    if (error) {\n        return {\n            error\n        };\n    }\n    const result = resolveAggregateFromProofIndex({\n        index,\n        tree\n    }, piece);\n    if (result.error) {\n        return result;\n    }\n    if (aggregate.toString() !== result.ok.toString()) {\n        return {\n            error: new Error(\"Inclusion proof is invalid\")\n        };\n    }\n    return {\n        ok: aggregate\n    };\n};\n/**\n * Resolves aggregate from the (sub)tree and index proofs. It will use provided\n * piece information to derive corresponding index nodes and then resolve the\n * root of the provided proofs index path. Aggregate size is also derived from\n * the proofs index path. Function also verifies that proof index offset falls\n * within the bounds of the (aggregate) tree index range. Returns aggregate\n * (link) or an error if indices fall out of bound.\n *\n * @param {object} proof\n * @param {API.ProofData} proof.tree\n * @param {API.ProofData} proof.index\n * @param {API.Piece} piece\n * @returns {API.Result<API.AggregateLink, Error>}\n */ const resolveAggregateFromProofIndex = ({ index, tree }, piece)=>{\n    // Derive piece size from it's tree height.\n    const size = _piece_size_js__WEBPACK_IMPORTED_MODULE_8__.Expanded.fromHeight(piece.height);\n    // Derive piece root offset within the (aggregate) tree.\n    const offset = _proof_js__WEBPACK_IMPORTED_MODULE_2__.offset(tree) * size;\n    // Encode segment which produces piece root bytes followed by it's index\n    // node. Which are two leaves of the (aggregate) tree.\n    const segment = _segment_js__WEBPACK_IMPORTED_MODULE_5__.toBytes({\n        root: piece.root,\n        offset,\n        size\n    });\n    // We compute parent node from the (pieceRoot, pieceIndex) which is the node\n    // our index proof leads to.\n    const node = _proof_js__WEBPACK_IMPORTED_MODULE_2__.truncatedHash(segment);\n    // We increment the height by one to account for the parent node we derived\n    // above.\n    const height = _proof_js__WEBPACK_IMPORTED_MODULE_2__.depth(index) + 1;\n    const { ok: root, error } = _proof_js__WEBPACK_IMPORTED_MODULE_2__.resolveRoot(index, node);\n    if (error) {\n        return {\n            error\n        };\n    }\n    // Compute index offset for this aggregate\n    const indexOffset = indexAreaStart(_piece_size_js__WEBPACK_IMPORTED_MODULE_8__.Expanded.fromHeight(height));\n    // Error if index offset is out of bounds for this aggregate\n    const nodeOffset = _proof_js__WEBPACK_IMPORTED_MODULE_2__.offset(index) * _index_js__WEBPACK_IMPORTED_MODULE_1__.EntrySize;\n    if (nodeOffset < indexOffset) {\n        return {\n            error: new RangeError(`Index entry at a wrong offset: ${nodeOffset} < ${indexOffset}`)\n        };\n    }\n    return {\n        ok: _aggregate_js__WEBPACK_IMPORTED_MODULE_6__.toLink({\n            root,\n            height\n        })\n    };\n};\n/**\n * Resolves an (aggregate) piece from the (sub)tree of the given inclusion\n * `proof`. It will use provided piece information to resolve the\n * root of the aggregate from the proof (sub) tree path. Aggregate size is\n * also derived from the proof (sub) tree path and piece size.\n *\n * @param {object} proof\n * @param {API.ProofData} proof.tree\n * @param {API.Piece} piece\n * @returns {API.Result<API.AggregateLink, Error>}\n */ const resolveAggregateFromProofTree = ({ tree }, piece)=>{\n    // Resolve the the aggregate piece root from the given proof and piece.\n    const { ok: root, error } = _proof_js__WEBPACK_IMPORTED_MODULE_2__.resolveRoot(tree, piece.root);\n    if (error) {\n        return {\n            error\n        };\n    }\n    // Derive the aggregate tree height by adding depth of the proof tree to the\n    // height of the piece (sub)tree.\n    const height = piece.height + _proof_js__WEBPACK_IMPORTED_MODULE_2__.depth(tree);\n    return {\n        ok: _aggregate_js__WEBPACK_IMPORTED_MODULE_6__.toLink({\n            root,\n            height\n        })\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/inclusion.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/index.js":
/*!***************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChecksumSize: () => (/* binding */ ChecksumSize),\n/* harmony export */   EntrySize: () => (/* binding */ EntrySize),\n/* harmony export */   Uint64Size: () => (/* binding */ Uint64Size),\n/* harmony export */   maxIndexEntriesInDeal: () => (/* binding */ maxIndexEntriesInDeal)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _segment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./segment.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/segment.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./uint64.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\");\n\n\n\n\nconst { Uint64Size, ChecksumSize } = _segment_js__WEBPACK_IMPORTED_MODULE_2__;\n/**\n * The size of an entry in bytes. This is number of bytes encoded\n * {@link API.Segment} will take: {@link Node.Size} for the merkle root,\n * {@link Uint64Size} for the segment `offset`, {@link Uint64Size} for the\n * segment `size` and {@link Segment.ChecksumSize} for the segment `checksum`.\n */ const EntrySize = BigInt(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size + Uint64Size + Uint64Size + ChecksumSize);\n/**\n * Function that returns the maximum number of index entries in a given deal\n * size according to the formula in the specification:\n *\n * ```\n * number of entries = max(4, 2**floor(log2(padded size of deal / 2048 / 64 [byte/entry])))\n * ```\n *\n * @see https://github.com/filecoin-project/FIPs/blob/master/FRCs/frc-0058.md#data-segment-index\n *\n * The calculation is based on the size of the deal divided by the product of 2048 and\n * the size of an entry (in bytes), rounded up to the nearest power of 2. The minimum\n * return value is 4.\n *\n * @param {API.uint64} size - The size of the deal in bytes.\n * @returns {number} - The maximum number of index entries for a given deal size.\n */ const maxIndexEntriesInDeal = (size)=>{\n    // The raw result is the size of the deal divided by 2048 times the size of an\n    // entry, rounded up to the nearest power of 2.\n    const n = Math.pow(2, (0,_uint64_js__WEBPACK_IMPORTED_MODULE_3__.log2Ceil)(size / 2048n / EntrySize));\n    // If the number is less than 4, return 4, otherwise return actual number.\n    return Math.max(4, n);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQjtBQUNFO0FBQ007QUFDRDtBQUUvQixNQUFNLEVBQUVJLFVBQVUsRUFBRUMsWUFBWSxFQUFFLEdBQUdILHdDQUFPQSxDQUFBO0FBRW5EOzs7OztDQUtDLEdBQ00sTUFBTUksWUFBWUMsT0FDdkJOLDBDQUFTLEdBQUdHLGFBQWFBLGFBQWFDLGNBQ3ZDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDTSxNQUFNSSx3QkFBd0IsQ0FBQ0M7SUFDcEMsOEVBQThFO0lBQzlFLCtDQUErQztJQUMvQyxNQUFNQyxJQUFJQyxLQUFLQyxHQUFHLENBQUMsR0FBR1Ysb0RBQVFBLENBQUNPLE9BQU8sS0FBSyxHQUFHSjtJQUU5QywwRUFBMEU7SUFDMUUsT0FBT00sS0FBS0UsR0FBRyxDQUFDLEdBQUdIO0FBQ3JCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9kYXRhLXNlZ21lbnQvc3JjL2luZGV4LmpzPzkxODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVBJIGZyb20gJy4vYXBpLmpzJ1xuaW1wb3J0ICogYXMgTm9kZSBmcm9tICcuL25vZGUuanMnXG5pbXBvcnQgKiBhcyBTZWdtZW50IGZyb20gJy4vc2VnbWVudC5qcydcbmltcG9ydCB7IGxvZzJDZWlsIH0gZnJvbSAnLi91aW50NjQuanMnXG5cbmV4cG9ydCBjb25zdCB7IFVpbnQ2NFNpemUsIENoZWNrc3VtU2l6ZSB9ID0gU2VnbWVudFxuXG4vKipcbiAqIFRoZSBzaXplIG9mIGFuIGVudHJ5IGluIGJ5dGVzLiBUaGlzIGlzIG51bWJlciBvZiBieXRlcyBlbmNvZGVkXG4gKiB7QGxpbmsgQVBJLlNlZ21lbnR9IHdpbGwgdGFrZToge0BsaW5rIE5vZGUuU2l6ZX0gZm9yIHRoZSBtZXJrbGUgcm9vdCxcbiAqIHtAbGluayBVaW50NjRTaXplfSBmb3IgdGhlIHNlZ21lbnQgYG9mZnNldGAsIHtAbGluayBVaW50NjRTaXplfSBmb3IgdGhlXG4gKiBzZWdtZW50IGBzaXplYCBhbmQge0BsaW5rIFNlZ21lbnQuQ2hlY2tzdW1TaXplfSBmb3IgdGhlIHNlZ21lbnQgYGNoZWNrc3VtYC5cbiAqL1xuZXhwb3J0IGNvbnN0IEVudHJ5U2l6ZSA9IEJpZ0ludChcbiAgTm9kZS5TaXplICsgVWludDY0U2l6ZSArIFVpbnQ2NFNpemUgKyBDaGVja3N1bVNpemVcbilcblxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGluZGV4IGVudHJpZXMgaW4gYSBnaXZlbiBkZWFsXG4gKiBzaXplIGFjY29yZGluZyB0byB0aGUgZm9ybXVsYSBpbiB0aGUgc3BlY2lmaWNhdGlvbjpcbiAqXG4gKiBgYGBcbiAqIG51bWJlciBvZiBlbnRyaWVzID0gbWF4KDQsIDIqKmZsb29yKGxvZzIocGFkZGVkIHNpemUgb2YgZGVhbCAvIDIwNDggLyA2NCBbYnl0ZS9lbnRyeV0pKSlcbiAqIGBgYFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZpbGVjb2luLXByb2plY3QvRklQcy9ibG9iL21hc3Rlci9GUkNzL2ZyYy0wMDU4Lm1kI2RhdGEtc2VnbWVudC1pbmRleFxuICpcbiAqIFRoZSBjYWxjdWxhdGlvbiBpcyBiYXNlZCBvbiB0aGUgc2l6ZSBvZiB0aGUgZGVhbCBkaXZpZGVkIGJ5IHRoZSBwcm9kdWN0IG9mIDIwNDggYW5kXG4gKiB0aGUgc2l6ZSBvZiBhbiBlbnRyeSAoaW4gYnl0ZXMpLCByb3VuZGVkIHVwIHRvIHRoZSBuZWFyZXN0IHBvd2VyIG9mIDIuIFRoZSBtaW5pbXVtXG4gKiByZXR1cm4gdmFsdWUgaXMgNC5cbiAqXG4gKiBAcGFyYW0ge0FQSS51aW50NjR9IHNpemUgLSBUaGUgc2l6ZSBvZiB0aGUgZGVhbCBpbiBieXRlcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGluZGV4IGVudHJpZXMgZm9yIGEgZ2l2ZW4gZGVhbCBzaXplLlxuICovXG5leHBvcnQgY29uc3QgbWF4SW5kZXhFbnRyaWVzSW5EZWFsID0gKHNpemUpID0+IHtcbiAgLy8gVGhlIHJhdyByZXN1bHQgaXMgdGhlIHNpemUgb2YgdGhlIGRlYWwgZGl2aWRlZCBieSAyMDQ4IHRpbWVzIHRoZSBzaXplIG9mIGFuXG4gIC8vIGVudHJ5LCByb3VuZGVkIHVwIHRvIHRoZSBuZWFyZXN0IHBvd2VyIG9mIDIuXG4gIGNvbnN0IG4gPSBNYXRoLnBvdygyLCBsb2cyQ2VpbChzaXplIC8gMjA0OG4gLyBFbnRyeVNpemUpKVxuXG4gIC8vIElmIHRoZSBudW1iZXIgaXMgbGVzcyB0aGFuIDQsIHJldHVybiA0LCBvdGhlcndpc2UgcmV0dXJuIGFjdHVhbCBudW1iZXIuXG4gIHJldHVybiBNYXRoLm1heCg0LCBuKVxufVxuIl0sIm5hbWVzIjpbIkFQSSIsIk5vZGUiLCJTZWdtZW50IiwibG9nMkNlaWwiLCJVaW50NjRTaXplIiwiQ2hlY2tzdW1TaXplIiwiRW50cnlTaXplIiwiQmlnSW50IiwiU2l6ZSIsIm1heEluZGV4RW50cmllc0luRGVhbCIsInNpemUiLCJuIiwiTWF0aCIsInBvdyIsIm1heCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/ipld.js":
/*!**************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/ipld.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CBOR: () => (/* reexport module object */ _ipld_cbor_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   SHA256: () => (/* reexport module object */ _ipld_sha256_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   createLink: () => (/* binding */ createLink)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _ipld_sha256_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ipld/sha256.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/ipld/sha256.js\");\n/* harmony import */ var _ipld_cbor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ipld/cbor.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/ipld/cbor.js\");\n/* harmony import */ var multiformats_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/link */ \"(rsc)/../node_modules/multiformats/dist/src/link.js\");\n\n\n\n\n/**\n * @template Layout\n * @template {API.MulticodecCode} Format\n * @template {API.MulticodecCode} Hash\n * @param {API.ByteView<Layout, Format>} bytes\n * @param {object} settings\n * @param {API.SyncMultihashHasher<Hash>} settings.hasher\n * @param {object} settings.codec\n * @param {Format} settings.codec.code\n * @returns {API.Link<Layout, Format, Hash>}\n */ const createLink = (bytes, { hasher, codec })=>{\n    const digest = hasher.digest(bytes);\n    return multiformats_link__WEBPACK_IMPORTED_MODULE_3__.create(codec.code, digest);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9pcGxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0I7QUFDVztBQUNKO0FBQ0c7QUFFekM7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLE1BQU1JLGFBQWEsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtJQUNqRCxNQUFNQyxTQUFTRixPQUFPRSxNQUFNLENBQUNIO0lBQzdCLE9BQU9GLHFEQUFXLENBQUNJLE1BQU1HLElBQUksRUFBRUY7QUFDakMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ad2ViMy1zdG9yYWdlL2RhdGEtc2VnbWVudC9zcmMvaXBsZC5qcz8xZmI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFQSSBmcm9tICcuL2FwaS5qcydcbmV4cG9ydCAqIGFzIFNIQTI1NiBmcm9tICcuL2lwbGQvc2hhMjU2LmpzJ1xuZXhwb3J0ICogYXMgQ0JPUiBmcm9tICcuL2lwbGQvY2Jvci5qcydcbmltcG9ydCAqIGFzIExpbmsgZnJvbSAnbXVsdGlmb3JtYXRzL2xpbmsnXG5cbi8qKlxuICogQHRlbXBsYXRlIExheW91dFxuICogQHRlbXBsYXRlIHtBUEkuTXVsdGljb2RlY0NvZGV9IEZvcm1hdFxuICogQHRlbXBsYXRlIHtBUEkuTXVsdGljb2RlY0NvZGV9IEhhc2hcbiAqIEBwYXJhbSB7QVBJLkJ5dGVWaWV3PExheW91dCwgRm9ybWF0Pn0gYnl0ZXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5nc1xuICogQHBhcmFtIHtBUEkuU3luY011bHRpaGFzaEhhc2hlcjxIYXNoPn0gc2V0dGluZ3MuaGFzaGVyXG4gKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MuY29kZWNcbiAqIEBwYXJhbSB7Rm9ybWF0fSBzZXR0aW5ncy5jb2RlYy5jb2RlXG4gKiBAcmV0dXJucyB7QVBJLkxpbms8TGF5b3V0LCBGb3JtYXQsIEhhc2g+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTGluayA9IChieXRlcywgeyBoYXNoZXIsIGNvZGVjIH0pID0+IHtcbiAgY29uc3QgZGlnZXN0ID0gaGFzaGVyLmRpZ2VzdChieXRlcylcbiAgcmV0dXJuIExpbmsuY3JlYXRlKGNvZGVjLmNvZGUsIGRpZ2VzdClcbn1cbiJdLCJuYW1lcyI6WyJBUEkiLCJTSEEyNTYiLCJDQk9SIiwiTGluayIsImNyZWF0ZUxpbmsiLCJieXRlcyIsImhhc2hlciIsImNvZGVjIiwiZGlnZXN0IiwiY3JlYXRlIiwiY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/ipld.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/ipld/cbor.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/ipld/cbor.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   name: () => (/* binding */ name)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _ipld_dag_cbor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ipld/dag-cbor */ \"(rsc)/../node_modules/@ipld/dag-cbor/src/index.js\");\n\n\n/**\n * @type {API.MulticodecCode<typeof CBOR.code, typeof CBOR.name>}\n */ const code = _ipld_dag_cbor__WEBPACK_IMPORTED_MODULE_1__.code;\nconst name = _ipld_dag_cbor__WEBPACK_IMPORTED_MODULE_1__.name;\nconst encode = /** @type {<T>(model:T) => API.ByteView<T, typeof code>} */ _ipld_dag_cbor__WEBPACK_IMPORTED_MODULE_1__.encode;\nconst decode = /** @type {<T>(bytes:API.ByteView<T, typeof code>) => T} */ _ipld_dag_cbor__WEBPACK_IMPORTED_MODULE_1__.decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9pcGxkL2Nib3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdDO0FBQ007QUFFdEM7O0NBRUMsR0FDTSxNQUFNRSxPQUFPRCxnREFBUztBQUV0QixNQUFNRSxPQUFPRixnREFBUztBQUV0QixNQUFNRyxTQUNYLHlEQUF5RCxHQUN4REgsa0RBQVcsQ0FBQztBQUVSLE1BQU1JLFNBQ1gseURBQXlELEdBQ3hESixrREFBVyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9pcGxkL2Nib3IuanM/ZDAzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBUEkgZnJvbSAnLi4vYXBpLmpzJ1xuaW1wb3J0ICogYXMgQ0JPUiBmcm9tICdAaXBsZC9kYWctY2JvcidcblxuLyoqXG4gKiBAdHlwZSB7QVBJLk11bHRpY29kZWNDb2RlPHR5cGVvZiBDQk9SLmNvZGUsIHR5cGVvZiBDQk9SLm5hbWU+fVxuICovXG5leHBvcnQgY29uc3QgY29kZSA9IENCT1IuY29kZVxuXG5leHBvcnQgY29uc3QgbmFtZSA9IENCT1IubmFtZVxuXG5leHBvcnQgY29uc3QgZW5jb2RlID1cbiAgLyoqIEB0eXBlIHs8VD4obW9kZWw6VCkgPT4gQVBJLkJ5dGVWaWV3PFQsIHR5cGVvZiBjb2RlPn0gKi9cbiAgKENCT1IuZW5jb2RlKVxuXG5leHBvcnQgY29uc3QgZGVjb2RlID1cbiAgLyoqIEB0eXBlIHs8VD4oYnl0ZXM6QVBJLkJ5dGVWaWV3PFQsIHR5cGVvZiBjb2RlPikgPT4gVH0gKi9cbiAgKENCT1IuZGVjb2RlKVxuIl0sIm5hbWVzIjpbIkFQSSIsIkNCT1IiLCJjb2RlIiwibmFtZSIsImVuY29kZSIsImRlY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/ipld/cbor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/ipld/sha256.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/ipld/sha256.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   digest: () => (/* reexport safe */ sync_multihash_sha2_sha256__WEBPACK_IMPORTED_MODULE_1__.digest),\n/* harmony export */   name: () => (/* reexport safe */ sync_multihash_sha2_sha256__WEBPACK_IMPORTED_MODULE_1__.name),\n/* harmony export */   size: () => (/* reexport safe */ sync_multihash_sha2_sha256__WEBPACK_IMPORTED_MODULE_1__.size)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var sync_multihash_sha2_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sync-multihash-sha2/sha256 */ \"(rsc)/../node_modules/sync-multihash-sha2/src/sha256/node.js\");\n\n\n\n/**\n * @type {API.MulticodecCode<typeof SHA256.code, typeof SHA256.name>}\n */ const code = sync_multihash_sha2_sha256__WEBPACK_IMPORTED_MODULE_1__.code;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9pcGxkL3NoYTI1Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0M7QUFDb0I7QUFDVjtBQUUxQzs7Q0FFQyxHQUNNLE1BQU1FLE9BQU9ELDREQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9pcGxkL3NoYTI1Ni5qcz80ZjExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFQSSBmcm9tICcuLi9hcGkuanMnXG5pbXBvcnQgKiBhcyBTSEEyNTYgZnJvbSAnc3luYy1tdWx0aWhhc2gtc2hhMi9zaGEyNTYnXG5leHBvcnQgKiBmcm9tICdzeW5jLW11bHRpaGFzaC1zaGEyL3NoYTI1NidcblxuLyoqXG4gKiBAdHlwZSB7QVBJLk11bHRpY29kZWNDb2RlPHR5cGVvZiBTSEEyNTYuY29kZSwgdHlwZW9mIFNIQTI1Ni5uYW1lPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvZGUgPSBTSEEyNTYuY29kZVxuIl0sIm5hbWVzIjpbIkFQSSIsIlNIQTI1NiIsImNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/ipld/sha256.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/lib.js":
/*!*************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/lib.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API: () => (/* reexport module object */ _api_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   Aggregate: () => (/* reexport module object */ _aggregate_js__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   BYTES_PER_FR: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.BYTES_PER_FR),\n/* harmony export */   DataAggregationProof: () => (/* reexport module object */ _proof_aggregation_js__WEBPACK_IMPORTED_MODULE_14__),\n/* harmony export */   EXPANDED_BYTES_PER_NODE: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.EXPANDED_BYTES_PER_NODE),\n/* harmony export */   EXPANDED_BYTES_PER_QUAD: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.EXPANDED_BYTES_PER_QUAD),\n/* harmony export */   FRS_PER_QUAD: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.FRS_PER_QUAD),\n/* harmony export */   FR_RATIO: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.FR_RATIO),\n/* harmony export */   Fr32: () => (/* reexport module object */ _fr32_js__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   HybridTree: () => (/* reexport module object */ _aggregate_tree_js__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   IN_BITS_FR: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BITS_FR),\n/* harmony export */   IN_BYTES_PER_QUAD: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BYTES_PER_QUAD),\n/* harmony export */   IPLD: () => (/* reexport module object */ _ipld_js__WEBPACK_IMPORTED_MODULE_15__),\n/* harmony export */   Inclusion: () => (/* reexport module object */ _inclusion_js__WEBPACK_IMPORTED_MODULE_11__),\n/* harmony export */   Index: () => (/* reexport module object */ _index_js__WEBPACK_IMPORTED_MODULE_12__),\n/* harmony export */   LEAFS_PER_QUAD: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.LEAFS_PER_QUAD),\n/* harmony export */   Link: () => (/* reexport module object */ multiformats_link__WEBPACK_IMPORTED_MODULE_13__),\n/* harmony export */   MIN_PAYLOAD_SIZE: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.MIN_PAYLOAD_SIZE),\n/* harmony export */   NODE_SIZE: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.NODE_SIZE),\n/* harmony export */   Node: () => (/* reexport module object */ _node_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   OUT_BITS_FR: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.OUT_BITS_FR),\n/* harmony export */   OUT_BYTES_PER_QUAD: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.OUT_BYTES_PER_QUAD),\n/* harmony export */   PADDED_BYTES_PER_QUAD: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.PADDED_BYTES_PER_QUAD),\n/* harmony export */   Piece: () => (/* reexport module object */ _piece_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   Proof: () => (/* reexport module object */ _proof_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   Segment: () => (/* reexport module object */ _segment_js__WEBPACK_IMPORTED_MODULE_9__),\n/* harmony export */   Tree: () => (/* reexport module object */ _piece_tree_js__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   ZeroComm: () => (/* reexport module object */ _zero_comm_js__WEBPACK_IMPORTED_MODULE_10__)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _proof_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proof.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js\");\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piece.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece.js\");\n/* harmony import */ var _fr32_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fr32.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/fr32.js\");\n/* harmony import */ var _piece_tree_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./piece/tree.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/tree.js\");\n/* harmony import */ var _aggregate_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./aggregate.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate.js\");\n/* harmony import */ var _aggregate_tree_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./aggregate/tree.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/aggregate/tree.js\");\n/* harmony import */ var _segment_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./segment.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/segment.js\");\n/* harmony import */ var _zero_comm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./zero-comm.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/zero-comm.js\");\n/* harmony import */ var _inclusion_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./inclusion.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/inclusion.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/index.js\");\n/* harmony import */ var multiformats_link__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! multiformats/link */ \"(rsc)/../node_modules/multiformats/dist/src/link.js\");\n/* harmony import */ var _proof_aggregation_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./proof/aggregation.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/proof/aggregation.js\");\n/* harmony import */ var _ipld_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ipld.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/ipld.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9saWIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0I7QUFDSztBQUNFO0FBQ0U7QUFDRTtBQUNBO0FBQ0Y7QUFDTTtBQUNJO0FBQ007QUFDVjtBQUNHO0FBQ0M7QUFDUjtBQUNNO0FBQ3FCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9saWIuanM/NDE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaS5qcydcbmV4cG9ydCAqIGZyb20gJy4vY29uc3RhbnQuanMnXG5leHBvcnQgKiBhcyBBUEkgZnJvbSAnLi9hcGkuanMnXG5leHBvcnQgKiBhcyBOb2RlIGZyb20gJy4vbm9kZS5qcydcbmV4cG9ydCAqIGFzIFByb29mIGZyb20gJy4vcHJvb2YuanMnXG5leHBvcnQgKiBhcyBQaWVjZSBmcm9tICcuL3BpZWNlLmpzJ1xuZXhwb3J0ICogYXMgRnIzMiBmcm9tICcuL2ZyMzIuanMnXG5leHBvcnQgKiBhcyBUcmVlIGZyb20gJy4vcGllY2UvdHJlZS5qcydcbmV4cG9ydCAqIGFzIEFnZ3JlZ2F0ZSBmcm9tICcuL2FnZ3JlZ2F0ZS5qcydcbmV4cG9ydCAqIGFzIEh5YnJpZFRyZWUgZnJvbSAnLi9hZ2dyZWdhdGUvdHJlZS5qcydcbmV4cG9ydCAqIGFzIFNlZ21lbnQgZnJvbSAnLi9zZWdtZW50LmpzJ1xuZXhwb3J0ICogYXMgWmVyb0NvbW0gZnJvbSAnLi96ZXJvLWNvbW0uanMnXG5leHBvcnQgKiBhcyBJbmNsdXNpb24gZnJvbSAnLi9pbmNsdXNpb24uanMnXG5leHBvcnQgKiBhcyBJbmRleCBmcm9tICcuL2luZGV4LmpzJ1xuZXhwb3J0ICogYXMgTGluayBmcm9tICdtdWx0aWZvcm1hdHMvbGluaydcbmV4cG9ydCAqIGFzIERhdGFBZ2dyZWdhdGlvblByb29mIGZyb20gJy4vcHJvb2YvYWdncmVnYXRpb24uanMnXG5leHBvcnQgKiBhcyBJUExEIGZyb20gJy4vaXBsZC5qcydcbiJdLCJuYW1lcyI6WyJBUEkiLCJOb2RlIiwiUHJvb2YiLCJQaWVjZSIsIkZyMzIiLCJUcmVlIiwiQWdncmVnYXRlIiwiSHlicmlkVHJlZSIsIlNlZ21lbnQiLCJaZXJvQ29tbSIsIkluY2x1c2lvbiIsIkluZGV4IiwiTGluayIsIkRhdGFBZ2dyZWdhdGlvblByb29mIiwiSVBMRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/lib.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/multihash.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/multihash.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Digest: () => (/* reexport module object */ _digest_js__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   MAX_HEIGHT: () => (/* binding */ MAX_HEIGHT),\n/* harmony export */   MAX_PAYLOAD_SIZE: () => (/* binding */ MAX_PAYLOAD_SIZE),\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   digest: () => (/* binding */ digest),\n/* harmony export */   name: () => (/* binding */ name)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n/* harmony import */ var _zero_comm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./zero-comm.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/zero-comm.js\");\n/* harmony import */ var _proof_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proof.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js\");\n/* harmony import */ var _piece_tree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piece/tree.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/tree.js\");\n/* harmony import */ var _fr32_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fr32.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/fr32.js\");\n/* harmony import */ var _piece_size_expanded_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./piece/size/expanded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/expanded.js\");\n/* harmony import */ var _piece_size_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./piece/size.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size.js\");\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./digest.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/digest.js\");\n/* harmony import */ var multiformats__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! multiformats */ \"(rsc)/../node_modules/multiformats/dist/src/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @see https://github.com/multiformats/multicodec/pull/331/files\n */ const name = /** @type {const} */ \"fr32-sha2-256-trunc254-padded-binary-tree\";\n/**\n * @type {API.MulticodecCode<0x1011, typeof name>}\n * @see https://github.com/multiformats/multicodec/pull/331/files\n */ const code = 0x1011;\n/**\n * Since first byte in the digest is the tree height, the maximum height is 255.\n *\n * @type {255}\n */ const MAX_HEIGHT = 255;\n/**\n * Max payload is determined by the maximum height of the tree, which is limited\n * by the int we could store in one byte. We calculate the max piece size\n * and derive max payload size that can would produce it after FR32 padding.\n */ const MAX_PAYLOAD_SIZE = (0,_piece_size_expanded_js__WEBPACK_IMPORTED_MODULE_6__.fromHeight)(MAX_HEIGHT) * BigInt(_constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BITS_FR) / BigInt(_constant_js__WEBPACK_IMPORTED_MODULE_1__.OUT_BITS_FR);\n/**\n * Computes the digest of the given payload.\n *\n * @param {Uint8Array} payload\n * @returns {API.PieceDigest}\n */ const digest = (payload)=>{\n    const hasher = new Hasher();\n    hasher.write(payload);\n    return hasher.digest();\n};\n/**\n * Creates a streaming hasher that can be used to consumer larger streams\n * of data than it would be practical to load into memory all at once.\n *\n * @returns {API.StreamingHasher<typeof code, number, API.PieceDigest>}\n */ const create = ()=>new Hasher();\n/**\n * @typedef {[API.MerkleTreeNode[], ...API.MerkleTreeNode[][]]} Layers\n *\n * @implements {API.StreamingHasher<typeof code, number, API.PieceDigest>}\n */ class Hasher {\n    constructor(){\n        /**\n     * The number of bytes consumed by the hasher.\n     *\n     * @private\n     */ this.bytesWritten = 0n;\n        /**\n     * This buffer is used to accumulate bytes until we have enough to fill a\n     * quad.\n     *\n     * ⚠️ Note that you should never read bytes past {@link offset} as those\n     * are considered dirty and may contain garbage.\n     *\n     * @protected\n     */ this.buffer = new Uint8Array(_constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BYTES_PER_QUAD);\n        /**\n     * Offset is the number of bytes in we have written into the buffer. If\n     * offset is 0 it means that the buffer is effectively empty. When `offset`\n     * is equal to `this.buffer.length` we have a quad that can be processed.\n     *\n     * @protected\n     */ this.offset = 0;\n        /**\n     * The layers of the tree. Each layer will contain either 0 or 1 nodes\n     * between writes. When we write into a hasher, if we have enough nodes\n     * leaves will be created and pushed into the `layers[0]` array, after\n     * which we flush and combine every two leafs into a node which is moved\n     * to the next layer. This process is repeated until we reach the top\n     * layer, leaving each layer either empty or with a single node.\n     *\n     * @type {Layers}\n     */ this.layers = [\n            []\n        ];\n    }\n    /**\n   * Return the total number of bytes written into the hasher. Calling\n   * {@link reset} will reset the hasher and the count will be reset to 0.\n   *\n   * @returns {bigint}\n   */ count() {\n        return this.bytesWritten;\n    }\n    /**\n   * Computes the digest of all the data that has been written into this hasher.\n   * This method does not have side-effects, meaning that you can continue\n   * writing and call this method again to compute digest of all the data\n   * written from the very beginning.\n   */ digest() {\n        const bytes = new Uint8Array(_digest_js__WEBPACK_IMPORTED_MODULE_8__.MAX_SIZE);\n        const count = this.digestInto(bytes, 0, true);\n        return _digest_js__WEBPACK_IMPORTED_MODULE_8__.fromBytes(bytes.subarray(0, count));\n    }\n    /**\n   * Computes the digest and writes into the given buffer. You can provide\n   * optional `byteOffset` to write digest at that offset in the buffer. By\n   * default the multihash prefix will be written into the buffer, but you can\n   * opt-out by passing `false` as the `asMultihash` argument.\n   *\n   * @param {Uint8Array} output\n   * @param {number} [byteOffset]\n   * @param {boolean} asMultihash\n   */ digestInto(output, byteOffset = 0, asMultihash = true) {\n        const { buffer, layers, offset, bytesWritten } = this;\n        // We do not want to mutate the layers, so we create a shallow copy of it\n        // which we will use to compute the root.\n        let [leaves, ...nodes] = layers;\n        // If we have some bytes in the buffer we fill rest with zeros and compute\n        // leaves from it. Note that it is safe to mutate the buffer here as bytes\n        // past `offset` are considered dirty and should not be read.\n        if (offset > 0 || bytesWritten === 0n) {\n            leaves = [\n                ...leaves,\n                ...(0,_piece_tree_js__WEBPACK_IMPORTED_MODULE_4__.split)((0,_fr32_js__WEBPACK_IMPORTED_MODULE_5__.pad)(buffer.fill(0, offset)))\n            ];\n        }\n        const tree = build([\n            leaves,\n            ...nodes\n        ]);\n        const height = tree.length - 1;\n        const [root] = tree[height];\n        const padding = Number(_piece_size_js__WEBPACK_IMPORTED_MODULE_7__.Unpadded.toPadding(this.bytesWritten));\n        const paddingLength = multiformats__WEBPACK_IMPORTED_MODULE_9__.varint.encodingLength(/** @type {number & bigint} */ padding);\n        let endOffset = byteOffset;\n        // Write the multihash prefix if requested\n        if (asMultihash) {\n            multiformats__WEBPACK_IMPORTED_MODULE_9__.varint.encodeTo(code, output, endOffset);\n            endOffset += _digest_js__WEBPACK_IMPORTED_MODULE_8__.TAG_SIZE;\n            const size = paddingLength + _digest_js__WEBPACK_IMPORTED_MODULE_8__.HEIGHT_SIZE + _digest_js__WEBPACK_IMPORTED_MODULE_8__.ROOT_SIZE;\n            const sizeLength = multiformats__WEBPACK_IMPORTED_MODULE_9__.varint.encodingLength(size);\n            multiformats__WEBPACK_IMPORTED_MODULE_9__.varint.encodeTo(size, output, endOffset);\n            endOffset += sizeLength;\n        }\n        multiformats__WEBPACK_IMPORTED_MODULE_9__.varint.encodeTo(padding, output, endOffset);\n        endOffset += paddingLength;\n        // Write the tree height as the first byte of the digest\n        output[endOffset] = height;\n        endOffset += 1;\n        // Write the root as the remaining 32 bytes of the digest\n        output.set(root, endOffset);\n        endOffset += root.length;\n        // Return number of bytes written\n        return endOffset - byteOffset;\n    }\n    /**\n   * @param {Uint8Array} bytes\n   */ write(bytes) {\n        const { buffer, offset, layers } = this;\n        const leaves = layers[0];\n        const { length } = bytes;\n        // If we got no bytes there is nothing to do here\n        if (length === 0) {\n            return this;\n        /* c8 ignore next 5 */ } else if (this.bytesWritten + BigInt(length) > MAX_PAYLOAD_SIZE) {\n            throw new RangeError(`Writing ${length} bytes exceeds max payload size of ${MAX_PAYLOAD_SIZE}`);\n        } else if (offset + length < buffer.length) {\n            buffer.set(bytes, offset);\n            this.offset += length;\n            this.bytesWritten += BigInt(length);\n            return this;\n        } else {\n            // Number of bytes required to fill the quad buffer\n            const bytesRequired = buffer.length - offset;\n            // copy required bytes into the buffer and turn them into leaves\n            // which we push into the leaf layer.\n            buffer.set(bytes.subarray(0, bytesRequired), offset);\n            leaves.push(...(0,_piece_tree_js__WEBPACK_IMPORTED_MODULE_4__.split)((0,_fr32_js__WEBPACK_IMPORTED_MODULE_5__.pad)(buffer)));\n            // Now we slice remaining bytes into quads, create leaves from them\n            // and push them into the leaf layer.\n            let readOffset = bytesRequired;\n            while(readOffset + _constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BYTES_PER_QUAD < length){\n                const quad = bytes.subarray(readOffset, readOffset + _constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BYTES_PER_QUAD);\n                leaves.push(...(0,_piece_tree_js__WEBPACK_IMPORTED_MODULE_4__.split)((0,_fr32_js__WEBPACK_IMPORTED_MODULE_5__.pad)(quad)));\n                readOffset += _constant_js__WEBPACK_IMPORTED_MODULE_1__.IN_BYTES_PER_QUAD;\n            }\n            // Whatever byte were left are copied into the buffer and we update\n            // the offset to reflect that.\n            this.buffer.set(bytes.subarray(readOffset), 0);\n            this.offset = length - readOffset;\n            // We also update the total number of bytes written.\n            this.bytesWritten += BigInt(length);\n            // Now prune the layers to propagate all the new leaves up the tree.\n            prune(this.layers);\n            return this;\n        }\n    }\n    /**\n   * Resets this hasher to its initial state so it could be recycled as new\n   * instance.\n   */ reset() {\n        this.offset = 0;\n        this.bytesWritten = 0n;\n        this.layers.length = 1;\n        this.layers[0].length = 0;\n        return this;\n    }\n    /* c8 ignore next 3 */ dispose() {\n        this.reset();\n    }\n    get code() {\n        return code;\n    }\n    get name() {\n        return name;\n    }\n}\n/**\n * Prunes layers by combining node pairs into nodes in the next layer and\n * removing them from the layer that they were in. After pruning each layer\n * will end up with at most one node. New layers may be created in the process\n * when nodes from the top layer are combined.\n *\n * @param {Layers} layers\n */ const prune = (layers)=>flush(layers, false);\n/**\n * Flushes all the nodes in layers by combining node pairs into nodes in the\n * next layer. Layers with only one node are combined with zero padded nodes\n * (corresponding to the level of the layer). Unlike {@link prune} combined\n * nodes are not removed and layers are copied instead of been mutated.\n *\n * @param {Layers} layers\n */ const build = (layers)=>flush([\n        ...layers\n    ], true);\n/**\n * @param {Layers} layers\n * @param {boolean} build\n * @returns {Layers}\n */ const flush = (layers, build)=>{\n    // Note it is important that we do not mutate any of the layers otherwise\n    // writing more data into the hasher and computing the digest will produce\n    // wrong results.\n    let level = 0;\n    // We will walk up the tree until we reach the top layer. However, we may end\n    // up with creating new layers in the process, so we will keep track of the\n    while(level < layers.length){\n        let next = layers[level + 1];\n        const layer = layers[level];\n        // If we have the odd number of nodes and we have not reached the top\n        // layer, we push a zero padding node corresponding to the current level.\n        if (build && layer.length % 2 > 0 && next) {\n            layer.push(_zero_comm_js__WEBPACK_IMPORTED_MODULE_2__.fromLevel(level));\n        }\n        level += 1;\n        // If we have 0 nodes in the current layer we just move to the next one.\n        // If we have a next layer and we are building  will combine nodes from the current layer\n        next = next ? build ? [\n            ...next\n        ] : next : [];\n        let index = 0;\n        // Note that we have checked that we have an even number of nodes so\n        // we will never end up with an extra node when consuming two at a time.\n        while(index + 1 < layer.length){\n            const node = (0,_proof_js__WEBPACK_IMPORTED_MODULE_3__.computeNode)(layer[index], layer[index + 1]);\n            // we proactively delete nodes in order to free up a memory used.\n            delete layer[index];\n            delete layer[index + 1];\n            next.push(node);\n            index += 2;\n        }\n        if (next.length) {\n            layers[level] = next;\n        }\n        // we remove nodes that we have combined from the current layer to reduce\n        // memory overhead and move to the next layer.\n        layer.splice(0, index);\n    }\n    return layers;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9tdWx0aWhhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFNVDtBQUNtQjtBQUNEO0FBQ0Q7QUFDUjtBQUM0QztBQUNqQztBQUNMO0FBQ0E7QUFFcEI7QUFFakI7O0NBRUMsR0FDTSxNQUFNYyxPQUFPLGtCQUFrQixHQUNwQyw0Q0FDRDtBQUVEOzs7Q0FHQyxHQUNNLE1BQU1DLE9BQU8sT0FBTTtBQUUxQjs7OztDQUlDLEdBQ00sTUFBTUMsYUFBYSxJQUFHO0FBRTdCOzs7O0NBSUMsR0FDTSxNQUFNQyxtQkFDWCxvRUFBb0JELGNBQWNFLE9BQU9oQixvREFBVUEsSUFBS2dCLE9BQU9mLHFEQUFXQSxFQUFDO0FBRTdFOzs7OztDQUtDLEdBQ00sTUFBTWdCLFNBQVMsQ0FBQ0M7SUFDckIsTUFBTUMsU0FBUyxJQUFJQztJQUNuQkQsT0FBT0UsS0FBSyxDQUFDSDtJQUNiLE9BQU9DLE9BQU9GLE1BQU07QUFDdEIsRUFBQztBQUVEOzs7OztDQUtDLEdBQ00sTUFBTUssU0FBUyxJQUFNLElBQUlGLFNBQVE7QUFFeEM7Ozs7Q0FJQyxHQUNELE1BQU1BO0lBQ0pHLGFBQWM7UUFDWjs7OztLQUlDLEdBQ0QsSUFBSSxDQUFDQyxZQUFZLEdBQUcsRUFBRTtRQUV0Qjs7Ozs7Ozs7S0FRQyxHQUNELElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLFdBQVczQiwyREFBaUJBO1FBRTlDOzs7Ozs7S0FNQyxHQUNELElBQUksQ0FBQzRCLE1BQU0sR0FBRztRQUVkOzs7Ozs7Ozs7S0FTQyxHQUNELElBQUksQ0FBQ0MsTUFBTSxHQUFHO1lBQUMsRUFBRTtTQUFDO0lBQ3BCO0lBRUE7Ozs7O0dBS0MsR0FDREMsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDTCxZQUFZO0lBQzFCO0lBRUE7Ozs7O0dBS0MsR0FDRFAsU0FBUztRQUNQLE1BQU1hLFFBQVEsSUFBSUos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QUFNSSxNQUFNLENBQUMsR0FBR0Y7SUFDbEI7SUFFQSxPQUFPNUM7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ad2ViMy1zdG9yYWdlL2RhdGEtc2VnbWVudC9zcmMvbXVsdGloYXNoLmpzPzFlMGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVBJIGZyb20gJy4vYXBpLmpzJ1xuaW1wb3J0IHtcbiAgSU5fQllURVNfUEVSX1FVQUQsXG4gIElOX0JJVFNfRlIsXG4gIE9VVF9CSVRTX0ZSLFxuICBNSU5fUEFZTE9BRF9TSVpFLFxufSBmcm9tICcuL2NvbnN0YW50LmpzJ1xuaW1wb3J0ICogYXMgWmVyb1BhZCBmcm9tICcuL3plcm8tY29tbS5qcydcbmltcG9ydCB7IGNvbXB1dGVOb2RlIH0gZnJvbSAnLi9wcm9vZi5qcydcbmltcG9ydCB7IHNwbGl0IH0gZnJvbSAnLi9waWVjZS90cmVlLmpzJ1xuaW1wb3J0IHsgcGFkIH0gZnJvbSAnLi9mcjMyLmpzJ1xuaW1wb3J0IHsgZnJvbUhlaWdodCBhcyBwaWNlU2l6ZUZyb21IZWlnaHQgfSBmcm9tICcuL3BpZWNlL3NpemUvZXhwYW5kZWQuanMnXG5pbXBvcnQgeyBVbnBhZGRlZCB9IGZyb20gJy4vcGllY2Uvc2l6ZS5qcydcbmltcG9ydCAqIGFzIERpZ2VzdCBmcm9tICcuL2RpZ2VzdC5qcydcbmltcG9ydCB7IHZhcmludCB9IGZyb20gJ211bHRpZm9ybWF0cydcblxuZXhwb3J0IHsgRGlnZXN0IH1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWx0aWZvcm1hdHMvbXVsdGljb2RlYy9wdWxsLzMzMS9maWxlc1xuICovXG5leHBvcnQgY29uc3QgbmFtZSA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChcbiAgJ2ZyMzItc2hhMi0yNTYtdHJ1bmMyNTQtcGFkZGVkLWJpbmFyeS10cmVlJ1xuKVxuXG4vKipcbiAqIEB0eXBlIHtBUEkuTXVsdGljb2RlY0NvZGU8MHgxMDExLCB0eXBlb2YgbmFtZT59XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWx0aWZvcm1hdHMvbXVsdGljb2RlYy9wdWxsLzMzMS9maWxlc1xuICovXG5leHBvcnQgY29uc3QgY29kZSA9IDB4MTAxMVxuXG4vKipcbiAqIFNpbmNlIGZpcnN0IGJ5dGUgaW4gdGhlIGRpZ2VzdCBpcyB0aGUgdHJlZSBoZWlnaHQsIHRoZSBtYXhpbXVtIGhlaWdodCBpcyAyNTUuXG4gKlxuICogQHR5cGUgezI1NX1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9IRUlHSFQgPSAyNTVcblxuLyoqXG4gKiBNYXggcGF5bG9hZCBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBtYXhpbXVtIGhlaWdodCBvZiB0aGUgdHJlZSwgd2hpY2ggaXMgbGltaXRlZFxuICogYnkgdGhlIGludCB3ZSBjb3VsZCBzdG9yZSBpbiBvbmUgYnl0ZS4gV2UgY2FsY3VsYXRlIHRoZSBtYXggcGllY2Ugc2l6ZVxuICogYW5kIGRlcml2ZSBtYXggcGF5bG9hZCBzaXplIHRoYXQgY2FuIHdvdWxkIHByb2R1Y2UgaXQgYWZ0ZXIgRlIzMiBwYWRkaW5nLlxuICovXG5leHBvcnQgY29uc3QgTUFYX1BBWUxPQURfU0laRSA9XG4gIChwaWNlU2l6ZUZyb21IZWlnaHQoTUFYX0hFSUdIVCkgKiBCaWdJbnQoSU5fQklUU19GUikpIC8gQmlnSW50KE9VVF9CSVRTX0ZSKVxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBkaWdlc3Qgb2YgdGhlIGdpdmVuIHBheWxvYWQuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBwYXlsb2FkXG4gKiBAcmV0dXJucyB7QVBJLlBpZWNlRGlnZXN0fVxuICovXG5leHBvcnQgY29uc3QgZGlnZXN0ID0gKHBheWxvYWQpID0+IHtcbiAgY29uc3QgaGFzaGVyID0gbmV3IEhhc2hlcigpXG4gIGhhc2hlci53cml0ZShwYXlsb2FkKVxuICByZXR1cm4gaGFzaGVyLmRpZ2VzdCgpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmVhbWluZyBoYXNoZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBjb25zdW1lciBsYXJnZXIgc3RyZWFtc1xuICogb2YgZGF0YSB0aGFuIGl0IHdvdWxkIGJlIHByYWN0aWNhbCB0byBsb2FkIGludG8gbWVtb3J5IGFsbCBhdCBvbmNlLlxuICpcbiAqIEByZXR1cm5zIHtBUEkuU3RyZWFtaW5nSGFzaGVyPHR5cGVvZiBjb2RlLCBudW1iZXIsIEFQSS5QaWVjZURpZ2VzdD59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAoKSA9PiBuZXcgSGFzaGVyKClcblxuLyoqXG4gKiBAdHlwZWRlZiB7W0FQSS5NZXJrbGVUcmVlTm9kZVtdLCAuLi5BUEkuTWVya2xlVHJlZU5vZGVbXVtdXX0gTGF5ZXJzXG4gKlxuICogQGltcGxlbWVudHMge0FQSS5TdHJlYW1pbmdIYXNoZXI8dHlwZW9mIGNvZGUsIG51bWJlciwgQVBJLlBpZWNlRGlnZXN0Pn1cbiAqL1xuY2xhc3MgSGFzaGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBieXRlcyBjb25zdW1lZCBieSB0aGUgaGFzaGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmJ5dGVzV3JpdHRlbiA9IDBuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJ1ZmZlciBpcyB1c2VkIHRvIGFjY3VtdWxhdGUgYnl0ZXMgdW50aWwgd2UgaGF2ZSBlbm91Z2ggdG8gZmlsbCBhXG4gICAgICogcXVhZC5cbiAgICAgKlxuICAgICAqIOKaoO+4jyBOb3RlIHRoYXQgeW91IHNob3VsZCBuZXZlciByZWFkIGJ5dGVzIHBhc3Qge0BsaW5rIG9mZnNldH0gYXMgdGhvc2VcbiAgICAgKiBhcmUgY29uc2lkZXJlZCBkaXJ0eSBhbmQgbWF5IGNvbnRhaW4gZ2FyYmFnZS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KElOX0JZVEVTX1BFUl9RVUFEKVxuXG4gICAgLyoqXG4gICAgICogT2Zmc2V0IGlzIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gd2UgaGF2ZSB3cml0dGVuIGludG8gdGhlIGJ1ZmZlci4gSWZcbiAgICAgKiBvZmZzZXQgaXMgMCBpdCBtZWFucyB0aGF0IHRoZSBidWZmZXIgaXMgZWZmZWN0aXZlbHkgZW1wdHkuIFdoZW4gYG9mZnNldGBcbiAgICAgKiBpcyBlcXVhbCB0byBgdGhpcy5idWZmZXIubGVuZ3RoYCB3ZSBoYXZlIGEgcXVhZCB0aGF0IGNhbiBiZSBwcm9jZXNzZWQuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5vZmZzZXQgPSAwXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGF5ZXJzIG9mIHRoZSB0cmVlLiBFYWNoIGxheWVyIHdpbGwgY29udGFpbiBlaXRoZXIgMCBvciAxIG5vZGVzXG4gICAgICogYmV0d2VlbiB3cml0ZXMuIFdoZW4gd2Ugd3JpdGUgaW50byBhIGhhc2hlciwgaWYgd2UgaGF2ZSBlbm91Z2ggbm9kZXNcbiAgICAgKiBsZWF2ZXMgd2lsbCBiZSBjcmVhdGVkIGFuZCBwdXNoZWQgaW50byB0aGUgYGxheWVyc1swXWAgYXJyYXksIGFmdGVyXG4gICAgICogd2hpY2ggd2UgZmx1c2ggYW5kIGNvbWJpbmUgZXZlcnkgdHdvIGxlYWZzIGludG8gYSBub2RlIHdoaWNoIGlzIG1vdmVkXG4gICAgICogdG8gdGhlIG5leHQgbGF5ZXIuIFRoaXMgcHJvY2VzcyBpcyByZXBlYXRlZCB1bnRpbCB3ZSByZWFjaCB0aGUgdG9wXG4gICAgICogbGF5ZXIsIGxlYXZpbmcgZWFjaCBsYXllciBlaXRoZXIgZW1wdHkgb3Igd2l0aCBhIHNpbmdsZSBub2RlLlxuICAgICAqXG4gICAgICogQHR5cGUge0xheWVyc31cbiAgICAgKi9cbiAgICB0aGlzLmxheWVycyA9IFtbXV1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuIGludG8gdGhlIGhhc2hlci4gQ2FsbGluZ1xuICAgKiB7QGxpbmsgcmVzZXR9IHdpbGwgcmVzZXQgdGhlIGhhc2hlciBhbmQgdGhlIGNvdW50IHdpbGwgYmUgcmVzZXQgdG8gMC5cbiAgICpcbiAgICogQHJldHVybnMge2JpZ2ludH1cbiAgICovXG4gIGNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmJ5dGVzV3JpdHRlblxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBkaWdlc3Qgb2YgYWxsIHRoZSBkYXRhIHRoYXQgaGFzIGJlZW4gd3JpdHRlbiBpbnRvIHRoaXMgaGFzaGVyLlxuICAgKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBoYXZlIHNpZGUtZWZmZWN0cywgbWVhbmluZyB0aGF0IHlvdSBjYW4gY29udGludWVcbiAgICogd3JpdGluZyBhbmQgY2FsbCB0aGlzIG1ldGhvZCBhZ2FpbiB0byBjb21wdXRlIGRpZ2VzdCBvZiBhbGwgdGhlIGRhdGFcbiAgICogd3JpdHRlbiBmcm9tIHRoZSB2ZXJ5IGJlZ2lubmluZy5cbiAgICovXG4gIGRpZ2VzdCgpIHtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KERpZ2VzdC5NQVhfU0laRSlcbiAgICBjb25zdCBjb3VudCA9IHRoaXMuZGlnZXN0SW50byhieXRlcywgMCwgdHJ1ZSlcbiAgICByZXR1cm4gRGlnZXN0LmZyb21CeXRlcyhieXRlcy5zdWJhcnJheSgwLCBjb3VudCkpXG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGRpZ2VzdCBhbmQgd3JpdGVzIGludG8gdGhlIGdpdmVuIGJ1ZmZlci4gWW91IGNhbiBwcm92aWRlXG4gICAqIG9wdGlvbmFsIGBieXRlT2Zmc2V0YCB0byB3cml0ZSBkaWdlc3QgYXQgdGhhdCBvZmZzZXQgaW4gdGhlIGJ1ZmZlci4gQnlcbiAgICogZGVmYXVsdCB0aGUgbXVsdGloYXNoIHByZWZpeCB3aWxsIGJlIHdyaXR0ZW4gaW50byB0aGUgYnVmZmVyLCBidXQgeW91IGNhblxuICAgKiBvcHQtb3V0IGJ5IHBhc3NpbmcgYGZhbHNlYCBhcyB0aGUgYGFzTXVsdGloYXNoYCBhcmd1bWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBvdXRwdXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtieXRlT2Zmc2V0XVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFzTXVsdGloYXNoXG4gICAqL1xuICBkaWdlc3RJbnRvKG91dHB1dCwgYnl0ZU9mZnNldCA9IDAsIGFzTXVsdGloYXNoID0gdHJ1ZSkge1xuICAgIGNvbnN0IHsgYnVmZmVyLCBsYXllcnMsIG9mZnNldCwgYnl0ZXNXcml0dGVuIH0gPSB0aGlzXG5cbiAgICAvLyBXZSBkbyBub3Qgd2FudCB0byBtdXRhdGUgdGhlIGxheWVycywgc28gd2UgY3JlYXRlIGEgc2hhbGxvdyBjb3B5IG9mIGl0XG4gICAgLy8gd2hpY2ggd2Ugd2lsbCB1c2UgdG8gY29tcHV0ZSB0aGUgcm9vdC5cbiAgICBsZXQgW2xlYXZlcywgLi4ubm9kZXNdID0gbGF5ZXJzXG5cbiAgICAvLyBJZiB3ZSBoYXZlIHNvbWUgYnl0ZXMgaW4gdGhlIGJ1ZmZlciB3ZSBmaWxsIHJlc3Qgd2l0aCB6ZXJvcyBhbmQgY29tcHV0ZVxuICAgIC8vIGxlYXZlcyBmcm9tIGl0LiBOb3RlIHRoYXQgaXQgaXMgc2FmZSB0byBtdXRhdGUgdGhlIGJ1ZmZlciBoZXJlIGFzIGJ5dGVzXG4gICAgLy8gcGFzdCBgb2Zmc2V0YCBhcmUgY29uc2lkZXJlZCBkaXJ0eSBhbmQgc2hvdWxkIG5vdCBiZSByZWFkLlxuICAgIGlmIChvZmZzZXQgPiAwIHx8IGJ5dGVzV3JpdHRlbiA9PT0gMG4pIHtcbiAgICAgIGxlYXZlcyA9IFsuLi5sZWF2ZXMsIC4uLnNwbGl0KHBhZChidWZmZXIuZmlsbCgwLCBvZmZzZXQpKSldXG4gICAgfVxuXG4gICAgY29uc3QgdHJlZSA9IGJ1aWxkKFtsZWF2ZXMsIC4uLm5vZGVzXSlcbiAgICBjb25zdCBoZWlnaHQgPSB0cmVlLmxlbmd0aCAtIDFcbiAgICBjb25zdCBbcm9vdF0gPSB0cmVlW2hlaWdodF1cbiAgICBjb25zdCBwYWRkaW5nID0gTnVtYmVyKFVucGFkZGVkLnRvUGFkZGluZyh0aGlzLmJ5dGVzV3JpdHRlbikpXG5cbiAgICBjb25zdCBwYWRkaW5nTGVuZ3RoID0gdmFyaW50LmVuY29kaW5nTGVuZ3RoKFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXIgJiBiaWdpbnR9ICovIChwYWRkaW5nKVxuICAgIClcblxuICAgIGxldCBlbmRPZmZzZXQgPSBieXRlT2Zmc2V0XG4gICAgLy8gV3JpdGUgdGhlIG11bHRpaGFzaCBwcmVmaXggaWYgcmVxdWVzdGVkXG4gICAgaWYgKGFzTXVsdGloYXNoKSB7XG4gICAgICB2YXJpbnQuZW5jb2RlVG8oY29kZSwgb3V0cHV0LCBlbmRPZmZzZXQpXG4gICAgICBlbmRPZmZzZXQgKz0gRGlnZXN0LlRBR19TSVpFXG5cbiAgICAgIGNvbnN0IHNpemUgPSBwYWRkaW5nTGVuZ3RoICsgRGlnZXN0LkhFSUdIVF9TSVpFICsgRGlnZXN0LlJPT1RfU0laRVxuICAgICAgY29uc3Qgc2l6ZUxlbmd0aCA9IHZhcmludC5lbmNvZGluZ0xlbmd0aChzaXplKVxuICAgICAgdmFyaW50LmVuY29kZVRvKHNpemUsIG91dHB1dCwgZW5kT2Zmc2V0KVxuICAgICAgZW5kT2Zmc2V0ICs9IHNpemVMZW5ndGhcbiAgICB9XG5cbiAgICB2YXJpbnQuZW5jb2RlVG8ocGFkZGluZywgb3V0cHV0LCBlbmRPZmZzZXQpXG4gICAgZW5kT2Zmc2V0ICs9IHBhZGRpbmdMZW5ndGhcblxuICAgIC8vIFdyaXRlIHRoZSB0cmVlIGhlaWdodCBhcyB0aGUgZmlyc3QgYnl0ZSBvZiB0aGUgZGlnZXN0XG4gICAgb3V0cHV0W2VuZE9mZnNldF0gPSBoZWlnaHRcbiAgICBlbmRPZmZzZXQgKz0gMVxuXG4gICAgLy8gV3JpdGUgdGhlIHJvb3QgYXMgdGhlIHJlbWFpbmluZyAzMiBieXRlcyBvZiB0aGUgZGlnZXN0XG4gICAgb3V0cHV0LnNldChyb290LCBlbmRPZmZzZXQpXG4gICAgZW5kT2Zmc2V0ICs9IHJvb3QubGVuZ3RoXG5cbiAgICAvLyBSZXR1cm4gbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cbiAgICByZXR1cm4gZW5kT2Zmc2V0IC0gYnl0ZU9mZnNldFxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ5dGVzXG4gICAqL1xuICB3cml0ZShieXRlcykge1xuICAgIGNvbnN0IHsgYnVmZmVyLCBvZmZzZXQsIGxheWVycyB9ID0gdGhpc1xuICAgIGNvbnN0IGxlYXZlcyA9IGxheWVyc1swXVxuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBieXRlc1xuICAgIC8vIElmIHdlIGdvdCBubyBieXRlcyB0aGVyZSBpcyBub3RoaW5nIHRvIGRvIGhlcmVcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgICAgLyogYzggaWdub3JlIG5leHQgNSAqL1xuICAgIH0gZWxzZSBpZiAodGhpcy5ieXRlc1dyaXR0ZW4gKyBCaWdJbnQobGVuZ3RoKSA+IE1BWF9QQVlMT0FEX1NJWkUpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICBgV3JpdGluZyAke2xlbmd0aH0gYnl0ZXMgZXhjZWVkcyBtYXggcGF5bG9hZCBzaXplIG9mICR7TUFYX1BBWUxPQURfU0laRX1gXG4gICAgICApXG4gICAgfVxuICAgIC8vIElmIHdlIGRvIG5vdCBoYXZlIGVub3VnaCBieXRlcyB0byBmb3JtIGEgcXVhZCwganVzdCBhZGQgYXBwZW5kIG5ldyBieXRlc1xuICAgIC8vIHRvIHRoZSBidWZmZXIgYW5kIHJldHVybi5cbiAgICBlbHNlIGlmIChvZmZzZXQgKyBsZW5ndGggPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICBidWZmZXIuc2V0KGJ5dGVzLCBvZmZzZXQpXG4gICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGhcbiAgICAgIHRoaXMuYnl0ZXNXcml0dGVuICs9IEJpZ0ludChsZW5ndGgpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2Ugd2UgZmlyc3QgZmlsbCB0aGUgYnVmZmVyIHRvIGZvcm0gYSBxdWFkIGFuZCBjcmVhdGUgc29tZSBsZWF2ZXMuXG4gICAgLy8gVGhlbiB3ZSBzbGljZSByZW1haW5pbmcgYnl0ZXMgaW50byBxdWFkcyBzaXplZCBjaHVua3MgYW5kIGNyZWF0ZSBsZWF2ZXNcbiAgICAvLyBmcm9tIHRoZW0uIElmIHdlIGhhdmUgc29tZSBieXRlcyBsZWZ0IHdlIGNvcHkgdGhlbSBpbnRvIHRoZSBidWZmZXIgYW5kXG4gICAgLy8gZmx1c2ggdG8gY29tYmluaW5nIG5vZGUgcGFpcnMgYW5kIHByb3BhZ2F0ZSB0aGVtIHVwIHRoZSB0cmVlLlxuICAgIGVsc2Uge1xuICAgICAgLy8gTnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIGZpbGwgdGhlIHF1YWQgYnVmZmVyXG4gICAgICBjb25zdCBieXRlc1JlcXVpcmVkID0gYnVmZmVyLmxlbmd0aCAtIG9mZnNldFxuICAgICAgLy8gY29weSByZXF1aXJlZCBieXRlcyBpbnRvIHRoZSBidWZmZXIgYW5kIHR1cm4gdGhlbSBpbnRvIGxlYXZlc1xuICAgICAgLy8gd2hpY2ggd2UgcHVzaCBpbnRvIHRoZSBsZWFmIGxheWVyLlxuICAgICAgYnVmZmVyLnNldChieXRlcy5zdWJhcnJheSgwLCBieXRlc1JlcXVpcmVkKSwgb2Zmc2V0KVxuICAgICAgbGVhdmVzLnB1c2goLi4uc3BsaXQocGFkKGJ1ZmZlcikpKVxuXG4gICAgICAvLyBOb3cgd2Ugc2xpY2UgcmVtYWluaW5nIGJ5dGVzIGludG8gcXVhZHMsIGNyZWF0ZSBsZWF2ZXMgZnJvbSB0aGVtXG4gICAgICAvLyBhbmQgcHVzaCB0aGVtIGludG8gdGhlIGxlYWYgbGF5ZXIuXG4gICAgICBsZXQgcmVhZE9mZnNldCA9IGJ5dGVzUmVxdWlyZWRcbiAgICAgIHdoaWxlIChyZWFkT2Zmc2V0ICsgSU5fQllURVNfUEVSX1FVQUQgPCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcXVhZCA9IGJ5dGVzLnN1YmFycmF5KHJlYWRPZmZzZXQsIHJlYWRPZmZzZXQgKyBJTl9CWVRFU19QRVJfUVVBRClcbiAgICAgICAgbGVhdmVzLnB1c2goLi4uc3BsaXQocGFkKHF1YWQpKSlcbiAgICAgICAgcmVhZE9mZnNldCArPSBJTl9CWVRFU19QRVJfUVVBRFxuICAgICAgfVxuXG4gICAgICAvLyBXaGF0ZXZlciBieXRlIHdlcmUgbGVmdCBhcmUgY29waWVkIGludG8gdGhlIGJ1ZmZlciBhbmQgd2UgdXBkYXRlXG4gICAgICAvLyB0aGUgb2Zmc2V0IHRvIHJlZmxlY3QgdGhhdC5cbiAgICAgIHRoaXMuYnVmZmVyLnNldChieXRlcy5zdWJhcnJheShyZWFkT2Zmc2V0KSwgMClcbiAgICAgIHRoaXMub2Zmc2V0ID0gbGVuZ3RoIC0gcmVhZE9mZnNldFxuXG4gICAgICAvLyBXZSBhbHNvIHVwZGF0ZSB0aGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4uXG4gICAgICB0aGlzLmJ5dGVzV3JpdHRlbiArPSBCaWdJbnQobGVuZ3RoKVxuXG4gICAgICAvLyBOb3cgcHJ1bmUgdGhlIGxheWVycyB0byBwcm9wYWdhdGUgYWxsIHRoZSBuZXcgbGVhdmVzIHVwIHRoZSB0cmVlLlxuICAgICAgcHJ1bmUodGhpcy5sYXllcnMpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGlzIGhhc2hlciB0byBpdHMgaW5pdGlhbCBzdGF0ZSBzbyBpdCBjb3VsZCBiZSByZWN5Y2xlZCBhcyBuZXdcbiAgICogaW5zdGFuY2UuXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLmJ5dGVzV3JpdHRlbiA9IDBuXG4gICAgdGhpcy5sYXllcnMubGVuZ3RoID0gMVxuICAgIHRoaXMubGF5ZXJzWzBdLmxlbmd0aCA9IDBcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICBkaXNwb3NlKCkge1xuICAgIHRoaXMucmVzZXQoKVxuICB9XG4gIGdldCBjb2RlKCkge1xuICAgIHJldHVybiBjb2RlXG4gIH1cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIG5hbWVcbiAgfVxufVxuXG4vKipcbiAqIFBydW5lcyBsYXllcnMgYnkgY29tYmluaW5nIG5vZGUgcGFpcnMgaW50byBub2RlcyBpbiB0aGUgbmV4dCBsYXllciBhbmRcbiAqIHJlbW92aW5nIHRoZW0gZnJvbSB0aGUgbGF5ZXIgdGhhdCB0aGV5IHdlcmUgaW4uIEFmdGVyIHBydW5pbmcgZWFjaCBsYXllclxuICogd2lsbCBlbmQgdXAgd2l0aCBhdCBtb3N0IG9uZSBub2RlLiBOZXcgbGF5ZXJzIG1heSBiZSBjcmVhdGVkIGluIHRoZSBwcm9jZXNzXG4gKiB3aGVuIG5vZGVzIGZyb20gdGhlIHRvcCBsYXllciBhcmUgY29tYmluZWQuXG4gKlxuICogQHBhcmFtIHtMYXllcnN9IGxheWVyc1xuICovXG5jb25zdCBwcnVuZSA9IChsYXllcnMpID0+IGZsdXNoKGxheWVycywgZmFsc2UpXG5cbi8qKlxuICogRmx1c2hlcyBhbGwgdGhlIG5vZGVzIGluIGxheWVycyBieSBjb21iaW5pbmcgbm9kZSBwYWlycyBpbnRvIG5vZGVzIGluIHRoZVxuICogbmV4dCBsYXllci4gTGF5ZXJzIHdpdGggb25seSBvbmUgbm9kZSBhcmUgY29tYmluZWQgd2l0aCB6ZXJvIHBhZGRlZCBub2Rlc1xuICogKGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxldmVsIG9mIHRoZSBsYXllcikuIFVubGlrZSB7QGxpbmsgcHJ1bmV9IGNvbWJpbmVkXG4gKiBub2RlcyBhcmUgbm90IHJlbW92ZWQgYW5kIGxheWVycyBhcmUgY29waWVkIGluc3RlYWQgb2YgYmVlbiBtdXRhdGVkLlxuICpcbiAqIEBwYXJhbSB7TGF5ZXJzfSBsYXllcnNcbiAqL1xuY29uc3QgYnVpbGQgPSAobGF5ZXJzKSA9PiBmbHVzaChbLi4ubGF5ZXJzXSwgdHJ1ZSlcblxuLyoqXG4gKiBAcGFyYW0ge0xheWVyc30gbGF5ZXJzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJ1aWxkXG4gKiBAcmV0dXJucyB7TGF5ZXJzfVxuICovXG5jb25zdCBmbHVzaCA9IChsYXllcnMsIGJ1aWxkKSA9PiB7XG4gIC8vIE5vdGUgaXQgaXMgaW1wb3J0YW50IHRoYXQgd2UgZG8gbm90IG11dGF0ZSBhbnkgb2YgdGhlIGxheWVycyBvdGhlcndpc2VcbiAgLy8gd3JpdGluZyBtb3JlIGRhdGEgaW50byB0aGUgaGFzaGVyIGFuZCBjb21wdXRpbmcgdGhlIGRpZ2VzdCB3aWxsIHByb2R1Y2VcbiAgLy8gd3JvbmcgcmVzdWx0cy5cbiAgbGV0IGxldmVsID0gMFxuICAvLyBXZSB3aWxsIHdhbGsgdXAgdGhlIHRyZWUgdW50aWwgd2UgcmVhY2ggdGhlIHRvcCBsYXllci4gSG93ZXZlciwgd2UgbWF5IGVuZFxuICAvLyB1cCB3aXRoIGNyZWF0aW5nIG5ldyBsYXllcnMgaW4gdGhlIHByb2Nlc3MsIHNvIHdlIHdpbGwga2VlcCB0cmFjayBvZiB0aGVcbiAgd2hpbGUgKGxldmVsIDwgbGF5ZXJzLmxlbmd0aCkge1xuICAgIGxldCBuZXh0ID0gbGF5ZXJzW2xldmVsICsgMV1cbiAgICBjb25zdCBsYXllciA9IGxheWVyc1tsZXZlbF1cblxuICAgIC8vIElmIHdlIGhhdmUgdGhlIG9kZCBudW1iZXIgb2Ygbm9kZXMgYW5kIHdlIGhhdmUgbm90IHJlYWNoZWQgdGhlIHRvcFxuICAgIC8vIGxheWVyLCB3ZSBwdXNoIGEgemVybyBwYWRkaW5nIG5vZGUgY29ycmVzcG9uZGluZyB0byB0aGUgY3VycmVudCBsZXZlbC5cbiAgICBpZiAoYnVpbGQgJiYgbGF5ZXIubGVuZ3RoICUgMiA+IDAgJiYgbmV4dCkge1xuICAgICAgbGF5ZXIucHVzaChaZXJvUGFkLmZyb21MZXZlbChsZXZlbCkpXG4gICAgfVxuXG4gICAgbGV2ZWwgKz0gMVxuXG4gICAgLy8gSWYgd2UgaGF2ZSAwIG5vZGVzIGluIHRoZSBjdXJyZW50IGxheWVyIHdlIGp1c3QgbW92ZSB0byB0aGUgbmV4dCBvbmUuXG5cbiAgICAvLyBJZiB3ZSBoYXZlIGEgbmV4dCBsYXllciBhbmQgd2UgYXJlIGJ1aWxkaW5nICB3aWxsIGNvbWJpbmUgbm9kZXMgZnJvbSB0aGUgY3VycmVudCBsYXllclxuICAgIG5leHQgPSBuZXh0ID8gKGJ1aWxkID8gWy4uLm5leHRdIDogbmV4dCkgOiBbXVxuICAgIGxldCBpbmRleCA9IDBcbiAgICAvLyBOb3RlIHRoYXQgd2UgaGF2ZSBjaGVja2VkIHRoYXQgd2UgaGF2ZSBhbiBldmVuIG51bWJlciBvZiBub2RlcyBzb1xuICAgIC8vIHdlIHdpbGwgbmV2ZXIgZW5kIHVwIHdpdGggYW4gZXh0cmEgbm9kZSB3aGVuIGNvbnN1bWluZyB0d28gYXQgYSB0aW1lLlxuICAgIHdoaWxlIChpbmRleCArIDEgPCBsYXllci5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBjb21wdXRlTm9kZShsYXllcltpbmRleF0sIGxheWVyW2luZGV4ICsgMV0pXG5cbiAgICAgIC8vIHdlIHByb2FjdGl2ZWx5IGRlbGV0ZSBub2RlcyBpbiBvcmRlciB0byBmcmVlIHVwIGEgbWVtb3J5IHVzZWQuXG4gICAgICBkZWxldGUgbGF5ZXJbaW5kZXhdXG4gICAgICBkZWxldGUgbGF5ZXJbaW5kZXggKyAxXVxuXG4gICAgICBuZXh0LnB1c2gobm9kZSlcbiAgICAgIGluZGV4ICs9IDJcbiAgICB9XG5cbiAgICBpZiAobmV4dC5sZW5ndGgpIHtcbiAgICAgIGxheWVyc1tsZXZlbF0gPSBuZXh0XG4gICAgfVxuXG4gICAgLy8gd2UgcmVtb3ZlIG5vZGVzIHRoYXQgd2UgaGF2ZSBjb21iaW5lZCBmcm9tIHRoZSBjdXJyZW50IGxheWVyIHRvIHJlZHVjZVxuICAgIC8vIG1lbW9yeSBvdmVyaGVhZCBhbmQgbW92ZSB0byB0aGUgbmV4dCBsYXllci5cbiAgICBsYXllci5zcGxpY2UoMCwgaW5kZXgpXG4gIH1cblxuICByZXR1cm4gbGF5ZXJzXG59XG4iXSwibmFtZXMiOlsiQVBJIiwiSU5fQllURVNfUEVSX1FVQUQiLCJJTl9CSVRTX0ZSIiwiT1VUX0JJVFNfRlIiLCJNSU5fUEFZTE9BRF9TSVpFIiwiWmVyb1BhZCIsImNvbXB1dGVOb2RlIiwic3BsaXQiLCJwYWQiLCJmcm9tSGVpZ2h0IiwicGljZVNpemVGcm9tSGVpZ2h0IiwiVW5wYWRkZWQiLCJEaWdlc3QiLCJ2YXJpbnQiLCJuYW1lIiwiY29kZSIsIk1BWF9IRUlHSFQiLCJNQVhfUEFZTE9BRF9TSVpFIiwiQmlnSW50IiwiZGlnZXN0IiwicGF5bG9hZCIsImhhc2hlciIsIkhhc2hlciIsIndyaXRlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJieXRlc1dyaXR0ZW4iLCJidWZmZXIiLCJVaW50OEFycmF5Iiwib2Zmc2V0IiwibGF5ZXJzIiwiY291bnQiLCJieXRlcyIsIk1BWF9TSVpFIiwiZGlnZXN0SW50byIsImZyb21CeXRlcyIsInN1YmFycmF5Iiwib3V0cHV0IiwiYnl0ZU9mZnNldCIsImFzTXVsdGloYXNoIiwibGVhdmVzIiwibm9kZXMiLCJmaWxsIiwidHJlZSIsImJ1aWxkIiwiaGVpZ2h0IiwibGVuZ3RoIiwicm9vdCIsInBhZGRpbmciLCJOdW1iZXIiLCJ0b1BhZGRpbmciLCJwYWRkaW5nTGVuZ3RoIiwiZW5jb2RpbmdMZW5ndGgiLCJlbmRPZmZzZXQiLCJlbmNvZGVUbyIsIlRBR19TSVpFIiwic2l6ZSIsIkhFSUdIVF9TSVpFIiwiUk9PVF9TSVpFIiwic2l6ZUxlbmd0aCIsInNldCIsIlJhbmdlRXJyb3IiLCJieXRlc1JlcXVpcmVkIiwicHVzaCIsInJlYWRPZmZzZXQiLCJxdWFkIiwicHJ1bmUiLCJyZXNldCIsImRpc3Bvc2UiLCJmbHVzaCIsImxldmVsIiwibmV4dCIsImxheWVyIiwiZnJvbUxldmVsIiwiaW5kZXgiLCJub2RlIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/multihash.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/node.js":
/*!**************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/node.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Size: () => (/* reexport safe */ _constant_js__WEBPACK_IMPORTED_MODULE_1__.NODE_SIZE),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   of: () => (/* binding */ of)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n\n\n\n/**\n * @param {number[]} bytes\n */ const of = (...bytes)=>from(bytes);\n/**\n * @param {Iterable<number>} bytes\n * @returns {API.MerkleTreeNode}\n */ const from = (bytes)=>{\n    /* c8 ignore next 7 */ if (bytes instanceof Uint8Array) {\n        if (bytes.length > _constant_js__WEBPACK_IMPORTED_MODULE_1__.NODE_SIZE) {\n            return bytes.subarray(0, _constant_js__WEBPACK_IMPORTED_MODULE_1__.NODE_SIZE);\n        } else if (bytes.length == _constant_js__WEBPACK_IMPORTED_MODULE_1__.NODE_SIZE) {\n            return bytes;\n        }\n    }\n    const node = new Uint8Array(_constant_js__WEBPACK_IMPORTED_MODULE_1__.NODE_SIZE);\n    node.set([\n        ...bytes\n    ]);\n    return node;\n};\nconst empty = ()=>EMPTY;\nconst EMPTY = from(new Uint8Array(_constant_js__WEBPACK_IMPORTED_MODULE_1__.NODE_SIZE).fill(0));\nObject.freeze(EMPTY.buffer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQjtBQUNrQjtBQUVsQztBQUVmOztDQUVDLEdBQ00sTUFBTUcsS0FBSyxDQUFDLEdBQUdDLFFBQVVDLEtBQUtELE9BQU07QUFFM0M7OztDQUdDLEdBQ00sTUFBTUMsT0FBTyxDQUFDRDtJQUNuQixvQkFBb0IsR0FDcEIsSUFBSUEsaUJBQWlCRSxZQUFZO1FBQy9CLElBQUlGLE1BQU1HLE1BQU0sR0FBR0wsbURBQUlBLEVBQUU7WUFDdkIsT0FBT0UsTUFBTUksUUFBUSxDQUFDLEdBQUdOLG1EQUFJQTtRQUMvQixPQUFPLElBQUlFLE1BQU1HLE1BQU0sSUFBSUwsbURBQUlBLEVBQUU7WUFDL0IsT0FBT0U7UUFDVDtJQUNGO0lBRUEsTUFBTUssT0FBTyxJQUFJSCxXQUFXSixtREFBSUE7SUFDaENPLEtBQUtDLEdBQUcsQ0FBQztXQUFJTjtLQUFNO0lBQ25CLE9BQU9LO0FBQ1QsRUFBQztBQUVNLE1BQU1FLFFBQVEsSUFBTUMsTUFBSztBQUVoQyxNQUFNQSxRQUFRUCxLQUFLLElBQUlDLFdBQVdKLG1EQUFJQSxFQUFFVyxJQUFJLENBQUM7QUFDN0NDLE9BQU9DLE1BQU0sQ0FBQ0gsTUFBTUksTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ad2ViMy1zdG9yYWdlL2RhdGEtc2VnbWVudC9zcmMvbm9kZS5qcz80YjY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFQSSBmcm9tICcuL2FwaS5qcydcbmltcG9ydCB7IE5PREVfU0laRSBhcyBTaXplIH0gZnJvbSAnLi9jb25zdGFudC5qcydcblxuZXhwb3J0IHsgU2l6ZSB9XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJbXX0gYnl0ZXNcbiAqL1xuZXhwb3J0IGNvbnN0IG9mID0gKC4uLmJ5dGVzKSA9PiBmcm9tKGJ5dGVzKVxuXG4vKipcbiAqIEBwYXJhbSB7SXRlcmFibGU8bnVtYmVyPn0gYnl0ZXNcbiAqIEByZXR1cm5zIHtBUEkuTWVya2xlVHJlZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tID0gKGJ5dGVzKSA9PiB7XG4gIC8qIGM4IGlnbm9yZSBuZXh0IDcgKi9cbiAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIGlmIChieXRlcy5sZW5ndGggPiBTaXplKSB7XG4gICAgICByZXR1cm4gYnl0ZXMuc3ViYXJyYXkoMCwgU2l6ZSlcbiAgICB9IGVsc2UgaWYgKGJ5dGVzLmxlbmd0aCA9PSBTaXplKSB7XG4gICAgICByZXR1cm4gYnl0ZXNcbiAgICB9XG4gIH1cblxuICBjb25zdCBub2RlID0gbmV3IFVpbnQ4QXJyYXkoU2l6ZSlcbiAgbm9kZS5zZXQoWy4uLmJ5dGVzXSlcbiAgcmV0dXJuIG5vZGVcbn1cblxuZXhwb3J0IGNvbnN0IGVtcHR5ID0gKCkgPT4gRU1QVFlcblxuY29uc3QgRU1QVFkgPSBmcm9tKG5ldyBVaW50OEFycmF5KFNpemUpLmZpbGwoMCkpXG5PYmplY3QuZnJlZXplKEVNUFRZLmJ1ZmZlcilcbiJdLCJuYW1lcyI6WyJBUEkiLCJOT0RFX1NJWkUiLCJTaXplIiwib2YiLCJieXRlcyIsImZyb20iLCJVaW50OEFycmF5IiwibGVuZ3RoIiwic3ViYXJyYXkiLCJub2RlIiwic2V0IiwiZW1wdHkiLCJFTVBUWSIsImZpbGwiLCJPYmplY3QiLCJmcmVlemUiLCJidWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/piece.js":
/*!***************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/piece.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilCommitmentUnsealed: () => (/* binding */ FilCommitmentUnsealed),\n/* harmony export */   MAX_PAYLOAD_SIZE: () => (/* reexport safe */ _multihash_js__WEBPACK_IMPORTED_MODULE_5__.MAX_PAYLOAD_SIZE),\n/* harmony export */   Sha256Trunc254Padded: () => (/* binding */ Sha256Trunc254Padded),\n/* harmony export */   Size: () => (/* reexport module object */ _piece_size_js__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   fromDigest: () => (/* binding */ fromDigest),\n/* harmony export */   fromInfo: () => (/* binding */ fromInfo),\n/* harmony export */   fromJSON: () => (/* binding */ fromJSON),\n/* harmony export */   fromLink: () => (/* binding */ fromLink),\n/* harmony export */   fromPayload: () => (/* binding */ fromPayload),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   toInfo: () => (/* binding */ toInfo),\n/* harmony export */   toJSON: () => (/* binding */ toJSON),\n/* harmony export */   toLink: () => (/* binding */ toLink),\n/* harmony export */   toString: () => (/* binding */ toString),\n/* harmony export */   toView: () => (/* binding */ toView)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/hashes/digest */ \"(rsc)/../node_modules/multiformats/dist/src/hashes/digest.js\");\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./digest.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/digest.js\");\n/* harmony import */ var multiformats_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/link */ \"(rsc)/../node_modules/multiformats/dist/src/link.js\");\n/* harmony import */ var multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! multiformats/codecs/raw */ \"(rsc)/../node_modules/multiformats/dist/src/codecs/raw.js\");\n/* harmony import */ var _multihash_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multihash.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/multihash.js\");\n/* harmony import */ var _piece_size_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./piece/size.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size.js\");\n\n\n\n\n\n\n\n\n/**\n * @see https://github.com/multiformats/go-multihash/blob/dc3bd6897fcd17f6acd8d4d6ffd2cea3d4d3ebeb/multihash.go#L73\n * @type {API.MulticodecCode<0x1012, 'sha2-256-trunc254-padded'>}\n */ const Sha256Trunc254Padded = 0x1012;\n/**\n * @see https://github.com/ipfs/go-cid/blob/829c826f6be23320846f4b7318aee4d17bf8e094/cid.go#L104\n * @type {API.MulticodecCode<0xf101, 'fil-commitment-unsealed'>}\n */ const FilCommitmentUnsealed = 0xf101;\n/**\n * @param {API.PieceDigest} digest\n * @returns {API.PieceView}\n */ const fromDigest = (digest)=>fromLink(multiformats_link__WEBPACK_IMPORTED_MODULE_3__.create(multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_4__.code, digest));\n/**\n *\n * @param {API.PieceLink} link\n * @returns {API.PieceView}\n */ const fromLink = (link)=>{\n    if (link.code !== multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_4__.code) {\n        throw new TypeError(`Piece link must have raw encoding`);\n    }\n    if (link.multihash.code !== _multihash_js__WEBPACK_IMPORTED_MODULE_5__.code) {\n        throw new Error(`Piece link must have ${_multihash_js__WEBPACK_IMPORTED_MODULE_5__.name} multihash`);\n    }\n    return new Piece(link);\n};\n/**\n * @param {string} source\n */ const fromString = (source)=>fromLink(multiformats_link__WEBPACK_IMPORTED_MODULE_3__.parse(source));\n/**\n *\n * @param {API.Piece} piece\n * @returns {API.ToString<API.PieceLink>}\n */ const toString = (piece)=>`${toLink(piece)}`;\n/**\n * @param {unknown} json\n */ const fromJSON = (json)=>fromString(/** @type {{'/': string}} */ json[\"/\"]);\n/**\n *\n * @param {API.Piece} piece\n * @returns {{'/': API.ToString<API.PieceLink>}}}\n */ const toJSON = (piece)=>({\n        \"/\": toString(piece)\n    });\n/**\n * @param {Uint8Array} payload\n */ const fromPayload = (payload)=>fromDigest((0,_multihash_js__WEBPACK_IMPORTED_MODULE_5__.digest)(payload));\n/**\n * @param {API.Piece} piece\n * @returns {API.PieceView}\n */ const toView = (piece)=>fromDigest(_digest_js__WEBPACK_IMPORTED_MODULE_2__.fromPiece(piece));\n/**\n *\n * @param {API.Piece} piece\n * @returns {API.PieceLink}\n */ const toLink = (piece)=>multiformats_link__WEBPACK_IMPORTED_MODULE_3__.create(multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_4__.code, _digest_js__WEBPACK_IMPORTED_MODULE_2__.fromPiece(piece));\n/**\n *\n * @param {API.Piece} piece\n * @returns {API.PieceInfoView}\n */ const toInfo = (piece)=>new Info(_digest_js__WEBPACK_IMPORTED_MODULE_2__.fromPiece(piece));\n/**\n *\n * @param {API.PieceInfo} info\n * @returns\n */ const fromInfo = (info)=>toView({\n        height: _piece_size_js__WEBPACK_IMPORTED_MODULE_6__.toHeight(info.size),\n        root: info.link.multihash.digest,\n        padding: 0n\n    });\nclass Piece {\n    /**\n   * @param {API.PieceLink} link\n   */ constructor(link){\n        this.link = link;\n    }\n    get padding() {\n        return _digest_js__WEBPACK_IMPORTED_MODULE_2__.padding(this.link.multihash);\n    }\n    get height() {\n        return _digest_js__WEBPACK_IMPORTED_MODULE_2__.height(this.link.multihash);\n    }\n    get size() {\n        return _piece_size_js__WEBPACK_IMPORTED_MODULE_6__.fromHeight(this.height);\n    }\n    get root() {\n        return _digest_js__WEBPACK_IMPORTED_MODULE_2__.root(this.link.multihash);\n    }\n    toJSON() {\n        return {\n            \"/\": this.toString()\n        };\n    }\n    toString() {\n        return /** @type {API.ToString<API.PieceLink>} */ this.link.toString();\n    }\n    toInfo() {\n        return new Info(this);\n    }\n}\n/**\n * @implements {API.PieceInfo}\n */ class Info {\n    /**\n   * @param {API.Piece} piece\n   */ constructor(piece){\n        this.piece = piece;\n        /** @type {API.LegacyPieceLink|undefined} */ this._link;\n    }\n    get height() {\n        return this.piece.height;\n    }\n    get root() {\n        return this.piece.root;\n    }\n    get size() {\n        return _piece_size_js__WEBPACK_IMPORTED_MODULE_6__.fromHeight(this.height);\n    }\n    get padding() {\n        return this.piece.padding;\n    }\n    get link() {\n        if (this._link == null) {\n            this._link = multiformats_link__WEBPACK_IMPORTED_MODULE_3__.create(FilCommitmentUnsealed, (0,multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_1__.create)(Sha256Trunc254Padded, this.root));\n        }\n        return this._link;\n    }\n    toJSON() {\n        return {\n            link: {\n                \"/\": this.link.toString()\n            },\n            height: this.height\n        };\n    }\n    toString() {\n        return JSON.stringify(this.toJSON(), null, 2);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/piece.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size.js":
/*!********************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/piece/size.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expanded: () => (/* reexport module object */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   Padded: () => (/* reexport module object */ _size_padded_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   Unpadded: () => (/* reexport module object */ _size_unpadded_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   from: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.from),\n/* harmony export */   fromHeight: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.fromHeight),\n/* harmony export */   fromPadded: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.fromPadded),\n/* harmony export */   fromUnpadded: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.fromUnpadded),\n/* harmony export */   fromWidth: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.fromWidth),\n/* harmony export */   toHeight: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.toHeight),\n/* harmony export */   toPadded: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.toPadded),\n/* harmony export */   toWidth: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.toWidth),\n/* harmony export */   tryFrom: () => (/* reexport safe */ _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__.tryFrom)\n/* harmony export */ });\n/* harmony import */ var _size_unpadded_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./size/unpadded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/unpadded.js\");\n/* harmony import */ var _size_padded_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./size/padded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/padded.js\");\n/* harmony import */ var _size_expanded_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./size/expanded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/expanded.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9waWVjZS9zaXplLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUNKO0FBQ0k7QUFDWiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9Ad2ViMy1zdG9yYWdlL2RhdGEtc2VnbWVudC9zcmMvcGllY2Uvc2l6ZS5qcz9mMzc0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGFzIFVucGFkZGVkIGZyb20gJy4vc2l6ZS91bnBhZGRlZC5qcydcbmV4cG9ydCAqIGFzIFBhZGRlZCBmcm9tICcuL3NpemUvcGFkZGVkLmpzJ1xuZXhwb3J0ICogYXMgRXhwYW5kZWQgZnJvbSAnLi9zaXplL2V4cGFuZGVkLmpzJ1xuZXhwb3J0ICogZnJvbSAnLi9zaXplL2V4cGFuZGVkLmpzJ1xuIl0sIm5hbWVzIjpbIlVucGFkZGVkIiwiUGFkZGVkIiwiRXhwYW5kZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/expanded.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/piece/size/expanded.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromHeight: () => (/* binding */ fromHeight),\n/* harmony export */   fromPadded: () => (/* reexport safe */ _padded_js__WEBPACK_IMPORTED_MODULE_3__.toExpanded),\n/* harmony export */   fromUnpadded: () => (/* reexport safe */ _unpadded_js__WEBPACK_IMPORTED_MODULE_4__.toExpanded),\n/* harmony export */   fromWidth: () => (/* binding */ fromWidth),\n/* harmony export */   toHeight: () => (/* binding */ toHeight),\n/* harmony export */   toPadded: () => (/* reexport safe */ _padded_js__WEBPACK_IMPORTED_MODULE_3__.fromExpanded),\n/* harmony export */   toWidth: () => (/* binding */ toWidth),\n/* harmony export */   tryFrom: () => (/* binding */ tryFrom)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../uint64.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\");\n/* harmony import */ var _padded_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./padded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/padded.js\");\n/* harmony import */ var _unpadded_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./unpadded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/unpadded.js\");\n\n\n\n\n\n/**\n * Validates that given `size` is a valid {@link API.PieceSize} that is a\n * power of 2. Returns {@link API.Result} with `PaddedPieceSize` ok case and an\n * Error in the error case.\n *\n * @see https://github.com/filecoin-project/go-state-types/blob/ff2ed169ff566458f2acd8b135d62e8ca27e7d0c/abi/piece.go#L18-L29\n *\n * @param {number|API.uint64} input\n * @returns {API.Result<API.PieceSize, RangeError>}\n */ const tryFrom = (input)=>{\n    const size = BigInt(input);\n    if (size < _constant_js__WEBPACK_IMPORTED_MODULE_1__.EXPANDED_BYTES_PER_QUAD) {\n        return {\n            error: RangeError(`Minimum piece size is ${_constant_js__WEBPACK_IMPORTED_MODULE_1__.EXPANDED_BYTES_PER_QUAD} bytes`)\n        };\n    }\n    if ((0,_uint64_js__WEBPACK_IMPORTED_MODULE_2__.onesCount64)(size) !== 1) {\n        return {\n            error: RangeError(\"Piece size must be a power of 2\")\n        };\n    }\n    return {\n        ok: size\n    };\n};\n/**\n * Validates that given `size` is a valid {@link API.PieceSize} and\n * returns {@link API.PieceSize} capturing the validation at the type\n * level. If given `size` is not a valid `PaddedPieceSize` throws an error.\n *\n * This function is a variation on {@link validate} that throws exceptions\n * instead of returning a {@link API.Result}.\n *\n * @param {number|API.uint64} size\n */ const from = (size)=>{\n    const result = tryFrom(size);\n    if (result.error) {\n        throw result.error;\n    } else {\n        return result.ok;\n    }\n};\n/**\n * Calculates the {@link API.PieceSize} for the given height of the piece tree.\n *\n * @param {number} height\n * @returns {API.PieceSize}\n */ const fromHeight = (height)=>fromWidth(2n ** BigInt(height));\n/**\n * Calculates the height of the piece tree from unpadded size.\n *\n * @param {API.PieceSize} size\n */ const toHeight = (size)=>(0,_uint64_js__WEBPACK_IMPORTED_MODULE_2__.log2Ceil)(toWidth(size));\n/**\n * Takes piece tree width (leaf count) and returns corresponding\n * {@link API.PieceSize}.\n *\n * @param {API.uint64} width\n * @returns {API.PieceSize}\n */ const fromWidth = (width)=>width * _constant_js__WEBPACK_IMPORTED_MODULE_1__.EXPANDED_BYTES_PER_NODE;\n/**\n * Takes `{@link API.PaddedPieceSize}` and returns corresponding\n * piece tree width (leaf count).\n *\n * @param {API.PieceSize} size\n */ const toWidth = (size)=>size / _constant_js__WEBPACK_IMPORTED_MODULE_1__.EXPANDED_BYTES_PER_NODE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9waWVjZS9zaXplL2V4cGFuZGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1DO0FBSVQ7QUFDNkI7QUFFeUI7QUFDdEI7QUFFMUQ7Ozs7Ozs7OztDQVNDLEdBQ00sTUFBTVUsVUFBVSxDQUFDQztJQUN0QixNQUFNQyxPQUFPQyxPQUFPRjtJQUNwQixJQUFJQyxPQUFPWCxpRUFBdUJBLEVBQUU7UUFDbEMsT0FBTztZQUNMYSxPQUFPQyxXQUNMLENBQUMsc0JBQXNCLEVBQUVkLGlFQUF1QkEsQ0FBQyxNQUFNLENBQUM7UUFFNUQ7SUFDRjtJQUVBLElBQUlHLHVEQUFXQSxDQUFDUSxVQUFVLEdBQUc7UUFDM0IsT0FBTztZQUFFRSxPQUFPQyxXQUFXO1FBQW1DO0lBQ2hFO0lBRUEsT0FBTztRQUFFQyxJQUFJSjtJQUFLO0FBQ3BCLEVBQUM7QUFFRDs7Ozs7Ozs7O0NBU0MsR0FDTSxNQUFNSyxPQUFPLENBQUNMO0lBQ25CLE1BQU1NLFNBQVNSLFFBQVFFO0lBQ3ZCLElBQUlNLE9BQU9KLEtBQUssRUFBRTtRQUNoQixNQUFNSSxPQUFPSixLQUFLO0lBQ3BCLE9BQU87UUFDTCxPQUFPSSxPQUFPRixFQUFFO0lBQ2xCO0FBQ0YsRUFBQztBQUVEOzs7OztDQUtDLEdBQ00sTUFBTUcsYUFBYSxDQUFDQyxTQUFXQyxVQUFVLEVBQUUsSUFBSVIsT0FBT08sU0FBUTtBQUVyRTs7OztDQUlDLEdBQ00sTUFBTUUsV0FBVyxDQUFDVixPQUFTVCxvREFBUUEsQ0FBQ29CLFFBQVFYLE9BQU07QUFFekQ7Ozs7OztDQU1DLEdBQ00sTUFBTVMsWUFBWSxDQUFDRyxRQUFVQSxRQUFRdEIsaUVBQXVCQSxDQUFBO0FBRW5FOzs7OztDQUtDLEdBQ00sTUFBTXFCLFVBQVUsQ0FBQ1gsT0FBU0EsT0FBT1YsaUVBQXVCQSxDQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9waWVjZS9zaXplL2V4cGFuZGVkLmpzPzA1ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVBJIGZyb20gJy4uLy4uL2FwaS5qcydcbmltcG9ydCB7XG4gIEVYUEFOREVEX0JZVEVTX1BFUl9RVUFELFxuICBFWFBBTkRFRF9CWVRFU19QRVJfTk9ERSxcbn0gZnJvbSAnLi4vLi4vY29uc3RhbnQuanMnXG5pbXBvcnQgeyBsb2cyQ2VpbCwgb25lc0NvdW50NjQgfSBmcm9tICcuLi8uLi91aW50NjQuanMnXG5cbmV4cG9ydCB7IHRvRXhwYW5kZWQgYXMgZnJvbVBhZGRlZCwgZnJvbUV4cGFuZGVkIGFzIHRvUGFkZGVkIH0gZnJvbSAnLi9wYWRkZWQuanMnXG5leHBvcnQgeyB0b0V4cGFuZGVkIGFzIGZyb21VbnBhZGRlZCB9IGZyb20gJy4vdW5wYWRkZWQuanMnXG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgZ2l2ZW4gYHNpemVgIGlzIGEgdmFsaWQge0BsaW5rIEFQSS5QaWVjZVNpemV9IHRoYXQgaXMgYVxuICogcG93ZXIgb2YgMi4gUmV0dXJucyB7QGxpbmsgQVBJLlJlc3VsdH0gd2l0aCBgUGFkZGVkUGllY2VTaXplYCBvayBjYXNlIGFuZCBhblxuICogRXJyb3IgaW4gdGhlIGVycm9yIGNhc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlsZWNvaW4tcHJvamVjdC9nby1zdGF0ZS10eXBlcy9ibG9iL2ZmMmVkMTY5ZmY1NjY0NThmMmFjZDhiMTM1ZDYyZThjYTI3ZTdkMGMvYWJpL3BpZWNlLmdvI0wxOC1MMjlcbiAqXG4gKiBAcGFyYW0ge251bWJlcnxBUEkudWludDY0fSBpbnB1dFxuICogQHJldHVybnMge0FQSS5SZXN1bHQ8QVBJLlBpZWNlU2l6ZSwgUmFuZ2VFcnJvcj59XG4gKi9cbmV4cG9ydCBjb25zdCB0cnlGcm9tID0gKGlucHV0KSA9PiB7XG4gIGNvbnN0IHNpemUgPSBCaWdJbnQoaW5wdXQpXG4gIGlmIChzaXplIDwgRVhQQU5ERURfQllURVNfUEVSX1FVQUQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IFJhbmdlRXJyb3IoXG4gICAgICAgIGBNaW5pbXVtIHBpZWNlIHNpemUgaXMgJHtFWFBBTkRFRF9CWVRFU19QRVJfUVVBRH0gYnl0ZXNgXG4gICAgICApLFxuICAgIH1cbiAgfVxuXG4gIGlmIChvbmVzQ291bnQ2NChzaXplKSAhPT0gMSkge1xuICAgIHJldHVybiB7IGVycm9yOiBSYW5nZUVycm9yKCdQaWVjZSBzaXplIG11c3QgYmUgYSBwb3dlciBvZiAyJykgfVxuICB9XG5cbiAgcmV0dXJuIHsgb2s6IHNpemUgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IGdpdmVuIGBzaXplYCBpcyBhIHZhbGlkIHtAbGluayBBUEkuUGllY2VTaXplfSBhbmRcbiAqIHJldHVybnMge0BsaW5rIEFQSS5QaWVjZVNpemV9IGNhcHR1cmluZyB0aGUgdmFsaWRhdGlvbiBhdCB0aGUgdHlwZVxuICogbGV2ZWwuIElmIGdpdmVuIGBzaXplYCBpcyBub3QgYSB2YWxpZCBgUGFkZGVkUGllY2VTaXplYCB0aHJvd3MgYW4gZXJyb3IuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHZhcmlhdGlvbiBvbiB7QGxpbmsgdmFsaWRhdGV9IHRoYXQgdGhyb3dzIGV4Y2VwdGlvbnNcbiAqIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEge0BsaW5rIEFQSS5SZXN1bHR9LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfEFQSS51aW50NjR9IHNpemVcbiAqL1xuZXhwb3J0IGNvbnN0IGZyb20gPSAoc2l6ZSkgPT4ge1xuICBjb25zdCByZXN1bHQgPSB0cnlGcm9tKHNpemUpXG4gIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICB0aHJvdyByZXN1bHQuZXJyb3JcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzdWx0Lm9rXG4gIH1cbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB7QGxpbmsgQVBJLlBpZWNlU2l6ZX0gZm9yIHRoZSBnaXZlbiBoZWlnaHQgb2YgdGhlIHBpZWNlIHRyZWUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICogQHJldHVybnMge0FQSS5QaWVjZVNpemV9XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tSGVpZ2h0ID0gKGhlaWdodCkgPT4gZnJvbVdpZHRoKDJuICoqIEJpZ0ludChoZWlnaHQpKVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGhlaWdodCBvZiB0aGUgcGllY2UgdHJlZSBmcm9tIHVucGFkZGVkIHNpemUuXG4gKlxuICogQHBhcmFtIHtBUEkuUGllY2VTaXplfSBzaXplXG4gKi9cbmV4cG9ydCBjb25zdCB0b0hlaWdodCA9IChzaXplKSA9PiBsb2cyQ2VpbCh0b1dpZHRoKHNpemUpKVxuXG4vKipcbiAqIFRha2VzIHBpZWNlIHRyZWUgd2lkdGggKGxlYWYgY291bnQpIGFuZCByZXR1cm5zIGNvcnJlc3BvbmRpbmdcbiAqIHtAbGluayBBUEkuUGllY2VTaXplfS5cbiAqXG4gKiBAcGFyYW0ge0FQSS51aW50NjR9IHdpZHRoXG4gKiBAcmV0dXJucyB7QVBJLlBpZWNlU2l6ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21XaWR0aCA9ICh3aWR0aCkgPT4gd2lkdGggKiBFWFBBTkRFRF9CWVRFU19QRVJfTk9ERVxuXG4vKipcbiAqIFRha2VzIGB7QGxpbmsgQVBJLlBhZGRlZFBpZWNlU2l6ZX1gIGFuZCByZXR1cm5zIGNvcnJlc3BvbmRpbmdcbiAqIHBpZWNlIHRyZWUgd2lkdGggKGxlYWYgY291bnQpLlxuICpcbiAqIEBwYXJhbSB7QVBJLlBpZWNlU2l6ZX0gc2l6ZVxuICovXG5leHBvcnQgY29uc3QgdG9XaWR0aCA9IChzaXplKSA9PiBzaXplIC8gRVhQQU5ERURfQllURVNfUEVSX05PREVcbiJdLCJuYW1lcyI6WyJBUEkiLCJFWFBBTkRFRF9CWVRFU19QRVJfUVVBRCIsIkVYUEFOREVEX0JZVEVTX1BFUl9OT0RFIiwibG9nMkNlaWwiLCJvbmVzQ291bnQ2NCIsInRvRXhwYW5kZWQiLCJmcm9tUGFkZGVkIiwiZnJvbUV4cGFuZGVkIiwidG9QYWRkZWQiLCJmcm9tVW5wYWRkZWQiLCJ0cnlGcm9tIiwiaW5wdXQiLCJzaXplIiwiQmlnSW50IiwiZXJyb3IiLCJSYW5nZUVycm9yIiwib2siLCJmcm9tIiwicmVzdWx0IiwiZnJvbUhlaWdodCIsImhlaWdodCIsImZyb21XaWR0aCIsInRvSGVpZ2h0IiwidG9XaWR0aCIsIndpZHRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/expanded.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/padded.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/piece/size/padded.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromExpanded: () => (/* binding */ fromExpanded),\n/* harmony export */   fromHeight: () => (/* binding */ fromHeight),\n/* harmony export */   fromWidth: () => (/* binding */ fromWidth),\n/* harmony export */   toExpanded: () => (/* binding */ toExpanded),\n/* harmony export */   toHeight: () => (/* binding */ toHeight),\n/* harmony export */   toWidth: () => (/* binding */ toWidth),\n/* harmony export */   tryFrom: () => (/* binding */ tryFrom)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../uint64.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n\n\n\n/**\n * Validates that given `size` is a valid {@link API.UnpaddedPieceSize} and\n * returns {@link API.UnpaddedPieceSize} capturing the validation at the type\n * level. If given `size` is not a valid `UnpaddedPieceSize` throws an error.\n *\n * This function is a variation on {@link validate} that throws exceptions\n * instead of returning a {@link API.Result}.\n *\n * @param {number|API.uint64} size\n * @returns {API.PaddedSize}\n */ const from = (size)=>{\n    const result = tryFrom(size);\n    if (result.error) {\n        throw result.error;\n    } else {\n        return result.ok;\n    }\n};\n/**\n * Validates that given `size` is a valid {@link API.UnpaddedPieceSize} that is\n * a power of 2 multiple of 127. Returns {@link API.Result} with\n * `UnpaddedPieceSize` ok case and an Error in the error case.\n *\n * @param {API.uint64|number} input\n * @returns {API.Result<API.PaddedSize, Error>}\n */ const tryFrom = (input)=>{\n    const size = BigInt(input);\n    if (size < _constant_js__WEBPACK_IMPORTED_MODULE_2__.PADDED_BYTES_PER_QUAD) {\n        return {\n            error: new RangeError(`Padded payload must contain at least ${_constant_js__WEBPACK_IMPORTED_MODULE_2__.PADDED_BYTES_PER_QUAD} bytes`)\n        };\n    }\n    if (size >> BigInt((0,_uint64_js__WEBPACK_IMPORTED_MODULE_1__.trailingZeros64)(size)) !== _constant_js__WEBPACK_IMPORTED_MODULE_2__.PADDED_BYTES_PER_QUAD) {\n        return {\n            error: new RangeError(`Padded payload size must be (2ⁿ * ${_constant_js__WEBPACK_IMPORTED_MODULE_2__.PADDED_BYTES_PER_QUAD})`)\n        };\n    }\n    return {\n        ok: size\n    };\n};\n/**\n * @param {API.PieceSize} size\n * @returns {API.PaddedSize}\n */ const fromExpanded = (size)=>fromQuads(size / _constant_js__WEBPACK_IMPORTED_MODULE_2__.EXPANDED_BYTES_PER_QUAD);\n/**\n * Takes `{@link API.PaddedPieceSize}` and returns corresponding\n * {@link API.PieceSize}.\n *\n * Please note that this function does not validate the input size and\n * relies that type-checker will ensure that user passes valid unpadded\n * piece size created with {@link from} or {@link validate} functions.\n *\n *\n * @see https://github.com/filecoin-project/go-state-types/blob/master/abi/piece.go#L14-L16\n *\n * @param {API.PaddedSize} size\n * @returns {API.PieceSize}\n */ const toExpanded = (size)=>toQauds(size) * _constant_js__WEBPACK_IMPORTED_MODULE_2__.EXPANDED_BYTES_PER_QUAD;\n/**\n * Calculates the padded size of the piece from the given tree height.\n *\n * @param {number} height\n * @returns {API.uint64}\n */ const fromHeight = (height)=>{\n    // We calculate number of quads tree by calculating number of nodes tree\n    // at second layer. This works because we deal with a binary tree so first\n    // layer nodes will contain 2 leaves and second layer nodes will contain 4\n    // leaves hence number of quads.\n    const quads = 2n ** BigInt(height - 2);\n    return quads * _constant_js__WEBPACK_IMPORTED_MODULE_2__.PADDED_BYTES_PER_QUAD;\n};\n/**\n * Calculates the height of the piece tree from unpadded size.\n *\n * @param {API.PaddedSize} size\n */ const toHeight = (size)=>(0,_uint64_js__WEBPACK_IMPORTED_MODULE_1__.log2Ceil)(toWidth(size));\n/**\n * Takes `{@link API.PaddedPieceSize}` and returns corresponding\n * piece tree width (leaf count).\n *\n * @param {API.PaddedSize} size\n */ const toWidth = (size)=>toQauds(size) * _constant_js__WEBPACK_IMPORTED_MODULE_2__.LEAFS_PER_QUAD;\n/**\n *\n * @param {API.uint64} width\n * @returns {API.PaddedSize}\n */ const fromWidth = (width)=>fromQuads(width / _constant_js__WEBPACK_IMPORTED_MODULE_2__.LEAFS_PER_QUAD);\n/**\n * @param {API.PaddedSize} size\n */ const toQauds = (size)=>size / _constant_js__WEBPACK_IMPORTED_MODULE_2__.PADDED_BYTES_PER_QUAD;\n/**\n *\n * @param {API.uint64} count\n * @returns {API.PaddedSize}\n */ const fromQuads = (count)=>count * _constant_js__WEBPACK_IMPORTED_MODULE_2__.PADDED_BYTES_PER_QUAD;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9waWVjZS9zaXplL3BhZGRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFtQztBQUN3QjtBQUtqQztBQUUxQjs7Ozs7Ozs7OztDQVVDLEdBQ00sTUFBTU0sT0FBTyxDQUFDQztJQUNuQixNQUFNQyxTQUFTQyxRQUFRRjtJQUN2QixJQUFJQyxPQUFPRSxLQUFLLEVBQUU7UUFDaEIsTUFBTUYsT0FBT0UsS0FBSztJQUNwQixPQUFPO1FBQ0wsT0FBT0YsT0FBT0csRUFBRTtJQUNsQjtBQUNGLEVBQUM7QUFFRDs7Ozs7OztDQU9DLEdBQ00sTUFBTUYsVUFBVSxDQUFDRztJQUN0QixNQUFNTCxPQUFPTSxPQUFPRDtJQUNwQixJQUFJTCxPQUFPSiwrREFBcUJBLEVBQUU7UUFDaEMsT0FBTztZQUNMTyxPQUFPLElBQUlJLFdBQ1QsQ0FBQyxxQ0FBcUMsRUFBRVgsK0RBQXFCQSxDQUFDLE1BQU0sQ0FBQztRQUV6RTtJQUNGO0lBRUEsSUFBSUksUUFBUU0sT0FBT1gsMkRBQWVBLENBQUNLLFdBQVdKLCtEQUFxQkEsRUFBRTtRQUNuRSxPQUFPO1lBQ0xPLE9BQU8sSUFBSUksV0FDVCxDQUFDLGtDQUFrQyxFQUFFWCwrREFBcUJBLENBQUMsQ0FBQyxDQUFDO1FBRWpFO0lBQ0Y7SUFFQSxPQUFPO1FBQUVRLElBQUlKO0lBQUs7QUFDcEIsRUFBQztBQUVEOzs7Q0FHQyxHQUNNLE1BQU1RLGVBQWUsQ0FBQ1IsT0FBU1MsVUFBVVQsT0FBT0gsaUVBQXVCQSxFQUFDO0FBRS9FOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDTSxNQUFNYSxhQUFhLENBQUNWLE9BQVNXLFFBQVFYLFFBQVFILGlFQUF1QkEsQ0FBQTtBQUUzRTs7Ozs7Q0FLQyxHQUNNLE1BQU1lLGFBQWEsQ0FBQ0M7SUFDekIsd0VBQXdFO0lBQ3hFLDBFQUEwRTtJQUMxRSwwRUFBMEU7SUFDMUUsZ0NBQWdDO0lBQ2hDLE1BQU1DLFFBQVEsRUFBRSxJQUFJUixPQUFPTyxTQUFTO0lBQ3BDLE9BQU9DLFFBQVFsQiwrREFBcUJBO0FBQ3RDLEVBQUM7QUFFRDs7OztDQUlDLEdBQ00sTUFBTW1CLFdBQVcsQ0FBQ2YsT0FBU04sb0RBQVFBLENBQUNzQixRQUFRaEIsT0FBTTtBQUV6RDs7Ozs7Q0FLQyxHQUNNLE1BQU1nQixVQUFVLENBQUNoQixPQUFTVyxRQUFRWCxRQUFRRix3REFBY0EsQ0FBQTtBQUUvRDs7OztDQUlDLEdBQ00sTUFBTW1CLFlBQVksQ0FBQ0MsUUFBVVQsVUFBVVMsUUFBUXBCLHdEQUFjQSxFQUFDO0FBRXJFOztDQUVDLEdBQ0QsTUFBTWEsVUFBVSxDQUFDWCxPQUFTQSxPQUFPSiwrREFBcUJBO0FBRXREOzs7O0NBSUMsR0FDRCxNQUFNYSxZQUFZLENBQUNVLFFBQVVBLFFBQVF2QiwrREFBcUJBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9waWVjZS9zaXplL3BhZGRlZC5qcz81NmYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFQSSBmcm9tICcuLi8uLi9hcGkuanMnXG5pbXBvcnQgeyBsb2cyQ2VpbCwgdHJhaWxpbmdaZXJvczY0IH0gZnJvbSAnLi4vLi4vdWludDY0LmpzJ1xuaW1wb3J0IHtcbiAgUEFEREVEX0JZVEVTX1BFUl9RVUFELFxuICBFWFBBTkRFRF9CWVRFU19QRVJfUVVBRCxcbiAgTEVBRlNfUEVSX1FVQUQsXG59IGZyb20gJy4uLy4uL2NvbnN0YW50LmpzJ1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IGdpdmVuIGBzaXplYCBpcyBhIHZhbGlkIHtAbGluayBBUEkuVW5wYWRkZWRQaWVjZVNpemV9IGFuZFxuICogcmV0dXJucyB7QGxpbmsgQVBJLlVucGFkZGVkUGllY2VTaXplfSBjYXB0dXJpbmcgdGhlIHZhbGlkYXRpb24gYXQgdGhlIHR5cGVcbiAqIGxldmVsLiBJZiBnaXZlbiBgc2l6ZWAgaXMgbm90IGEgdmFsaWQgYFVucGFkZGVkUGllY2VTaXplYCB0aHJvd3MgYW4gZXJyb3IuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHZhcmlhdGlvbiBvbiB7QGxpbmsgdmFsaWRhdGV9IHRoYXQgdGhyb3dzIGV4Y2VwdGlvbnNcbiAqIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEge0BsaW5rIEFQSS5SZXN1bHR9LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfEFQSS51aW50NjR9IHNpemVcbiAqIEByZXR1cm5zIHtBUEkuUGFkZGVkU2l6ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb20gPSAoc2l6ZSkgPT4ge1xuICBjb25zdCByZXN1bHQgPSB0cnlGcm9tKHNpemUpXG4gIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICB0aHJvdyByZXN1bHQuZXJyb3JcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzdWx0Lm9rXG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBnaXZlbiBgc2l6ZWAgaXMgYSB2YWxpZCB7QGxpbmsgQVBJLlVucGFkZGVkUGllY2VTaXplfSB0aGF0IGlzXG4gKiBhIHBvd2VyIG9mIDIgbXVsdGlwbGUgb2YgMTI3LiBSZXR1cm5zIHtAbGluayBBUEkuUmVzdWx0fSB3aXRoXG4gKiBgVW5wYWRkZWRQaWVjZVNpemVgIG9rIGNhc2UgYW5kIGFuIEVycm9yIGluIHRoZSBlcnJvciBjYXNlLlxuICpcbiAqIEBwYXJhbSB7QVBJLnVpbnQ2NHxudW1iZXJ9IGlucHV0XG4gKiBAcmV0dXJucyB7QVBJLlJlc3VsdDxBUEkuUGFkZGVkU2l6ZSwgRXJyb3I+fVxuICovXG5leHBvcnQgY29uc3QgdHJ5RnJvbSA9IChpbnB1dCkgPT4ge1xuICBjb25zdCBzaXplID0gQmlnSW50KGlucHV0KVxuICBpZiAoc2l6ZSA8IFBBRERFRF9CWVRFU19QRVJfUVVBRCkge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgIGBQYWRkZWQgcGF5bG9hZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgJHtQQURERURfQllURVNfUEVSX1FVQUR9IGJ5dGVzYFxuICAgICAgKSxcbiAgICB9XG4gIH1cblxuICBpZiAoc2l6ZSA+PiBCaWdJbnQodHJhaWxpbmdaZXJvczY0KHNpemUpKSAhPT0gUEFEREVEX0JZVEVTX1BFUl9RVUFEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgYFBhZGRlZCBwYXlsb2FkIHNpemUgbXVzdCBiZSAoMuKBvyAqICR7UEFEREVEX0JZVEVTX1BFUl9RVUFEfSlgXG4gICAgICApLFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IG9rOiBzaXplIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FQSS5QaWVjZVNpemV9IHNpemVcbiAqIEByZXR1cm5zIHtBUEkuUGFkZGVkU2l6ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21FeHBhbmRlZCA9IChzaXplKSA9PiBmcm9tUXVhZHMoc2l6ZSAvIEVYUEFOREVEX0JZVEVTX1BFUl9RVUFEKVxuXG4vKipcbiAqIFRha2VzIGB7QGxpbmsgQVBJLlBhZGRlZFBpZWNlU2l6ZX1gIGFuZCByZXR1cm5zIGNvcnJlc3BvbmRpbmdcbiAqIHtAbGluayBBUEkuUGllY2VTaXplfS5cbiAqXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdmFsaWRhdGUgdGhlIGlucHV0IHNpemUgYW5kXG4gKiByZWxpZXMgdGhhdCB0eXBlLWNoZWNrZXIgd2lsbCBlbnN1cmUgdGhhdCB1c2VyIHBhc3NlcyB2YWxpZCB1bnBhZGRlZFxuICogcGllY2Ugc2l6ZSBjcmVhdGVkIHdpdGgge0BsaW5rIGZyb219IG9yIHtAbGluayB2YWxpZGF0ZX0gZnVuY3Rpb25zLlxuICpcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maWxlY29pbi1wcm9qZWN0L2dvLXN0YXRlLXR5cGVzL2Jsb2IvbWFzdGVyL2FiaS9waWVjZS5nbyNMMTQtTDE2XG4gKlxuICogQHBhcmFtIHtBUEkuUGFkZGVkU2l6ZX0gc2l6ZVxuICogQHJldHVybnMge0FQSS5QaWVjZVNpemV9XG4gKi9cbmV4cG9ydCBjb25zdCB0b0V4cGFuZGVkID0gKHNpemUpID0+IHRvUWF1ZHMoc2l6ZSkgKiBFWFBBTkRFRF9CWVRFU19QRVJfUVVBRFxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHBhZGRlZCBzaXplIG9mIHRoZSBwaWVjZSBmcm9tIHRoZSBnaXZlbiB0cmVlIGhlaWdodC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gKiBAcmV0dXJucyB7QVBJLnVpbnQ2NH1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21IZWlnaHQgPSAoaGVpZ2h0KSA9PiB7XG4gIC8vIFdlIGNhbGN1bGF0ZSBudW1iZXIgb2YgcXVhZHMgdHJlZSBieSBjYWxjdWxhdGluZyBudW1iZXIgb2Ygbm9kZXMgdHJlZVxuICAvLyBhdCBzZWNvbmQgbGF5ZXIuIFRoaXMgd29ya3MgYmVjYXVzZSB3ZSBkZWFsIHdpdGggYSBiaW5hcnkgdHJlZSBzbyBmaXJzdFxuICAvLyBsYXllciBub2RlcyB3aWxsIGNvbnRhaW4gMiBsZWF2ZXMgYW5kIHNlY29uZCBsYXllciBub2RlcyB3aWxsIGNvbnRhaW4gNFxuICAvLyBsZWF2ZXMgaGVuY2UgbnVtYmVyIG9mIHF1YWRzLlxuICBjb25zdCBxdWFkcyA9IDJuICoqIEJpZ0ludChoZWlnaHQgLSAyKVxuICByZXR1cm4gcXVhZHMgKiBQQURERURfQllURVNfUEVSX1FVQURcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBoZWlnaHQgb2YgdGhlIHBpZWNlIHRyZWUgZnJvbSB1bnBhZGRlZCBzaXplLlxuICpcbiAqIEBwYXJhbSB7QVBJLlBhZGRlZFNpemV9IHNpemVcbiAqL1xuZXhwb3J0IGNvbnN0IHRvSGVpZ2h0ID0gKHNpemUpID0+IGxvZzJDZWlsKHRvV2lkdGgoc2l6ZSkpXG5cbi8qKlxuICogVGFrZXMgYHtAbGluayBBUEkuUGFkZGVkUGllY2VTaXplfWAgYW5kIHJldHVybnMgY29ycmVzcG9uZGluZ1xuICogcGllY2UgdHJlZSB3aWR0aCAobGVhZiBjb3VudCkuXG4gKlxuICogQHBhcmFtIHtBUEkuUGFkZGVkU2l6ZX0gc2l6ZVxuICovXG5leHBvcnQgY29uc3QgdG9XaWR0aCA9IChzaXplKSA9PiB0b1FhdWRzKHNpemUpICogTEVBRlNfUEVSX1FVQURcblxuLyoqXG4gKlxuICogQHBhcmFtIHtBUEkudWludDY0fSB3aWR0aFxuICogQHJldHVybnMge0FQSS5QYWRkZWRTaXplfVxuICovXG5leHBvcnQgY29uc3QgZnJvbVdpZHRoID0gKHdpZHRoKSA9PiBmcm9tUXVhZHMod2lkdGggLyBMRUFGU19QRVJfUVVBRClcblxuLyoqXG4gKiBAcGFyYW0ge0FQSS5QYWRkZWRTaXplfSBzaXplXG4gKi9cbmNvbnN0IHRvUWF1ZHMgPSAoc2l6ZSkgPT4gc2l6ZSAvIFBBRERFRF9CWVRFU19QRVJfUVVBRFxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0FQSS51aW50NjR9IGNvdW50XG4gKiBAcmV0dXJucyB7QVBJLlBhZGRlZFNpemV9XG4gKi9cbmNvbnN0IGZyb21RdWFkcyA9IChjb3VudCkgPT4gY291bnQgKiBQQURERURfQllURVNfUEVSX1FVQURcbiJdLCJuYW1lcyI6WyJBUEkiLCJsb2cyQ2VpbCIsInRyYWlsaW5nWmVyb3M2NCIsIlBBRERFRF9CWVRFU19QRVJfUVVBRCIsIkVYUEFOREVEX0JZVEVTX1BFUl9RVUFEIiwiTEVBRlNfUEVSX1FVQUQiLCJmcm9tIiwic2l6ZSIsInJlc3VsdCIsInRyeUZyb20iLCJlcnJvciIsIm9rIiwiaW5wdXQiLCJCaWdJbnQiLCJSYW5nZUVycm9yIiwiZnJvbUV4cGFuZGVkIiwiZnJvbVF1YWRzIiwidG9FeHBhbmRlZCIsInRvUWF1ZHMiLCJmcm9tSGVpZ2h0IiwiaGVpZ2h0IiwicXVhZHMiLCJ0b0hlaWdodCIsInRvV2lkdGgiLCJmcm9tV2lkdGgiLCJ3aWR0aCIsImNvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/padded.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/unpadded.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/piece/size/unpadded.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromPiece: () => (/* binding */ fromPiece),\n/* harmony export */   toExpanded: () => (/* binding */ toExpanded),\n/* harmony export */   toHeight: () => (/* binding */ toHeight),\n/* harmony export */   toPadded: () => (/* binding */ toPadded),\n/* harmony export */   toPadding: () => (/* binding */ toPadding),\n/* harmony export */   toWidth: () => (/* binding */ toWidth)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constant.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/constant.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../uint64.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\");\n/* harmony import */ var _padded_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./padded.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/padded.js\");\n\n\n\n\n/**\n * Takes the {@link API.Piece} sizing details (height and padding) and\n * calculates original payload size.\n *\n * @param {object} piece\n * @param {number} piece.height\n * @param {API.uint64} piece.padding\n */ const fromPiece = ({ height, padding })=>_padded_js__WEBPACK_IMPORTED_MODULE_3__.fromHeight(height) - padding;\n/**\n * Takes arbitrary payload size and calculates 0-padding required to\n * produce a {@link API.PaddedSize}.\n *\n * @param {API.uint64} size\n */ const toPadding = (size)=>toPadded(size) - size;\n/**\n * Takes arbitrary payload size and calculates size after required 0-padding.\n *\n * @param {API.uint64} size\n * @returns {API.PaddedSize}\n */ const toPadded = (size)=>toQauds(size) * _constant_js__WEBPACK_IMPORTED_MODULE_1__.PADDED_BYTES_PER_QUAD;\n/**\n * Takes arbitrary payload size and calculates the piece size after required\n * 0-padding and FR32 expansion is applied.\n *\n * @param {API.uint64} size\n * @returns {API.PieceSize}\n */ const toExpanded = (size)=>toQauds(size) * _constant_js__WEBPACK_IMPORTED_MODULE_1__.EXPANDED_BYTES_PER_QUAD;\n/**\n * Takes arbitrary payload size and calculates width of the piece tree (leaf\n * count) that will be required to represent it.\n *\n * @param {API.uint64} size\n */ const toWidth = (size)=>toQauds(size) * _constant_js__WEBPACK_IMPORTED_MODULE_1__.LEAFS_PER_QUAD;\n/**\n * Takes arbitrary payload size and calculates height of the piece tree that will be required to represent it.\n *\n * @param {API.uint64} size\n */ const toHeight = (size)=>(0,_uint64_js__WEBPACK_IMPORTED_MODULE_2__.log2Ceil)(toWidth(size));\n/**\n * Takes arbitrary payload size and calculates number of quads that will be\n * required to represent it.\n *\n * @param {API.uint64} size\n */ const toQauds = (size)=>{\n    // Number of quads required to fit given payload size.\n    // Since bigint division truncates we add another quads shy of 1 number of\n    // bytes to round up.\n    const quadCount = (size + _constant_js__WEBPACK_IMPORTED_MODULE_1__.PADDED_BYTES_PER_QUAD - 1n) / _constant_js__WEBPACK_IMPORTED_MODULE_1__.PADDED_BYTES_PER_QUAD;\n    // Next we we log2 then pow2 with some rounding to ensure that result\n    // is 2 ^ n.\n    return 2n ** BigInt((0,_uint64_js__WEBPACK_IMPORTED_MODULE_2__.log2Ceil)(quadCount));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9waWVjZS9zaXplL3VucGFkZGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBbUM7QUFLVDtBQUNnQjtBQUNMO0FBRXJDOzs7Ozs7O0NBT0MsR0FDTSxNQUFNTSxZQUFZLENBQUMsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FDM0NILGtEQUFpQixDQUFDRSxVQUFVQyxRQUFPO0FBRXJDOzs7OztDQUtDLEdBQ00sTUFBTUUsWUFBWSxDQUFDQyxPQUFTQyxTQUFTRCxRQUFRQSxLQUFJO0FBRXhEOzs7OztDQUtDLEdBQ00sTUFBTUMsV0FBVyxDQUFDRCxPQUFTRSxRQUFRRixRQUFRViwrREFBcUJBLENBQUE7QUFFdkU7Ozs7OztDQU1DLEdBQ00sTUFBTWEsYUFBYSxDQUFDSCxPQUFTRSxRQUFRRixRQUFRVCxpRUFBdUJBLENBQUE7QUFFM0U7Ozs7O0NBS0MsR0FDTSxNQUFNYSxVQUFVLENBQUNKLE9BQVNFLFFBQVFGLFFBQVFSLHdEQUFjQSxDQUFBO0FBRS9EOzs7O0NBSUMsR0FDTSxNQUFNYSxXQUFXLENBQUNMLE9BQVNQLG9EQUFRQSxDQUFDVyxRQUFRSixPQUFNO0FBRXpEOzs7OztDQUtDLEdBQ0QsTUFBTUUsVUFBVSxDQUFDRjtJQUNmLHNEQUFzRDtJQUN0RCwwRUFBMEU7SUFDMUUscUJBQXFCO0lBQ3JCLE1BQU1NLFlBQVksQ0FBQ04sT0FBT1YsK0RBQXFCQSxHQUFHLEVBQUUsSUFBSUEsK0RBQXFCQTtJQUM3RSxxRUFBcUU7SUFDckUsWUFBWTtJQUNaLE9BQU8sRUFBRSxJQUFJaUIsT0FBT2Qsb0RBQVFBLENBQUNhO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9waWVjZS9zaXplL3VucGFkZGVkLmpzP2NkZmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVBJIGZyb20gJy4uLy4uL2FwaS5qcydcbmltcG9ydCB7XG4gIFBBRERFRF9CWVRFU19QRVJfUVVBRCxcbiAgRVhQQU5ERURfQllURVNfUEVSX1FVQUQsXG4gIExFQUZTX1BFUl9RVUFELFxufSBmcm9tICcuLi8uLi9jb25zdGFudC5qcydcbmltcG9ydCB7IGxvZzJDZWlsIH0gZnJvbSAnLi4vLi4vdWludDY0LmpzJ1xuaW1wb3J0ICogYXMgUGFkZGVkIGZyb20gJy4vcGFkZGVkLmpzJ1xuXG4vKipcbiAqIFRha2VzIHRoZSB7QGxpbmsgQVBJLlBpZWNlfSBzaXppbmcgZGV0YWlscyAoaGVpZ2h0IGFuZCBwYWRkaW5nKSBhbmRcbiAqIGNhbGN1bGF0ZXMgb3JpZ2luYWwgcGF5bG9hZCBzaXplLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwaWVjZVxuICogQHBhcmFtIHtudW1iZXJ9IHBpZWNlLmhlaWdodFxuICogQHBhcmFtIHtBUEkudWludDY0fSBwaWVjZS5wYWRkaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tUGllY2UgPSAoeyBoZWlnaHQsIHBhZGRpbmcgfSkgPT5cbiAgUGFkZGVkLmZyb21IZWlnaHQoaGVpZ2h0KSAtIHBhZGRpbmdcblxuLyoqXG4gKiBUYWtlcyBhcmJpdHJhcnkgcGF5bG9hZCBzaXplIGFuZCBjYWxjdWxhdGVzIDAtcGFkZGluZyByZXF1aXJlZCB0b1xuICogcHJvZHVjZSBhIHtAbGluayBBUEkuUGFkZGVkU2l6ZX0uXG4gKlxuICogQHBhcmFtIHtBUEkudWludDY0fSBzaXplXG4gKi9cbmV4cG9ydCBjb25zdCB0b1BhZGRpbmcgPSAoc2l6ZSkgPT4gdG9QYWRkZWQoc2l6ZSkgLSBzaXplXG5cbi8qKlxuICogVGFrZXMgYXJiaXRyYXJ5IHBheWxvYWQgc2l6ZSBhbmQgY2FsY3VsYXRlcyBzaXplIGFmdGVyIHJlcXVpcmVkIDAtcGFkZGluZy5cbiAqXG4gKiBAcGFyYW0ge0FQSS51aW50NjR9IHNpemVcbiAqIEByZXR1cm5zIHtBUEkuUGFkZGVkU2l6ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRvUGFkZGVkID0gKHNpemUpID0+IHRvUWF1ZHMoc2l6ZSkgKiBQQURERURfQllURVNfUEVSX1FVQURcblxuLyoqXG4gKiBUYWtlcyBhcmJpdHJhcnkgcGF5bG9hZCBzaXplIGFuZCBjYWxjdWxhdGVzIHRoZSBwaWVjZSBzaXplIGFmdGVyIHJlcXVpcmVkXG4gKiAwLXBhZGRpbmcgYW5kIEZSMzIgZXhwYW5zaW9uIGlzIGFwcGxpZWQuXG4gKlxuICogQHBhcmFtIHtBUEkudWludDY0fSBzaXplXG4gKiBAcmV0dXJucyB7QVBJLlBpZWNlU2l6ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRvRXhwYW5kZWQgPSAoc2l6ZSkgPT4gdG9RYXVkcyhzaXplKSAqIEVYUEFOREVEX0JZVEVTX1BFUl9RVUFEXG5cbi8qKlxuICogVGFrZXMgYXJiaXRyYXJ5IHBheWxvYWQgc2l6ZSBhbmQgY2FsY3VsYXRlcyB3aWR0aCBvZiB0aGUgcGllY2UgdHJlZSAobGVhZlxuICogY291bnQpIHRoYXQgd2lsbCBiZSByZXF1aXJlZCB0byByZXByZXNlbnQgaXQuXG4gKlxuICogQHBhcmFtIHtBUEkudWludDY0fSBzaXplXG4gKi9cbmV4cG9ydCBjb25zdCB0b1dpZHRoID0gKHNpemUpID0+IHRvUWF1ZHMoc2l6ZSkgKiBMRUFGU19QRVJfUVVBRFxuXG4vKipcbiAqIFRha2VzIGFyYml0cmFyeSBwYXlsb2FkIHNpemUgYW5kIGNhbGN1bGF0ZXMgaGVpZ2h0IG9mIHRoZSBwaWVjZSB0cmVlIHRoYXQgd2lsbCBiZSByZXF1aXJlZCB0byByZXByZXNlbnQgaXQuXG4gKlxuICogQHBhcmFtIHtBUEkudWludDY0fSBzaXplXG4gKi9cbmV4cG9ydCBjb25zdCB0b0hlaWdodCA9IChzaXplKSA9PiBsb2cyQ2VpbCh0b1dpZHRoKHNpemUpKVxuXG4vKipcbiAqIFRha2VzIGFyYml0cmFyeSBwYXlsb2FkIHNpemUgYW5kIGNhbGN1bGF0ZXMgbnVtYmVyIG9mIHF1YWRzIHRoYXQgd2lsbCBiZVxuICogcmVxdWlyZWQgdG8gcmVwcmVzZW50IGl0LlxuICpcbiAqIEBwYXJhbSB7QVBJLnVpbnQ2NH0gc2l6ZVxuICovXG5jb25zdCB0b1FhdWRzID0gKHNpemUpID0+IHtcbiAgLy8gTnVtYmVyIG9mIHF1YWRzIHJlcXVpcmVkIHRvIGZpdCBnaXZlbiBwYXlsb2FkIHNpemUuXG4gIC8vIFNpbmNlIGJpZ2ludCBkaXZpc2lvbiB0cnVuY2F0ZXMgd2UgYWRkIGFub3RoZXIgcXVhZHMgc2h5IG9mIDEgbnVtYmVyIG9mXG4gIC8vIGJ5dGVzIHRvIHJvdW5kIHVwLlxuICBjb25zdCBxdWFkQ291bnQgPSAoc2l6ZSArIFBBRERFRF9CWVRFU19QRVJfUVVBRCAtIDFuKSAvIFBBRERFRF9CWVRFU19QRVJfUVVBRFxuICAvLyBOZXh0IHdlIHdlIGxvZzIgdGhlbiBwb3cyIHdpdGggc29tZSByb3VuZGluZyB0byBlbnN1cmUgdGhhdCByZXN1bHRcbiAgLy8gaXMgMiBeIG4uXG4gIHJldHVybiAybiAqKiBCaWdJbnQobG9nMkNlaWwocXVhZENvdW50KSlcbn1cbiJdLCJuYW1lcyI6WyJBUEkiLCJQQURERURfQllURVNfUEVSX1FVQUQiLCJFWFBBTkRFRF9CWVRFU19QRVJfUVVBRCIsIkxFQUZTX1BFUl9RVUFEIiwibG9nMkNlaWwiLCJQYWRkZWQiLCJmcm9tUGllY2UiLCJoZWlnaHQiLCJwYWRkaW5nIiwiZnJvbUhlaWdodCIsInRvUGFkZGluZyIsInNpemUiLCJ0b1BhZGRlZCIsInRvUWF1ZHMiLCJ0b0V4cGFuZGVkIiwidG9XaWR0aCIsInRvSGVpZ2h0IiwicXVhZENvdW50IiwiQmlnSW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/piece/size/unpadded.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/piece/tree.js":
/*!********************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/piece/tree.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_LEAF_COUNT: () => (/* binding */ MAX_LEAF_COUNT),\n/* harmony export */   allocate: () => (/* binding */ allocate),\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   computeNode: () => (/* reexport safe */ _proof_js__WEBPACK_IMPORTED_MODULE_2__.computeNode),\n/* harmony export */   fromChunks: () => (/* binding */ fromChunks),\n/* harmony export */   fromLeafs: () => (/* binding */ fromLeafs),\n/* harmony export */   padLeafs: () => (/* binding */ padLeafs),\n/* harmony export */   root: () => (/* binding */ root),\n/* harmony export */   split: () => (/* binding */ split)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _proof_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../proof.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js\");\n\n\n\n\n// The value is an unsigned, 32-bit integer that is always numerically greater\n// than the highest index in the array. This means our tree can represent a\n// piece up to 128 GiB in size.\nconst MAX_LEAF_COUNT = 2 ** 32 - 1;\n/**\n * Allocates a tree for a given amount of leafs.\n *\n * The construction rounds the amount of leafs up to the nearest two-power with\n * zeroed nodes to ensure that the tree is perfect and hence all internal node's\n * have well-defined children.\n *\n * @param {number} leafs\n */ function allocate(leafs) {\n    const adjustedLeafs = 2 ** Math.ceil(Math.log2(leafs));\n    if (adjustedLeafs > MAX_LEAF_COUNT) {\n        throw new RangeError(`too many leafs ${adjustedLeafs} exceeds ${MAX_LEAF_COUNT} limit`);\n    }\n    const height = Math.ceil(Math.log2(adjustedLeafs));\n    const nodes = new Array(height + 1);\n    for (const level of nodes.keys()){\n        nodes[level] = new Array(1 << level);\n    }\n    return new PieceTree({\n        nodes,\n        height\n    });\n}\n/**\n * @param {API.TreeData} tree\n */ const depth = (tree)=>{\n    return tree.nodes.length;\n};\n/**\n *\n * @param {API.TreeData} tree\n * @returns {API.MerkleTreeNode}\n */ const root = (tree)=>{\n    return tree.nodes[0][0];\n};\n/**\n * @param {Uint8Array} source\n * @returns {API.MerkleTreeNode[]}\n */ const split = (source)=>{\n    const count = source.length / _node_js__WEBPACK_IMPORTED_MODULE_1__.Size;\n    const chunks = new Array(count);\n    for(let n = 0; n < count; n++){\n        const offset = n * _node_js__WEBPACK_IMPORTED_MODULE_1__.Size;\n        const chunk = source.subarray(offset, offset + _node_js__WEBPACK_IMPORTED_MODULE_1__.Size);\n        chunks[n] = chunk;\n    }\n    return chunks;\n};\n/**\n * @param {API.Fr23Padded} source\n */ const build = (source)=>fromChunks(split(source));\n/**\n * @param {API.MerkleTreeNode[]} chunks\n */ const fromChunks = (chunks)=>{\n    if (chunks.length === 0) {\n        throw new RangeError(\"Empty source\");\n    }\n    const leafs = chunks //await Promise.all(chunks.map(truncatedHash))\n    ;\n    return fromLeafs(leafs);\n};\n/**\n * @param {API.MerkleTreeNode[]} leafs\n * @returns {API.PieceTree}\n */ const fromLeafs = (leafs)=>{\n    const tree = allocate(leafs.length);\n    // Set the padded leaf nodes\n    tree.nodes[depth(tree) - 1] = padLeafs(leafs);\n    let parentNodes = tree.nodes[depth(tree) - 1];\n    // Construct the Merkle tree bottom-up, starting from the leafs\n    // Note the -1 due to 0-indexing the root level\n    for(let level = depth(tree) - 2; level >= 0; level--){\n        /** @type {API.MerkleTreeNode[]} */ const currentLevel = new Array(Math.ceil(parentNodes.length / 2));\n        // Traverse the level left to right\n        for(let i = 0; i + 1 < parentNodes.length; i = i + 2){\n            currentLevel[Math.floor(i / 2)] = _proof_js__WEBPACK_IMPORTED_MODULE_2__.computeNode(parentNodes[i], parentNodes[i + 1]);\n        }\n        tree.nodes[level] = currentLevel;\n        parentNodes = currentLevel;\n    }\n    return new PieceTree(tree);\n};\n/**\n * @param {API.MerkleTreeNode[]} leafs\n * @returns {API.MerkleTreeNode[]}\n */ const padLeafs = (leafs)=>{\n    const paddingAmount = (1 << Math.ceil(Math.log2(leafs.length))) - leafs.length;\n    // arrays are zeroed by default in JS\n    const paddingLeafs = new Array(paddingAmount);\n    return [\n        ...leafs,\n        ...paddingLeafs\n    ];\n};\n/**\n * @implements {API.PieceTree}\n */ class PieceTree {\n    /**\n   * @param {object} data\n   * @param {API.MerkleTreeNode[][]} data.nodes\n   * @param {number} data.height\n   */ constructor({ nodes, height }){\n        this.nodes = nodes;\n        this.height = height;\n    }\n    get root() {\n        return root(this);\n    }\n    get leafs() {\n        const { nodes } = this;\n        return nodes[nodes.length - 1];\n    }\n    get leafCount() {\n        return 2 ** this.height;\n    }\n    /**\n   *\n   * @param {number} level\n   * @param {number} index\n   */ node(level, index) {\n        const { nodes } = this;\n        return nodes[level][index];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/piece/tree.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js":
/*!***************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/proof.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeNode: () => (/* binding */ computeNode),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   depth: () => (/* binding */ depth),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   offset: () => (/* binding */ offset),\n/* harmony export */   path: () => (/* binding */ path),\n/* harmony export */   resolveRoot: () => (/* binding */ resolveRoot),\n/* harmony export */   truncate: () => (/* binding */ truncate),\n/* harmony export */   truncatedHash: () => (/* binding */ truncatedHash),\n/* harmony export */   validateLevelIndex: () => (/* binding */ validateLevelIndex),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var multiformats_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/bytes */ \"(rsc)/../node_modules/multiformats/dist/src/bytes.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _ipld_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ipld.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/ipld.js\");\n\n\n\n\n/**\n * @param {API.ProofData} proof\n * @returns {API.MerkleTreePath}\n */ const path = ([, path])=>path;\n/**\n * @param {API.ProofData} proof\n * @returns {API.uint64}\n */ const offset = ([offset])=>offset;\n/**\n * @param {API.ProofData} proof\n * @returns {number}\n */ const depth = (proof)=>path(proof).length;\n/**\n * Verifies that `proof` proves that `claim.node` is contained by\n * the `claim.tree` merkle tree.\n *\n * @param {API.ProofData} proof\n * @param {object} claim\n * @param {API.MerkleTreeNode} claim.tree\n * @param {API.MerkleTreeNode} claim.node\n * @returns {API.Result<{}, Error>}\n */ const verify = (proof, { tree, node })=>{\n    const computedRoot = resolveRoot(proof, node);\n    if (computedRoot.error) {\n        return {\n            error: new Error(`computing root: ${computedRoot.error.message}`)\n        };\n    }\n    if (!multiformats_bytes__WEBPACK_IMPORTED_MODULE_1__.equals(computedRoot.ok, tree)) {\n        return {\n            error: new Error(\"inclusion proof does not lead to the same root\")\n        };\n    }\n    return {\n        ok: {}\n    };\n};\nconst MAX_DEPTH = 63;\n/**\n * Resolves the root of the merkle tree from given proof and node that root\n * supposedly includes. It does so by computing parent node from provided node\n * and node in the proof path, then combining that with the next node in the\n * path and so on until the root is reached. Function may return an error if\n * proof path is too long or if proof offset falls out of bounds.\n *\n * @param {API.ProofData} proof\n * @param {API.MerkleTreeNode} node\n * @returns {API.Result<API.MerkleTreeNode, RangeError>}\n */ function resolveRoot(proof, node) {\n    if (depth(proof) > MAX_DEPTH) {\n        return {\n            error: new RangeError(\"merkle proofs with depths greater than 63 are not supported\")\n        };\n    }\n    let position = offset(proof);\n    if (position >> BigInt(depth(proof)) !== 0n) {\n        return {\n            error: new RangeError(\"offset greater than width of the tree\")\n        };\n    }\n    let top = node;\n    let right = 0n;\n    for (const node of path(proof)){\n        right = position & 1n;\n        position = position >> 1n;\n        top = right === 1n ? computeNode(node, top) : computeNode(top, node);\n    }\n    return {\n        ok: top\n    };\n}\n/**\n * @param {Uint8Array} payload\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher]\n * @returns {API.MerkleTreeNode}\n */ function truncatedHash(payload, options = {}) {\n    const hasher = options.hasher || _ipld_js__WEBPACK_IMPORTED_MODULE_3__.SHA256;\n    const { digest } = hasher.digest(payload);\n    return truncate(digest);\n}\n/**\n * @param {API.MerkleTreeNode} left\n * @param {API.MerkleTreeNode} right\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher]\n * @returns {API.MerkleTreeNode}\n */ const computeNode = (left, right, options)=>{\n    const payload = new Uint8Array(left.length + right.length);\n    payload.set(left, 0);\n    payload.set(right, left.length);\n    return truncatedHash(payload, options);\n};\n/**\n * @param {API.MerkleTreeNode} node\n * @returns {API.MerkleTreeNode}\n */ function truncate(node) {\n    node[_node_js__WEBPACK_IMPORTED_MODULE_2__.Size - 1] &= 63;\n    return node;\n}\n/**\n * Takes data model and returns an IPLD View of it.\n *\n * @param {object} source\n * @param {API.uint64} source.offset\n * @param {API.MerkleTreePath} source.path\n * @returns {API.ProofData}\n */ const create = ({ offset, path })=>[\n        offset,\n        path\n    ];\n/**\n * Takes proof in somewhat arbitrary form and returns a proof data.\n *\n * @param {API.IntoProofData} source\n * @returns {API.ProofData}\n */ const from = (source)=>{\n    const [offset, path] = Array.isArray(source) ? source : [\n        source.offset,\n        source.path\n    ];\n    return create({\n        offset: BigInt(offset),\n        path\n    });\n};\n/**\n * @param {number} height - Height of the merkle tree\n * @param {number} level - Level of the node in the merkle tree\n * @param {API.uint64} index - Index of the node in the level\n */ const validateLevelIndex = (height, level, index)=>{\n    if (level < 0) {\n        throw new RangeError(\"level can not be negative\");\n    }\n    if (level > height) {\n        throw new RangeError(`level too high: ${level} >= ${height}`);\n    }\n    if (index > (1 << height - level) - 1) {\n        throw new RangeError(`index too large for level: idx ${index}, level ${level} : ${(1 << height - level) - 1}`);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/proof/aggregation.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/proof/aggregation.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   dealID: () => (/* binding */ dealID),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   inclusion: () => (/* binding */ inclusion),\n/* harmony export */   link: () => (/* binding */ link),\n/* harmony export */   resolveAggregate: () => (/* binding */ resolveAggregate),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _ipld_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ipld.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/ipld.js\");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/lib.js\");\n\n\n\n\n/**\n * @param {object} source\n * @param {API.InclusionProof} source.inclusion\n * @param {API.DealID} source.dealID\n * @returns {API.DataAggregationProof}\n */ const create = ({ inclusion, dealID })=>[\n        inclusion,\n        0,\n        [\n            dealID\n        ]\n    ];\n/**\n * Returns piece inclusion proof.\n *\n * @param {API.DataAggregationProof} proof\n * @returns {API.InclusionProof}\n */ const inclusion = ([inclusion])=>inclusion;\n/**\n * @param {API.DataAggregationProof} proof\n * @returns {API.DealID}\n */ const dealID = ([, , [dealID]])=>dealID;\n/**\n * Encodes data layout into a CBOR block.\n *\n * @param {API.DataAggregationProof} proof\n * @returns {API.ByteView<API.DataAggregationProof, typeof CBOR.code>}\n */ const encode = (proof)=>_ipld_js__WEBPACK_IMPORTED_MODULE_1__.CBOR.encode(proof);\n/**\n * Decodes CBOR encoded data layout. It is reverse of {@link encode}.\n *\n * @param {API.ByteView<API.DataAggregationProof, typeof CBOR.code>} bytes\n * @returns {API.DataAggregationProof}\n */ const decode = (bytes)=>{\n    const [inclusion, dataType, [dealID]] = _ipld_js__WEBPACK_IMPORTED_MODULE_1__.CBOR.decode(bytes);\n    return [\n        _lib_js__WEBPACK_IMPORTED_MODULE_2__.Inclusion.from(inclusion),\n        dataType,\n        [\n            BigInt(dealID)\n        ]\n    ];\n};\n/**\n * @param {API.DataAggregationProof} proof\n */ const link = (proof)=>_ipld_js__WEBPACK_IMPORTED_MODULE_1__.createLink(encode(proof), {\n        codec: _ipld_js__WEBPACK_IMPORTED_MODULE_1__.CBOR,\n        hasher: _ipld_js__WEBPACK_IMPORTED_MODULE_1__.SHA256\n    });\n/**\n *\n * @param {API.DataAggregationProof} proof\n * @param {API.PieceLink} piece\n * @returns {API.Result<API.AggregateLink, Error>}\n */ const resolveAggregate = (proof, piece)=>_lib_js__WEBPACK_IMPORTED_MODULE_2__.Inclusion.resolveAggregate(inclusion(proof), piece);\n/**\n * Verifies that `proof` is valid evidence that `claim.piece` is a segment of the `claim.aggregate` \n * and that `proof` is for the `claim.dealID`.\n *\n * @param {API.DataAggregationProof} proof\n * @param {object} claim\n * @param {API.DealID} claim.dealID\n * @param {API.PieceLink} claim.piece\n * @param {API.AggregateLink} claim.aggregate\n * @returns {API.Result<API.Unit, Error>}\n */ const verify = (proof, claim)=>{\n    if (dealID(proof) !== claim.dealID) {\n        return {\n            error: new Error(`Proof is for deal ${dealID(proof)} not ${claim.dealID}`)\n        };\n    }\n    const aggregate = resolveAggregate(proof, claim.piece);\n    if (aggregate.error) {\n        return aggregate;\n    }\n    if (claim.aggregate.toString() !== aggregate.ok.toString()) {\n        return {\n            error: new Error(`Computed aggregate ${aggregate.ok} does not match claimed ${claim.aggregate}`)\n        };\n    }\n    return {\n        ok: {}\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9wcm9vZi9hZ2dyZWdhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFnQztBQUNTO0FBQ0o7QUFDSDtBQUVsQzs7Ozs7Q0FLQyxHQUNNLE1BQU1LLFNBQVMsQ0FBQyxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBRSxHQUFLO1FBQUNEO1FBQVc7UUFBRztZQUFDQztTQUFPO0tBQUM7QUFFekU7Ozs7O0NBS0MsR0FDTSxNQUFNRCxZQUFZLENBQUMsQ0FBQ0EsVUFBVSxHQUFLQSxVQUFTO0FBRW5EOzs7Q0FHQyxHQUNNLE1BQU1DLFNBQVMsQ0FBQyxLQUFLLENBQUNBLE9BQU8sQ0FBQyxHQUFLQSxPQUFNO0FBRWhEOzs7OztDQUtDLEdBQ00sTUFBTUMsU0FBUyxDQUFDQyxRQUFVUixpREFBVyxDQUFDUSxPQUFNO0FBRW5EOzs7OztDQUtDLEdBQ00sTUFBTUMsU0FBUyxDQUFDQztJQUNyQixNQUFNLENBQUNMLFdBQVdNLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDLEdBQUdOLGlEQUFXLENBQUNVO0lBQ3BELE9BQU87UUFBQ1IsbURBQWMsQ0FBQ0c7UUFBWU07UUFBVTtZQUFDRSxPQUFPUDtTQUFRO0tBQUM7QUFDaEUsRUFBQztBQUVEOztDQUVDLEdBQ00sTUFBTVEsT0FBTyxDQUFDTixRQUNuQkwsZ0RBQWUsQ0FBQ0ksT0FBT0MsUUFBUTtRQUFFUSxPQUFPaEIsMENBQUlBO1FBQUVpQixRQUFRaEIsNENBQU1BO0lBQUMsR0FBRTtBQUVqRTs7Ozs7Q0FLQyxHQUNNLE1BQU1pQixtQkFBbUIsQ0FBQ1YsT0FBT1csUUFDdENqQiwrREFBMEIsQ0FBQ0csVUFBVUcsUUFBUVcsT0FBTTtBQUVyRDs7Ozs7Ozs7OztDQVVDLEdBQ00sTUFBTUMsU0FBUyxDQUFDWixPQUFPYTtJQUM1QixJQUFJZixPQUFPRSxXQUFXYSxNQUFNZixNQUFNLEVBQUU7UUFDbEMsT0FBTztZQUNMZ0IsT0FBTyxJQUFJQyxNQUNULENBQUMsa0JBQWtCLEVBQUVqQixPQUFPRSxPQUFPLEtBQUssRUFBRWEsTUFBTWYsTUFBTSxDQUFDLENBQUM7UUFFNUQ7SUFDRjtJQUVBLE1BQU1rQixZQUFZTixpQkFBaUJWLE9BQU9hLE1BQU1GLEtBQUs7SUFDckQsSUFBSUssVUFBVUYsS0FBSyxFQUFFO1FBQ25CLE9BQU9FO0lBQ1Q7SUFFQSxJQUFJSCxNQUFNRyxTQUFTLENBQUNDLFFBQVEsT0FBT0QsVUFBVUUsRUFBRSxDQUFDRCxRQUFRLElBQUk7UUFDMUQsT0FBTztZQUNMSCxPQUFPLElBQUlDLE1BQ1QsQ0FBQyxtQkFBbUIsRUFBRUMsVUFBVUUsRUFBRSxDQUFDLHdCQUF3QixFQUFFTCxNQUFNRyxTQUFTLENBQUMsQ0FBQztRQUVsRjtJQUNGO0lBRUEsT0FBTztRQUFFRSxJQUFJLENBQUM7SUFBRTtBQUNsQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy9wcm9vZi9hZ2dyZWdhdGlvbi5qcz80ZjYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFQSSBmcm9tICcuLi9hcGkuanMnXG5pbXBvcnQgeyBDQk9SLCBTSEEyNTYgfSBmcm9tICcuLi9pcGxkLmpzJ1xuaW1wb3J0IHsgSW5jbHVzaW9uIH0gZnJvbSAnLi4vbGliLmpzJ1xuaW1wb3J0ICogYXMgSVBMRCBmcm9tICcuLi9pcGxkLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBzb3VyY2VcbiAqIEBwYXJhbSB7QVBJLkluY2x1c2lvblByb29mfSBzb3VyY2UuaW5jbHVzaW9uXG4gKiBAcGFyYW0ge0FQSS5EZWFsSUR9IHNvdXJjZS5kZWFsSURcbiAqIEByZXR1cm5zIHtBUEkuRGF0YUFnZ3JlZ2F0aW9uUHJvb2Z9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAoeyBpbmNsdXNpb24sIGRlYWxJRCB9KSA9PiBbaW5jbHVzaW9uLCAwLCBbZGVhbElEXV1cblxuLyoqXG4gKiBSZXR1cm5zIHBpZWNlIGluY2x1c2lvbiBwcm9vZi5cbiAqXG4gKiBAcGFyYW0ge0FQSS5EYXRhQWdncmVnYXRpb25Qcm9vZn0gcHJvb2ZcbiAqIEByZXR1cm5zIHtBUEkuSW5jbHVzaW9uUHJvb2Z9XG4gKi9cbmV4cG9ydCBjb25zdCBpbmNsdXNpb24gPSAoW2luY2x1c2lvbl0pID0+IGluY2x1c2lvblxuXG4vKipcbiAqIEBwYXJhbSB7QVBJLkRhdGFBZ2dyZWdhdGlvblByb29mfSBwcm9vZlxuICogQHJldHVybnMge0FQSS5EZWFsSUR9XG4gKi9cbmV4cG9ydCBjb25zdCBkZWFsSUQgPSAoWywgLCBbZGVhbElEXV0pID0+IGRlYWxJRFxuXG4vKipcbiAqIEVuY29kZXMgZGF0YSBsYXlvdXQgaW50byBhIENCT1IgYmxvY2suXG4gKlxuICogQHBhcmFtIHtBUEkuRGF0YUFnZ3JlZ2F0aW9uUHJvb2Z9IHByb29mXG4gKiBAcmV0dXJucyB7QVBJLkJ5dGVWaWV3PEFQSS5EYXRhQWdncmVnYXRpb25Qcm9vZiwgdHlwZW9mIENCT1IuY29kZT59XG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGUgPSAocHJvb2YpID0+IENCT1IuZW5jb2RlKHByb29mKVxuXG4vKipcbiAqIERlY29kZXMgQ0JPUiBlbmNvZGVkIGRhdGEgbGF5b3V0LiBJdCBpcyByZXZlcnNlIG9mIHtAbGluayBlbmNvZGV9LlxuICpcbiAqIEBwYXJhbSB7QVBJLkJ5dGVWaWV3PEFQSS5EYXRhQWdncmVnYXRpb25Qcm9vZiwgdHlwZW9mIENCT1IuY29kZT59IGJ5dGVzXG4gKiBAcmV0dXJucyB7QVBJLkRhdGFBZ2dyZWdhdGlvblByb29mfVxuICovXG5leHBvcnQgY29uc3QgZGVjb2RlID0gKGJ5dGVzKSA9PiB7XG4gIGNvbnN0IFtpbmNsdXNpb24sIGRhdGFUeXBlLCBbZGVhbElEXV0gPSBDQk9SLmRlY29kZShieXRlcylcbiAgcmV0dXJuIFtJbmNsdXNpb24uZnJvbShpbmNsdXNpb24pLCBkYXRhVHlwZSwgW0JpZ0ludChkZWFsSUQpXV1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FQSS5EYXRhQWdncmVnYXRpb25Qcm9vZn0gcHJvb2ZcbiAqL1xuZXhwb3J0IGNvbnN0IGxpbmsgPSAocHJvb2YpID0+XG4gIElQTEQuY3JlYXRlTGluayhlbmNvZGUocHJvb2YpLCB7IGNvZGVjOiBDQk9SLCBoYXNoZXI6IFNIQTI1NiB9KVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0FQSS5EYXRhQWdncmVnYXRpb25Qcm9vZn0gcHJvb2ZcbiAqIEBwYXJhbSB7QVBJLlBpZWNlTGlua30gcGllY2VcbiAqIEByZXR1cm5zIHtBUEkuUmVzdWx0PEFQSS5BZ2dyZWdhdGVMaW5rLCBFcnJvcj59XG4gKi9cbmV4cG9ydCBjb25zdCByZXNvbHZlQWdncmVnYXRlID0gKHByb29mLCBwaWVjZSkgPT5cbiAgSW5jbHVzaW9uLnJlc29sdmVBZ2dyZWdhdGUoaW5jbHVzaW9uKHByb29mKSwgcGllY2UpXG5cbi8qKlxuICogVmVyaWZpZXMgdGhhdCBgcHJvb2ZgIGlzIHZhbGlkIGV2aWRlbmNlIHRoYXQgYGNsYWltLnBpZWNlYCBpcyBhIHNlZ21lbnQgb2YgdGhlIGBjbGFpbS5hZ2dyZWdhdGVgIFxuICogYW5kIHRoYXQgYHByb29mYCBpcyBmb3IgdGhlIGBjbGFpbS5kZWFsSURgLlxuICpcbiAqIEBwYXJhbSB7QVBJLkRhdGFBZ2dyZWdhdGlvblByb29mfSBwcm9vZlxuICogQHBhcmFtIHtvYmplY3R9IGNsYWltXG4gKiBAcGFyYW0ge0FQSS5EZWFsSUR9IGNsYWltLmRlYWxJRFxuICogQHBhcmFtIHtBUEkuUGllY2VMaW5rfSBjbGFpbS5waWVjZVxuICogQHBhcmFtIHtBUEkuQWdncmVnYXRlTGlua30gY2xhaW0uYWdncmVnYXRlXG4gKiBAcmV0dXJucyB7QVBJLlJlc3VsdDxBUEkuVW5pdCwgRXJyb3I+fVxuICovXG5leHBvcnQgY29uc3QgdmVyaWZ5ID0gKHByb29mLCBjbGFpbSkgPT4ge1xuICBpZiAoZGVhbElEKHByb29mKSAhPT0gY2xhaW0uZGVhbElEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBuZXcgRXJyb3IoXG4gICAgICAgIGBQcm9vZiBpcyBmb3IgZGVhbCAke2RlYWxJRChwcm9vZil9IG5vdCAke2NsYWltLmRlYWxJRH1gXG4gICAgICApLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGFnZ3JlZ2F0ZSA9IHJlc29sdmVBZ2dyZWdhdGUocHJvb2YsIGNsYWltLnBpZWNlKVxuICBpZiAoYWdncmVnYXRlLmVycm9yKSB7XG4gICAgcmV0dXJuIGFnZ3JlZ2F0ZVxuICB9XG5cbiAgaWYgKGNsYWltLmFnZ3JlZ2F0ZS50b1N0cmluZygpICE9PSBhZ2dyZWdhdGUub2sudG9TdHJpbmcoKSkge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogbmV3IEVycm9yKFxuICAgICAgICBgQ29tcHV0ZWQgYWdncmVnYXRlICR7YWdncmVnYXRlLm9rfSBkb2VzIG5vdCBtYXRjaCBjbGFpbWVkICR7Y2xhaW0uYWdncmVnYXRlfWBcbiAgICAgICksXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgb2s6IHt9IH1cbn1cbiJdLCJuYW1lcyI6WyJBUEkiLCJDQk9SIiwiU0hBMjU2IiwiSW5jbHVzaW9uIiwiSVBMRCIsImNyZWF0ZSIsImluY2x1c2lvbiIsImRlYWxJRCIsImVuY29kZSIsInByb29mIiwiZGVjb2RlIiwiYnl0ZXMiLCJkYXRhVHlwZSIsImZyb20iLCJCaWdJbnQiLCJsaW5rIiwiY3JlYXRlTGluayIsImNvZGVjIiwiaGFzaGVyIiwicmVzb2x2ZUFnZ3JlZ2F0ZSIsInBpZWNlIiwidmVyaWZ5IiwiY2xhaW0iLCJlcnJvciIsIkVycm9yIiwiYWdncmVnYXRlIiwidG9TdHJpbmciLCJvayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/proof/aggregation.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/segment.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/segment.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChecksumSize: () => (/* binding */ ChecksumSize),\n/* harmony export */   Uint64Size: () => (/* binding */ Uint64Size),\n/* harmony export */   computeChecksum: () => (/* binding */ computeChecksum),\n/* harmony export */   fromSource: () => (/* binding */ fromSource),\n/* harmony export */   fromSourceWithChecksum: () => (/* binding */ fromSourceWithChecksum),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toIndexNode: () => (/* binding */ toIndexNode),\n/* harmony export */   toLeafIndex: () => (/* binding */ toLeafIndex),\n/* harmony export */   toSource: () => (/* binding */ toSource),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   withChecksum: () => (/* binding */ withChecksum)\n/* harmony export */ });\n/* harmony import */ var sync_multihash_sha2_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sync-multihash-sha2/sha256 */ \"(rsc)/../node_modules/sync-multihash-sha2/src/sha256/node.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./uint64.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\");\n\n\n\n\n/**\n * The size of the checksum in bytes\n */ const ChecksumSize = 16;\n/**\n * Amount of bytes a uint64 will take.\n */ const Uint64Size = 64 / 8;\n/**\n *\n * @param {API.Segment} segment\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher] - A sync sha256 hasher.\n * @returns {API.Checksum<API.Segment, typeof ChecksumSize>}\n */ const computeChecksum = (segment, options)=>/** Take only the first {@link ChecksumSize} bytes */ toBytes(segment, options).subarray(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size + Uint64Size + Uint64Size);\n/**\n * @param {API.Segment} segment\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher] - A sync sha256 hasher.\n * @returns {API.SegmentInfo}\n */ const withChecksum = (segment, options)=>({\n        ...segment,\n        checksum: computeChecksum(segment, options)\n    });\n/**\n * @param {API.MerkleTreeNodeSource} source\n */ const fromSource = ({ node, location })=>({\n        root: node,\n        offset: toLeafIndex(location) * BigInt(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size),\n        size: (0,_uint64_js__WEBPACK_IMPORTED_MODULE_3__.pow2)(BigInt(location.level)) * BigInt(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size)\n    });\n/**\n *\n * @param {API.Segment} segment\n * @returns {API.MerkleTreeNodeSource}\n */ const toSource = (segment)=>{\n    const level = (0,_uint64_js__WEBPACK_IMPORTED_MODULE_3__.log2Ceil)(segment.size / BigInt(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size));\n    return {\n        node: segment.root,\n        location: {\n            level,\n            index: segment.offset / BigInt(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size) >> BigInt(level)\n        }\n    };\n};\n/**\n * @param {API.MerkleTreeNodeSource} source\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher] - A sync sha256 hasher.\n */ const fromSourceWithChecksum = (source, options)=>withChecksum(fromSource(source), options);\n/**\n * Calculates the `index` in the leaf layer corresponding to the given\n * `location` in (the hybrid merkle tree).\n *\n * @param {API.MerkleTreeLocation} location\n */ const toLeafIndex = ({ index, level })=>// This is done by bit shifting Index to the left by `level` places.\n    // In the context of a binary tree, this operation essentially corresponds to\n    // descending `level` levels down from the current node.\n    index << BigInt(level);\n/**\n * @param {API.Segment} segment\n * @returns {API.MerkleTreeNode}\n */ const toIndexNode = (segment)=>toBytes(segment).subarray(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size);\n/**\n * @see https://github.com/filecoin-project/go-data-segment/blob/e3257b64fa2c84e0df95df35de409cfed7a38438/datasegment/index.go#L232-L248\n *\n * @param {(API.Segment & {checksum?: undefined}) |API.SegmentInfo} segment\n * @param {object} [options]\n * @param {API.SyncMultihashHasher<API.SHA256_CODE>} [options.hasher] - A sync sha256 hasher.\n * @returns {API.ByteView<API.SegmentInfo, API.RAW_CODE>}\n */ const toBytes = ({ root, size, offset, checksum }, options = {})=>{\n    const buffer = new Uint8Array(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size + Uint64Size + Uint64Size + ChecksumSize);\n    buffer.set(root, 0);\n    const view = new DataView(buffer.buffer);\n    view.setBigUint64(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size, BigInt(offset), true);\n    view.setBigUint64(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size + Uint64Size, BigInt(size), true);\n    if (!checksum) {\n        const hasher = options.hasher || sync_multihash_sha2_sha256__WEBPACK_IMPORTED_MODULE_0__;\n        const { digest } = hasher.digest(buffer);\n        checksum = digest.subarray(0, ChecksumSize);\n        // Truncate to  126 bits\n        checksum[ChecksumSize - 1] &= 63;\n    }\n    buffer.set(checksum, _node_js__WEBPACK_IMPORTED_MODULE_1__.Size + Uint64Size + Uint64Size);\n    return buffer;\n};\n/**\n * @param {API.Segment} segment\n * @returns {API.Result<API.Segment, Error>}\n */ const validate = (segment)=>{\n    if (segment.offset % 128n !== 0n) {\n        return {\n            error: Error(\"offset is not aligned in padded data\")\n        };\n    }\n    return {\n        ok: segment\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/segment.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js":
/*!****************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/uint64.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   log2Ceil: () => (/* binding */ log2Ceil),\n/* harmony export */   log2Floor: () => (/* binding */ log2Floor),\n/* harmony export */   onesCount64: () => (/* binding */ onesCount64),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   trailingZeros64: () => (/* binding */ trailingZeros64)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n\n/**\n * Returns the base 2 logarithm of the given `n`, rounded down.\n *\n * @param {API.uint64} n\n * @returns {number}\n */ const log2Floor = (n)=>{\n    let result = 0n;\n    while(n >>= 1n)result++;\n    return Number(result);\n};\n/**\n * Return the integer logarithm with ceiling for 64 bit unsigned ints.\n *\n * @param {API.uint64} n\n */ const log2Ceil = (n)=>n <= 1n ? 0 : log2Floor(BigInt(n) - 1n) + 1;\n/**\n * @param {API.uint64} n\n */ const trailingZeros64 = (n)=>{\n    if (n === 0n) {\n        return 64;\n    }\n    let count = 0;\n    while((n & 1n) === 0n){\n        n >>= 1n;\n        count++;\n    }\n    return count;\n};\n/**\n * @param {API.uint64} value\n */ const onesCount64 = (value)=>{\n    let count = 0;\n    const mask = 1n;\n    for(let i = 0n; i < 64n; i++){\n        if ((value & mask << i) !== 0n) {\n            count++;\n        }\n    }\n    return count;\n};\n/**\n * @param {API.uint64} n\n * @returns {API.uint64}\n */ const pow2 = (n)=>1n << n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy91aW50NjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStCO0FBRS9COzs7OztDQUtDLEdBQ00sTUFBTUMsWUFBWSxDQUFDQztJQUN4QixJQUFJQyxTQUFTLEVBQUU7SUFDZixNQUFRRCxNQUFNLEVBQUUsQ0FBR0M7SUFDbkIsT0FBT0MsT0FBT0Q7QUFDaEIsRUFBQztBQUVEOzs7O0NBSUMsR0FDTSxNQUFNRSxXQUFXLENBQUNILElBQU9BLEtBQUssRUFBRSxHQUFHLElBQUlELFVBQVVLLE9BQU9KLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFFNUU7O0NBRUMsR0FDTSxNQUFNSyxrQkFBa0IsQ0FBQ0w7SUFDOUIsSUFBSUEsTUFBTSxFQUFFLEVBQUU7UUFDWixPQUFPO0lBQ1Q7SUFFQSxJQUFJTSxRQUFRO0lBQ1osTUFBTyxDQUFDTixJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUU7UUFDdEJBLE1BQU0sRUFBRTtRQUNSTTtJQUNGO0lBRUEsT0FBT0E7QUFDVCxFQUFDO0FBRUQ7O0NBRUMsR0FDTSxNQUFNQyxjQUFjLENBQUNDO0lBQzFCLElBQUlGLFFBQVE7SUFDWixNQUFNRyxPQUFPLEVBQUU7SUFFZixJQUFLLElBQUlDLElBQUksRUFBRSxFQUFFQSxJQUFJLEdBQUcsRUFBRUEsSUFBSztRQUM3QixJQUFJLENBQUNGLFFBQVNDLFFBQVFDLENBQUMsTUFBTyxFQUFFLEVBQUU7WUFDaENKO1FBQ0Y7SUFDRjtJQUVBLE9BQU9BO0FBQ1QsRUFBQztBQUVEOzs7Q0FHQyxHQUNNLE1BQU1LLE9BQU8sQ0FBQ1gsSUFBTSxFQUFFLElBQUlBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9kYXRhLXNlZ21lbnQvc3JjL3VpbnQ2NC5qcz81NGRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFQSSBmcm9tICcuL2FwaS5qcydcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIDIgbG9nYXJpdGhtIG9mIHRoZSBnaXZlbiBgbmAsIHJvdW5kZWQgZG93bi5cbiAqXG4gKiBAcGFyYW0ge0FQSS51aW50NjR9IG5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBsb2cyRmxvb3IgPSAobikgPT4ge1xuICBsZXQgcmVzdWx0ID0gMG5cbiAgd2hpbGUgKChuID4+PSAxbikpIHJlc3VsdCsrXG4gIHJldHVybiBOdW1iZXIocmVzdWx0KVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciBsb2dhcml0aG0gd2l0aCBjZWlsaW5nIGZvciA2NCBiaXQgdW5zaWduZWQgaW50cy5cbiAqXG4gKiBAcGFyYW0ge0FQSS51aW50NjR9IG5cbiAqL1xuZXhwb3J0IGNvbnN0IGxvZzJDZWlsID0gKG4pID0+IChuIDw9IDFuID8gMCA6IGxvZzJGbG9vcihCaWdJbnQobikgLSAxbikgKyAxKVxuXG4vKipcbiAqIEBwYXJhbSB7QVBJLnVpbnQ2NH0gblxuICovXG5leHBvcnQgY29uc3QgdHJhaWxpbmdaZXJvczY0ID0gKG4pID0+IHtcbiAgaWYgKG4gPT09IDBuKSB7XG4gICAgcmV0dXJuIDY0XG4gIH1cblxuICBsZXQgY291bnQgPSAwXG4gIHdoaWxlICgobiAmIDFuKSA9PT0gMG4pIHtcbiAgICBuID4+PSAxblxuICAgIGNvdW50KytcbiAgfVxuXG4gIHJldHVybiBjb3VudFxufVxuXG4vKipcbiAqIEBwYXJhbSB7QVBJLnVpbnQ2NH0gdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IG9uZXNDb3VudDY0ID0gKHZhbHVlKSA9PiB7XG4gIGxldCBjb3VudCA9IDBcbiAgY29uc3QgbWFzayA9IDFuXG5cbiAgZm9yIChsZXQgaSA9IDBuOyBpIDwgNjRuOyBpKyspIHtcbiAgICBpZiAoKHZhbHVlICYgKG1hc2sgPDwgaSkpICE9PSAwbikge1xuICAgICAgY291bnQrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3VudFxufVxuXG4vKipcbiAqIEBwYXJhbSB7QVBJLnVpbnQ2NH0gblxuICogQHJldHVybnMge0FQSS51aW50NjR9XG4gKi9cbmV4cG9ydCBjb25zdCBwb3cyID0gKG4pID0+IDFuIDw8IG5cbiJdLCJuYW1lcyI6WyJBUEkiLCJsb2cyRmxvb3IiLCJuIiwicmVzdWx0IiwiTnVtYmVyIiwibG9nMkNlaWwiLCJCaWdJbnQiLCJ0cmFpbGluZ1plcm9zNjQiLCJjb3VudCIsIm9uZXNDb3VudDY0IiwidmFsdWUiLCJtYXNrIiwiaSIsInBvdzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/uint64.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/@web3-storage/data-segment/src/zero-comm.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@web3-storage/data-segment/src/zero-comm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromLevel: () => (/* binding */ fromLevel)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/api.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/node.js\");\n/* harmony import */ var _proof_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./proof.js */ \"(rsc)/../node_modules/@web3-storage/data-segment/src/proof.js\");\n\n\n\nconst MAX_LEVEL = 64;\n/**\n * This is a lazy zero-comm buffer which we fill up on demand.\n */ class ZeroComm {\n    constructor(){\n        this.bytes = new Uint8Array(MAX_LEVEL * _node_js__WEBPACK_IMPORTED_MODULE_1__.Size);\n        this.bytes.set(_node_js__WEBPACK_IMPORTED_MODULE_1__.empty(), 0);\n        /** @private */ this.node = _node_js__WEBPACK_IMPORTED_MODULE_1__.empty();\n        /** @private */ this.length = _node_js__WEBPACK_IMPORTED_MODULE_1__.Size;\n    }\n    /**\n   * @param {number} start\n   * @param {number} end\n   */ slice(start, end) {\n        while(this.length < end){\n            this.node = _proof_js__WEBPACK_IMPORTED_MODULE_2__.computeNode(this.node, this.node);\n            this.bytes.set(this.node, this.length);\n            this.length += _node_js__WEBPACK_IMPORTED_MODULE_1__.Size;\n        }\n        return this.bytes.subarray(start, end);\n    }\n}\nconst ZERO_COMM = new ZeroComm();\n/**\n * simple access by level, only levels between `0` and `64` inclusive are\n * available otherwise throws an error.\n *\n * @param {number} level\n * @returns {API.MerkleTreeNode}\n */ const fromLevel = (level)=>{\n    if (level < 0 || level >= MAX_LEVEL) {\n        throw new Error(`Only levels between 0 and ${MAX_LEVEL - 1} inclusive are available`);\n    }\n    return ZERO_COMM.slice(_node_js__WEBPACK_IMPORTED_MODULE_1__.Size * level, _node_js__WEBPACK_IMPORTED_MODULE_1__.Size * (level + 1));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvZGF0YS1zZWdtZW50L3NyYy96ZXJvLWNvbW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUNFO0FBQ0U7QUFFbkMsTUFBTUcsWUFBWTtBQUVsQjs7Q0FFQyxHQUNELE1BQU1DO0lBQ0pDLGFBQWM7UUFDWixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQyxXQUFXSixZQUFZRiwwQ0FBUztRQUNqRCxJQUFJLENBQUNLLEtBQUssQ0FBQ0csR0FBRyxDQUFDUiwyQ0FBVSxJQUFJO1FBQzdCLGFBQWEsR0FDYixJQUFJLENBQUNVLElBQUksR0FBR1YsMkNBQVU7UUFDdEIsYUFBYSxHQUNiLElBQUksQ0FBQ1csTUFBTSxHQUFHWCwwQ0FBUztJQUN6QjtJQUNBOzs7R0FHQyxHQUNEWSxNQUFNQyxLQUFLLEVBQUVDLEdBQUcsRUFBRTtRQUNoQixNQUFPLElBQUksQ0FBQ0gsTUFBTSxHQUFHRyxJQUFLO1lBQ3hCLElBQUksQ0FBQ0osSUFBSSxHQUFHVCxrREFBaUIsQ0FBQyxJQUFJLENBQUNTLElBQUksRUFBRSxJQUFJLENBQUNBLElBQUk7WUFDbEQsSUFBSSxDQUFDTCxLQUFLLENBQUNHLEdBQUcsQ0FBQyxJQUFJLENBQUNFLElBQUksRUFBRSxJQUFJLENBQUNDLE1BQU07WUFDckMsSUFBSSxDQUFDQSxNQUFNLElBQUlYLDBDQUFTO1FBQzFCO1FBRUEsT0FBTyxJQUFJLENBQUNLLEtBQUssQ0FBQ1csUUFBUSxDQUFDSCxPQUFPQztJQUNwQztBQUNGO0FBQ0EsTUFBTUcsWUFBWSxJQUFJZDtBQUV0Qjs7Ozs7O0NBTUMsR0FDTSxNQUFNZSxZQUFZLENBQUNDO0lBQ3hCLElBQUlBLFFBQVEsS0FBS0EsU0FBU2pCLFdBQVc7UUFDbkMsTUFBTSxJQUFJa0IsTUFDUixDQUFDLDBCQUEwQixFQUFFbEIsWUFBWSxFQUFFLHdCQUF3QixDQUFDO0lBRXhFO0lBRUEsT0FBT2UsVUFBVUwsS0FBSyxDQUFDWiwwQ0FBUyxHQUFHbUIsT0FBT25CLDBDQUFTLEdBQUltQixDQUFBQSxRQUFRO0FBQ2pFLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9kYXRhLXNlZ21lbnQvc3JjL3plcm8tY29tbS5qcz84YzVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFQSSBmcm9tICcuL2FwaS5qcydcbmltcG9ydCAqIGFzIE5vZGUgZnJvbSAnLi9ub2RlLmpzJ1xuaW1wb3J0ICogYXMgUHJvb2YgZnJvbSAnLi9wcm9vZi5qcydcblxuY29uc3QgTUFYX0xFVkVMID0gNjRcblxuLyoqXG4gKiBUaGlzIGlzIGEgbGF6eSB6ZXJvLWNvbW0gYnVmZmVyIHdoaWNoIHdlIGZpbGwgdXAgb24gZGVtYW5kLlxuICovXG5jbGFzcyBaZXJvQ29tbSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYnl0ZXMgPSBuZXcgVWludDhBcnJheShNQVhfTEVWRUwgKiBOb2RlLlNpemUpXG4gICAgdGhpcy5ieXRlcy5zZXQoTm9kZS5lbXB0eSgpLCAwKVxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMubm9kZSA9IE5vZGUuZW1wdHkoKVxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMubGVuZ3RoID0gTm9kZS5TaXplXG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gICAqL1xuICBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgICB0aGlzLm5vZGUgPSBQcm9vZi5jb21wdXRlTm9kZSh0aGlzLm5vZGUsIHRoaXMubm9kZSlcbiAgICAgIHRoaXMuYnl0ZXMuc2V0KHRoaXMubm9kZSwgdGhpcy5sZW5ndGgpXG4gICAgICB0aGlzLmxlbmd0aCArPSBOb2RlLlNpemVcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ieXRlcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICB9XG59XG5jb25zdCBaRVJPX0NPTU0gPSBuZXcgWmVyb0NvbW0oKVxuXG4vKipcbiAqIHNpbXBsZSBhY2Nlc3MgYnkgbGV2ZWwsIG9ubHkgbGV2ZWxzIGJldHdlZW4gYDBgIGFuZCBgNjRgIGluY2x1c2l2ZSBhcmVcbiAqIGF2YWlsYWJsZSBvdGhlcndpc2UgdGhyb3dzIGFuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZXZlbFxuICogQHJldHVybnMge0FQSS5NZXJrbGVUcmVlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21MZXZlbCA9IChsZXZlbCkgPT4ge1xuICBpZiAobGV2ZWwgPCAwIHx8IGxldmVsID49IE1BWF9MRVZFTCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBPbmx5IGxldmVscyBiZXR3ZWVuIDAgYW5kICR7TUFYX0xFVkVMIC0gMX0gaW5jbHVzaXZlIGFyZSBhdmFpbGFibGVgXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIFpFUk9fQ09NTS5zbGljZShOb2RlLlNpemUgKiBsZXZlbCwgTm9kZS5TaXplICogKGxldmVsICsgMSkpXG59XG4iXSwibmFtZXMiOlsiQVBJIiwiTm9kZSIsIlByb29mIiwiTUFYX0xFVkVMIiwiWmVyb0NvbW0iLCJjb25zdHJ1Y3RvciIsImJ5dGVzIiwiVWludDhBcnJheSIsIlNpemUiLCJzZXQiLCJlbXB0eSIsIm5vZGUiLCJsZW5ndGgiLCJzbGljZSIsInN0YXJ0IiwiZW5kIiwiY29tcHV0ZU5vZGUiLCJzdWJhcnJheSIsIlpFUk9fQ09NTSIsImZyb21MZXZlbCIsImxldmVsIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@web3-storage/data-segment/src/zero-comm.js\n");

/***/ })

};
;