"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ipld";
exports.ids = ["vendor-chunks/@ipld"];
exports.modules = {

/***/ "(rsc)/../node_modules/@ipld/dag-cbor/src/index.js":
/*!***************************************************!*\
  !*** ../node_modules/@ipld/dag-cbor/src/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeOptions: () => (/* binding */ decodeOptions),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeOptions: () => (/* binding */ encodeOptions),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   toByteView: () => (/* binding */ toByteView)\n/* harmony export */ });\n/* harmony import */ var cborg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cborg */ \"(rsc)/../node_modules/cborg/cborg.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/cid */ \"(rsc)/../node_modules/multiformats/dist/src/cid.js\");\n\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42;\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */ /**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ArrayBufferView<T>} ArrayBufferView\n */ /**\n * @template T\n * @param {ByteView<T> | ArrayBufferView<T>} buf\n * @returns {ByteView<T>}\n */ function toByteView(buf) {\n    if (buf instanceof ArrayBuffer) {\n        return new Uint8Array(buf, 0, buf.byteLength);\n    }\n    return buf;\n}\n/**\n * cidEncoder will receive all Objects during encode, it needs to filter out\n * anything that's not a CID and return `null` for that so it's encoded as\n * normal.\n *\n * @param {any} obj\n * @returns {cborg.Token[]|null}\n */ function cidEncoder(obj) {\n    if (obj.asCID !== obj && obj[\"/\"] !== obj.bytes) {\n        return null // any other kind of object\n        ;\n    }\n    const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.asCID(obj);\n    /* c8 ignore next 4 */ // very unlikely case, and it'll probably throw a recursion error in cborg\n    if (!cid) {\n        return null;\n    }\n    const bytes = new Uint8Array(cid.bytes.byteLength + 1);\n    bytes.set(cid.bytes, 1) // prefix is 0x00, for historical reasons\n    ;\n    return [\n        new cborg__WEBPACK_IMPORTED_MODULE_0__.Token(cborg__WEBPACK_IMPORTED_MODULE_0__.Type.tag, CID_CBOR_TAG),\n        new cborg__WEBPACK_IMPORTED_MODULE_0__.Token(cborg__WEBPACK_IMPORTED_MODULE_0__.Type.bytes, bytes)\n    ];\n}\n// eslint-disable-next-line jsdoc/require-returns-check\n/**\n * Intercept all `undefined` values from an object walk and reject the entire\n * object if we find one.\n *\n * @returns {null}\n */ function undefinedEncoder() {\n    throw new Error(\"`undefined` is not supported by the IPLD Data Model and cannot be encoded\");\n}\n/**\n * Intercept all `number` values from an object walk and reject the entire\n * object if we find something that doesn't fit the IPLD data model (NaN &\n * Infinity).\n *\n * @param {number} num\n * @returns {null}\n */ function numberEncoder(num) {\n    if (Number.isNaN(num)) {\n        throw new Error(\"`NaN` is not supported by the IPLD Data Model and cannot be encoded\");\n    }\n    if (num === Infinity || num === -Infinity) {\n        throw new Error(\"`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded\");\n    }\n    return null;\n}\nconst _encodeOptions = {\n    float64: true,\n    typeEncoders: {\n        Object: cidEncoder,\n        undefined: undefinedEncoder,\n        number: numberEncoder\n    }\n};\nconst encodeOptions = {\n    ..._encodeOptions,\n    typeEncoders: {\n        ..._encodeOptions.typeEncoders\n    }\n};\n/**\n * @param {Uint8Array} bytes\n * @returns {CID}\n */ function cidDecoder(bytes) {\n    if (bytes[0] !== 0) {\n        throw new Error(\"Invalid CID for CBOR tag 42; expected leading 0x00\");\n    }\n    return multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.decode(bytes.subarray(1)) // ignore leading 0x00\n    ;\n}\nconst _decodeOptions = {\n    allowIndefinite: false,\n    coerceUndefinedToNull: true,\n    allowNaN: false,\n    allowInfinity: false,\n    allowBigInt: true,\n    // safe-integer range, which may surprise users\n    strict: true,\n    useMaps: false,\n    rejectDuplicateMapKeys: true,\n    /** @type {import('cborg').TagDecoder[]} */ tags: []\n};\n_decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;\nconst decodeOptions = {\n    ..._decodeOptions,\n    tags: _decodeOptions.tags.slice()\n};\nconst name = \"dag-cbor\";\nconst code = 0x71;\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */ const encode = (node)=>cborg__WEBPACK_IMPORTED_MODULE_0__.encode(node, _encodeOptions);\n/**\n * @template T\n * @param {ByteView<T> | ArrayBufferView<T>} data\n * @returns {T}\n */ const decode = (data)=>cborg__WEBPACK_IMPORTED_MODULE_0__.decode(toByteView(data), _decodeOptions);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@ipld/dag-cbor/src/index.js\n");

/***/ })

};
;