"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multiformats";
exports.ids = ["vendor-chunks/multiformats"];
exports.modules = {

/***/ "(rsc)/../node_modules/multiformats/dist/src/bases/base.js":
/*!***********************************************************!*\
  !*** ../node_modules/multiformats/dist/src/bases/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Codec: () => (/* binding */ Codec),\n/* harmony export */   baseX: () => (/* binding */ baseX),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   or: () => (/* binding */ or),\n/* harmony export */   rfc4648: () => (/* binding */ rfc4648)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"(rsc)/../node_modules/multiformats/dist/src/bytes.js\");\n/* harmony import */ var _vendor_base_x_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/base-x.js */ \"(rsc)/../node_modules/multiformats/dist/src/vendor/base-x.js\");\n\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */ class Encoder {\n    constructor(name, prefix, baseEncode){\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        } else {\n            throw Error(\"Unknown type, must be binary type\");\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */ class Decoder {\n    constructor(name, prefix, baseDecode){\n        this.name = name;\n        this.prefix = prefix;\n        const prefixCodePoint = prefix.codePointAt(0);\n        /* c8 ignore next 3 */ if (prefixCodePoint === undefined) {\n            throw new Error(\"Invalid prefix character\");\n        }\n        this.prefixCodePoint = prefixCodePoint;\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === \"string\") {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        } else {\n            throw Error(\"Can only multibase decode strings\");\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    constructor(decoders){\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        } else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nfunction or(left, right) {\n    return new ComposedDecoder({\n        ...left.decoders ?? {\n            [left.prefix]: left\n        },\n        ...right.decoders ?? {\n            [right.prefix]: right\n        }\n    });\n}\nclass Codec {\n    constructor(name, prefix, baseEncode, baseDecode){\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nfunction from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nfunction baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = (0,_vendor_base_x_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text)=>(0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(decode(text))\n    });\n}\nfunction decode(string, alphabetIdx, bitsPerChar, name) {\n    // Count the padding bytes:\n    let end = string.length;\n    while(string[end - 1] === \"=\"){\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for(let i = 0; i < end; ++i){\n        // Read one character from the string:\n        const value = alphabetIdx[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = buffer << bitsPerChar | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & buffer >> bits;\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & buffer << 8 - bits) !== 0) {\n        throw new SyntaxError(\"Unexpected end of data\");\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === \"=\";\n    const mask = (1 << bitsPerChar) - 1;\n    let out = \"\";\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for(let i = 0; i < data.length; ++i){\n        // Slurp data into the buffer:\n        buffer = buffer << 8 | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while(bits > bitsPerChar){\n            bits -= bitsPerChar;\n            out += alphabet[mask & buffer >> bits];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & buffer << bitsPerChar - bits];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while((out.length * bitsPerChar & 7) !== 0){\n            out += \"=\";\n        }\n    }\n    return out;\n}\nfunction createAlphabetIdx(alphabet) {\n    // Build the character lookup table:\n    const alphabetIdx = {};\n    for(let i = 0; i < alphabet.length; ++i){\n        alphabetIdx[alphabet[i]] = i;\n    }\n    return alphabetIdx;\n}\n/**\n * RFC4648 Factory\n */ function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    const alphabetIdx = createAlphabetIdx(alphabet);\n    return from({\n        prefix,\n        name,\n        encode (input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode (input) {\n            return decode(input, alphabetIdx, bitsPerChar, name);\n        }\n    });\n} //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/bases/base.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/bases/base32.js":
/*!*************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/bases/base32.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base32: () => (/* binding */ base32),\n/* harmony export */   base32hex: () => (/* binding */ base32hex),\n/* harmony export */   base32hexpad: () => (/* binding */ base32hexpad),\n/* harmony export */   base32hexpadupper: () => (/* binding */ base32hexpadupper),\n/* harmony export */   base32hexupper: () => (/* binding */ base32hexupper),\n/* harmony export */   base32pad: () => (/* binding */ base32pad),\n/* harmony export */   base32padupper: () => (/* binding */ base32padupper),\n/* harmony export */   base32upper: () => (/* binding */ base32upper),\n/* harmony export */   base32z: () => (/* binding */ base32z)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/../node_modules/multiformats/dist/src/bases/base.js\");\n\nconst base32 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n});\nconst base32upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n});\nconst base32pad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n});\nconst base32padupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n});\nconst base32hex = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n});\nconst base32hexupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n});\nconst base32hexpad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n});\nconst base32hexpadupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n});\nconst base32z = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n}); //# sourceMappingURL=base32.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9iYXNlcy9iYXNlMzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFvQztBQUM3QixNQUFNQyxTQUFTRCxpREFBT0EsQ0FBQztJQUMxQkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNqQixHQUFHO0FBQ0ksTUFBTUMsY0FBY04saURBQU9BLENBQUM7SUFDL0JFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDakIsR0FBRztBQUNJLE1BQU1FLFlBQVlQLGlEQUFPQSxDQUFDO0lBQzdCRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2pCLEdBQUc7QUFDSSxNQUFNRyxpQkFBaUJSLGlEQUFPQSxDQUFDO0lBQ2xDRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2pCLEdBQUc7QUFDSSxNQUFNSSxZQUFZVCxpREFBT0EsQ0FBQztJQUM3QkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNqQixHQUFHO0FBQ0ksTUFBTUssaUJBQWlCVixpREFBT0EsQ0FBQztJQUNsQ0UsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7SUFDVkMsYUFBYTtBQUNqQixHQUFHO0FBQ0ksTUFBTU0sZUFBZVgsaURBQU9BLENBQUM7SUFDaENFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDakIsR0FBRztBQUNJLE1BQU1PLG9CQUFvQlosaURBQU9BLENBQUM7SUFDckNFLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLGFBQWE7QUFDakIsR0FBRztBQUNJLE1BQU1RLFVBQVViLGlEQUFPQSxDQUFDO0lBQzNCRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2pCLEdBQUcsQ0FDSCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2Rpc3Qvc3JjL2Jhc2VzL2Jhc2UzMi5qcz80YTM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJmYzQ2NDggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UzMiA9IHJmYzQ2NDgoe1xuICAgIHByZWZpeDogJ2InLFxuICAgIG5hbWU6ICdiYXNlMzInLFxuICAgIGFscGhhYmV0OiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1NjcnLFxuICAgIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJ1cHBlciA9IHJmYzQ2NDgoe1xuICAgIHByZWZpeDogJ0InLFxuICAgIG5hbWU6ICdiYXNlMzJ1cHBlcicsXG4gICAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2NycsXG4gICAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMnBhZCA9IHJmYzQ2NDgoe1xuICAgIHByZWZpeDogJ2MnLFxuICAgIG5hbWU6ICdiYXNlMzJwYWQnLFxuICAgIGFscGhhYmV0OiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1Njc9JyxcbiAgICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMycGFkdXBwZXIgPSByZmM0NjQ4KHtcbiAgICBwcmVmaXg6ICdDJyxcbiAgICBuYW1lOiAnYmFzZTMycGFkdXBwZXInLFxuICAgIGFscGhhYmV0OiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1Njc9JyxcbiAgICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMyaGV4ID0gcmZjNDY0OCh7XG4gICAgcHJlZml4OiAndicsXG4gICAgbmFtZTogJ2Jhc2UzMmhleCcsXG4gICAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dicsXG4gICAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMmhleHVwcGVyID0gcmZjNDY0OCh7XG4gICAgcHJlZml4OiAnVicsXG4gICAgbmFtZTogJ2Jhc2UzMmhleHVwcGVyJyxcbiAgICBhbHBoYWJldDogJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWJyxcbiAgICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMyaGV4cGFkID0gcmZjNDY0OCh7XG4gICAgcHJlZml4OiAndCcsXG4gICAgbmFtZTogJ2Jhc2UzMmhleHBhZCcsXG4gICAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dj0nLFxuICAgIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJoZXhwYWR1cHBlciA9IHJmYzQ2NDgoe1xuICAgIHByZWZpeDogJ1QnLFxuICAgIG5hbWU6ICdiYXNlMzJoZXhwYWR1cHBlcicsXG4gICAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVj0nLFxuICAgIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJ6ID0gcmZjNDY0OCh7XG4gICAgcHJlZml4OiAnaCcsXG4gICAgbmFtZTogJ2Jhc2UzMnonLFxuICAgIGFscGhhYmV0OiAneWJuZHJmZzhlamttY3BxeG90MXV3aXN6YTM0NWg3NjknLFxuICAgIGJpdHNQZXJDaGFyOiA1XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UzMi5qcy5tYXAiXSwibmFtZXMiOlsicmZjNDY0OCIsImJhc2UzMiIsInByZWZpeCIsIm5hbWUiLCJhbHBoYWJldCIsImJpdHNQZXJDaGFyIiwiYmFzZTMydXBwZXIiLCJiYXNlMzJwYWQiLCJiYXNlMzJwYWR1cHBlciIsImJhc2UzMmhleCIsImJhc2UzMmhleHVwcGVyIiwiYmFzZTMyaGV4cGFkIiwiYmFzZTMyaGV4cGFkdXBwZXIiLCJiYXNlMzJ6Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/bases/base32.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/bases/base36.js":
/*!*************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/bases/base36.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base36: () => (/* binding */ base36),\n/* harmony export */   base36upper: () => (/* binding */ base36upper)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/../node_modules/multiformats/dist/src/bases/base.js\");\n\nconst base36 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n});\nconst base36upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n}); //# sourceMappingURL=base36.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9iYXNlcy9iYXNlMzYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQzNCLE1BQU1DLFNBQVNELCtDQUFLQSxDQUFDO0lBQ3hCRSxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsVUFBVTtBQUNkLEdBQUc7QUFDSSxNQUFNQyxjQUFjTCwrQ0FBS0EsQ0FBQztJQUM3QkUsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFVBQVU7QUFDZCxHQUFHLENBQ0gsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9iYXNlcy9iYXNlMzYuanM/MTI5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlWCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTM2ID0gYmFzZVgoe1xuICAgIHByZWZpeDogJ2snLFxuICAgIG5hbWU6ICdiYXNlMzYnLFxuICAgIGFscGhhYmV0OiAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xufSk7XG5leHBvcnQgY29uc3QgYmFzZTM2dXBwZXIgPSBiYXNlWCh7XG4gICAgcHJlZml4OiAnSycsXG4gICAgbmFtZTogJ2Jhc2UzNnVwcGVyJyxcbiAgICBhbHBoYWJldDogJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWidcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTM2LmpzLm1hcCJdLCJuYW1lcyI6WyJiYXNlWCIsImJhc2UzNiIsInByZWZpeCIsIm5hbWUiLCJhbHBoYWJldCIsImJhc2UzNnVwcGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/bases/base36.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/bases/base58.js":
/*!*************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/bases/base58.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base58btc: () => (/* binding */ base58btc),\n/* harmony export */   base58flickr: () => (/* binding */ base58flickr)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/../node_modules/multiformats/dist/src/bases/base.js\");\n\nconst base58btc = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n});\nconst base58flickr = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n}); //# sourceMappingURL=base58.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9iYXNlcy9iYXNlNTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQzNCLE1BQU1DLFlBQVlELCtDQUFLQSxDQUFDO0lBQzNCRSxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsVUFBVTtBQUNkLEdBQUc7QUFDSSxNQUFNQyxlQUFlTCwrQ0FBS0EsQ0FBQztJQUM5QkUsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLFVBQVU7QUFDZCxHQUFHLENBQ0gsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9iYXNlcy9iYXNlNTguanM/NGJhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlWCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTU4YnRjID0gYmFzZVgoe1xuICAgIG5hbWU6ICdiYXNlNThidGMnLFxuICAgIHByZWZpeDogJ3onLFxuICAgIGFscGhhYmV0OiAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2U1OGZsaWNrciA9IGJhc2VYKHtcbiAgICBuYW1lOiAnYmFzZTU4ZmxpY2tyJyxcbiAgICBwcmVmaXg6ICdaJyxcbiAgICBhbHBoYWJldDogJzEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSEpLTE1OUFFSU1RVVldYWVonXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U1OC5qcy5tYXAiXSwibmFtZXMiOlsiYmFzZVgiLCJiYXNlNThidGMiLCJuYW1lIiwicHJlZml4IiwiYWxwaGFiZXQiLCJiYXNlNThmbGlja3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/bases/base58.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/bases/interface.js":
/*!****************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/bases/interface.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// Base encoders / decoders just base encode / decode between binary and\n// textual representation. They are unaware of multibase.\n //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9iYXNlcy9pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLHdFQUF3RTtBQUN4RSx5REFBeUQ7QUFDL0MsQ0FDVixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2Rpc3Qvc3JjL2Jhc2VzL2ludGVyZmFjZS5qcz83MmMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2UgZW5jb2RlcnMgLyBkZWNvZGVycyBqdXN0IGJhc2UgZW5jb2RlIC8gZGVjb2RlIGJldHdlZW4gYmluYXJ5IGFuZFxuLy8gdGV4dHVhbCByZXByZXNlbnRhdGlvbi4gVGhleSBhcmUgdW5hd2FyZSBvZiBtdWx0aWJhc2UuXG5leHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/bases/interface.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/block/interface.js":
/*!****************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/block/interface.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9ibG9jay9pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IjtBQUFVLENBQ1YscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9ibG9jay9pbnRlcmZhY2UuanM/ZjEyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/block/interface.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/bytes.js":
/*!******************************************************!*\
  !*** ../node_modules/multiformats/dist/src/bytes.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   isBinary: () => (/* binding */ isBinary),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\nconst empty = new Uint8Array(0);\nfunction toHex(d) {\n    return d.reduce((hex, byte)=>hex + byte.toString(16).padStart(2, \"0\"), \"\");\n}\nfunction fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty;\n}\nfunction equals(aa, bb) {\n    if (aa === bb) {\n        return true;\n    }\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for(let ii = 0; ii < aa.byteLength; ii++){\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === \"Uint8Array\") {\n        return o;\n    }\n    if (o instanceof ArrayBuffer) {\n        return new Uint8Array(o);\n    }\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error(\"Unknown type, must be binary type\");\n}\nfunction isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nfunction fromString(str) {\n    return new TextEncoder().encode(str);\n}\nfunction toString(b) {\n    return new TextDecoder().decode(b);\n} //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9ieXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFPLE1BQU1BLFFBQVEsSUFBSUMsV0FBVyxHQUFHO0FBQ2hDLFNBQVNDLE1BQU1DLENBQUM7SUFDbkIsT0FBT0EsRUFBRUMsTUFBTSxDQUFDLENBQUNDLEtBQUtDLE9BQVNELE1BQU1DLEtBQUtDLFFBQVEsQ0FBQyxJQUFJQyxRQUFRLENBQUMsR0FBRyxNQUFNO0FBQzdFO0FBQ08sU0FBU0MsUUFBUUosR0FBRztJQUN2QixNQUFNSyxRQUFRTCxJQUFJTSxLQUFLLENBQUM7SUFDeEIsT0FBT0QsU0FBUyxPQUFPLElBQUlULFdBQVdTLE1BQU1FLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0MsU0FBU0QsR0FBRyxRQUFRYjtBQUM3RTtBQUNPLFNBQVNlLE9BQU9DLEVBQUUsRUFBRUMsRUFBRTtJQUN6QixJQUFJRCxPQUFPQyxJQUFJO1FBQ1gsT0FBTztJQUNYO0lBQ0EsSUFBSUQsR0FBR0UsVUFBVSxLQUFLRCxHQUFHQyxVQUFVLEVBQUU7UUFDakMsT0FBTztJQUNYO0lBQ0EsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtILEdBQUdFLFVBQVUsRUFBRUMsS0FBTTtRQUN2QyxJQUFJSCxFQUFFLENBQUNHLEdBQUcsS0FBS0YsRUFBRSxDQUFDRSxHQUFHLEVBQUU7WUFDbkIsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTQyxPQUFPQyxDQUFDO0lBQ3BCLElBQUlBLGFBQWFwQixjQUFjb0IsRUFBRUMsV0FBVyxDQUFDQyxJQUFJLEtBQUssY0FBYztRQUNoRSxPQUFPRjtJQUNYO0lBQ0EsSUFBSUEsYUFBYUcsYUFBYTtRQUMxQixPQUFPLElBQUl2QixXQUFXb0I7SUFDMUI7SUFDQSxJQUFJRyxZQUFZQyxNQUFNLENBQUNKLElBQUk7UUFDdkIsT0FBTyxJQUFJcEIsV0FBV29CLEVBQUVLLE1BQU0sRUFBRUwsRUFBRU0sVUFBVSxFQUFFTixFQUFFSCxVQUFVO0lBQzlEO0lBQ0EsTUFBTSxJQUFJVSxNQUFNO0FBQ3BCO0FBQ08sU0FBU0MsU0FBU1IsQ0FBQztJQUN0QixPQUFPQSxhQUFhRyxlQUFlQSxZQUFZQyxNQUFNLENBQUNKO0FBQzFEO0FBQ08sU0FBU1MsV0FBV0MsR0FBRztJQUMxQixPQUFPLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ0Y7QUFDcEM7QUFDTyxTQUFTeEIsU0FBU00sQ0FBQztJQUN0QixPQUFPLElBQUlxQixjQUFjQyxNQUFNLENBQUN0QjtBQUNwQyxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZGlzdC9zcmMvYnl0ZXMuanM/YzNlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1wdHkgPSBuZXcgVWludDhBcnJheSgwKTtcbmV4cG9ydCBmdW5jdGlvbiB0b0hleChkKSB7XG4gICAgcmV0dXJuIGQucmVkdWNlKChoZXgsIGJ5dGUpID0+IGhleCArIGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyksICcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSGV4KGhleCkge1xuICAgIGNvbnN0IGhleGVzID0gaGV4Lm1hdGNoKC8uLi9nKTtcbiAgICByZXR1cm4gaGV4ZXMgIT0gbnVsbCA/IG5ldyBVaW50OEFycmF5KGhleGVzLm1hcChiID0+IHBhcnNlSW50KGIsIDE2KSkpIDogZW1wdHk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGFhLCBiYikge1xuICAgIGlmIChhYSA9PT0gYmIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChhYS5ieXRlTGVuZ3RoICE9PSBiYi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGFhLmJ5dGVMZW5ndGg7IGlpKyspIHtcbiAgICAgICAgaWYgKGFhW2lpXSAhPT0gYmJbaWldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gY29lcmNlKG8pIHtcbiAgICBpZiAobyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgby5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpIHtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgfVxuICAgIGlmIChvIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG8pO1xuICAgIH1cbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KG8pKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShvLmJ1ZmZlciwgby5ieXRlT2Zmc2V0LCBvLmJ5dGVMZW5ndGgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZSwgbXVzdCBiZSBiaW5hcnkgdHlwZScpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQmluYXJ5KG8pIHtcbiAgICByZXR1cm4gbyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyLmlzVmlldyhvKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0cikge1xuICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZyhiKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJlbXB0eSIsIlVpbnQ4QXJyYXkiLCJ0b0hleCIsImQiLCJyZWR1Y2UiLCJoZXgiLCJieXRlIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImZyb21IZXgiLCJoZXhlcyIsIm1hdGNoIiwibWFwIiwiYiIsInBhcnNlSW50IiwiZXF1YWxzIiwiYWEiLCJiYiIsImJ5dGVMZW5ndGgiLCJpaSIsImNvZXJjZSIsIm8iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJFcnJvciIsImlzQmluYXJ5IiwiZnJvbVN0cmluZyIsInN0ciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/bytes.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/cid.js":
/*!****************************************************!*\
  !*** ../node_modules/multiformats/dist/src/cid.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: () => (/* binding */ CID),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   fromJSON: () => (/* binding */ fromJSON),\n/* harmony export */   toJSON: () => (/* binding */ toJSON)\n/* harmony export */ });\n/* harmony import */ var _bases_base32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bases/base32.js */ \"(rsc)/../node_modules/multiformats/dist/src/bases/base32.js\");\n/* harmony import */ var _bases_base36_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bases/base36.js */ \"(rsc)/../node_modules/multiformats/dist/src/bases/base36.js\");\n/* harmony import */ var _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bases/base58.js */ \"(rsc)/../node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes.js */ \"(rsc)/../node_modules/multiformats/dist/src/bytes.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hashes/digest.js */ \"(rsc)/../node_modules/multiformats/dist/src/hashes/digest.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./varint.js */ \"(rsc)/../node_modules/multiformats/dist/src/varint.js\");\n/* harmony import */ var _link_interface_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./link/interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/link/interface.js\");\n\n\n\n\n\n\n// This way TS will also expose all the types from module\n\nfunction format(link, base) {\n    const { bytes, version } = link;\n    switch(version){\n        case 0:\n            return toStringV0(bytes, baseCache(link), base ?? _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.encoder);\n        default:\n            return toStringV1(bytes, baseCache(link), base ?? _bases_base32_js__WEBPACK_IMPORTED_MODULE_0__.base32.encoder);\n    }\n}\nfunction toJSON(link) {\n    return {\n        \"/\": format(link)\n    };\n}\nfunction fromJSON(json) {\n    return CID.parse(json[\"/\"]);\n}\nconst cache = new WeakMap();\nfunction baseCache(cid) {\n    const baseCache = cache.get(cid);\n    if (baseCache == null) {\n        const baseCache = new Map();\n        cache.set(cid, baseCache);\n        return baseCache;\n    }\n    return baseCache;\n}\nlet prop;\nclass CID {\n    static{\n        prop = Symbol.toStringTag;\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param multihash - (Multi)hash of the of the content.\n     */ constructor(version, code, multihash, bytes){\n        this[prop] = \"CID\";\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        // flag to serializers that this is a CID and\n        // should be treated specially\n        this[\"/\"] = bytes;\n    }\n    /**\n     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n     * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n     *\n     * @deprecated\n     */ get asCID() {\n        return this;\n    }\n    // ArrayBufferView\n    get byteOffset() {\n        return this.bytes.byteOffset;\n    }\n    // ArrayBufferView\n    get byteLength() {\n        return this.bytes.byteLength;\n    }\n    toV0() {\n        switch(this.version){\n            case 0:\n                {\n                    return this;\n                }\n            case 1:\n                {\n                    const { code, multihash } = this;\n                    if (code !== DAG_PB_CODE) {\n                        throw new Error(\"Cannot convert a non dag-pb CID to CIDv0\");\n                    }\n                    // sha2-256\n                    if (multihash.code !== SHA_256_CODE) {\n                        throw new Error(\"Cannot convert non sha2-256 multihash CID to CIDv0\");\n                    }\n                    return CID.createV0(multihash);\n                }\n            default:\n                {\n                    throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n                }\n        }\n    }\n    toV1() {\n        switch(this.version){\n            case 0:\n                {\n                    const { code, digest } = this.multihash;\n                    const multihash = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__.create(code, digest);\n                    return CID.createV1(this.code, multihash);\n                }\n            case 1:\n                {\n                    return this;\n                }\n            default:\n                {\n                    throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);\n                }\n        }\n    }\n    equals(other) {\n        return CID.equals(this, other);\n    }\n    static equals(self, other) {\n        const unknown = other;\n        return unknown != null && self.code === unknown.code && self.version === unknown.version && _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__.equals(self.multihash, unknown.multihash);\n    }\n    toString(base) {\n        return format(this, base);\n    }\n    toJSON() {\n        return {\n            \"/\": format(this)\n        };\n    }\n    link() {\n        return this;\n    }\n    // Legacy\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return `CID(${this.toString()})`;\n    }\n    /**\n     * Takes any input `value` and returns a `CID` instance if it was\n     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n     * it will return value back. If `value` is not instance of this CID\n     * class, but is compatible CID it will return new instance of this\n     * `CID` class. Otherwise returns null.\n     *\n     * This allows two different incompatible versions of CID library to\n     * co-exist and interop as long as binary interface is compatible.\n     */ static asCID(input) {\n        if (input == null) {\n            return null;\n        }\n        const value = input;\n        if (value instanceof CID) {\n            // If value is instance of CID then we're all set.\n            return value;\n        } else if (value[\"/\"] != null && value[\"/\"] === value.bytes || value.asCID === value) {\n            // If value isn't instance of this CID class but `this.asCID === this` or\n            // `value['/'] === value.bytes` is true it is CID instance coming from a\n            // different implementation (diff version or duplicate). In that case we\n            // rebase it to this `CID` implementation so caller is guaranteed to get\n            // instance with expected API.\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));\n        } else if (value[cidSymbol] === true) {\n            // If value is a CID from older implementation that used to be tagged via\n            // symbol we still rebase it to the this `CID` implementation by\n            // delegating that to a constructor.\n            const { version, multihash, code } = value;\n            const digest = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__.decode(multihash);\n            return CID.create(version, code, digest);\n        } else {\n            // Otherwise value is not a CID (or an incompatible version of it) in\n            // which case we return `null`.\n            return null;\n        }\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param digest - (Multi)hash of the of the content.\n     */ static create(version, code, digest) {\n        if (typeof code !== \"number\") {\n            throw new Error(\"String codecs are no longer supported\");\n        }\n        if (!(digest.bytes instanceof Uint8Array)) {\n            throw new Error(\"Invalid digest\");\n        }\n        switch(version){\n            case 0:\n                {\n                    if (code !== DAG_PB_CODE) {\n                        throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n                    } else {\n                        return new CID(version, code, digest, digest.bytes);\n                    }\n                }\n            case 1:\n                {\n                    const bytes = encodeCID(version, code, digest.bytes);\n                    return new CID(version, code, digest, bytes);\n                }\n            default:\n                {\n                    throw new Error(\"Invalid version\");\n                }\n        }\n    }\n    /**\n     * Simplified version of `create` for CIDv0.\n     */ static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    /**\n     * Simplified version of `create` for CIDv1.\n     *\n     * @param code - Content encoding format code.\n     * @param digest - Multihash of the content.\n     */ static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    /**\n     * Decoded a CID from its binary representation. The byte array must contain\n     * only the CID with no additional bytes.\n     *\n     * An error will be thrown if the bytes provided do not contain a valid\n     * binary representation of a CID.\n     */ static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length !== 0) {\n            throw new Error(\"Incorrect length\");\n        }\n        return cid;\n    }\n    /**\n     * Decoded a CID from its binary representation at the beginning of a byte\n     * array.\n     *\n     * Returns an array with the first element containing the CID and the second\n     * element containing the remainder of the original byte array. The remainder\n     * will be a zero-length byte array if the provided bytes only contained a\n     * binary CID representation.\n     */ static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.coerce)(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error(\"Incorrect length\");\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n        return [\n            cid,\n            bytes.subarray(specs.size)\n        ];\n    }\n    /**\n     * Inspect the initial bytes of a CID to determine its properties.\n     *\n     * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n     * bytes but for larger multicodec code values and larger multihash digest\n     * lengths these varints can be quite large. It is recommended that at least\n     * 10 bytes be made available in the `initialBytes` argument for a complete\n     * inspection.\n     */ static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = ()=>{\n            const [i, length] = _varint_js__WEBPACK_IMPORTED_MODULE_5__.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            // CIDv0\n            version = 0;\n            offset = 0;\n        } else {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(`Invalid CID version ${version}`);\n        }\n        const prefixSize = offset;\n        const multihashCode = next(); // multihash code\n        const digestSize = next(); // multihash length\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return {\n            version,\n            codec,\n            multihashCode,\n            digestSize,\n            multihashSize,\n            size\n        };\n    }\n    /**\n     * Takes cid in a string representation and creates an instance. If `base`\n     * decoder is not provided will use a default from the configuration. It will\n     * throw an error if encoding of the CID is not compatible with supplied (or\n     * a default decoder).\n     */ static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        if (cid.version === 0 && source[0] !== \"Q\") {\n            throw Error(\"Version 0 CID string must not include multibase prefix\");\n        }\n        // Cache string representation to avoid computing it on `this.toString()`\n        baseCache(cid).set(prefix, source);\n        return cid;\n    }\n}\nfunction parseCIDtoBytes(source, base) {\n    switch(source[0]){\n        // CIDv0 is parsed differently\n        case \"Q\":\n            {\n                const decoder = base ?? _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n                return [\n                    _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n                    decoder.decode(`${_bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix}${source}`)\n                ];\n            }\n        case _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix:\n            {\n                const decoder = base ?? _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n                return [\n                    _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n                    decoder.decode(source)\n                ];\n            }\n        case _bases_base32_js__WEBPACK_IMPORTED_MODULE_0__.base32.prefix:\n            {\n                const decoder = base ?? _bases_base32_js__WEBPACK_IMPORTED_MODULE_0__.base32;\n                return [\n                    _bases_base32_js__WEBPACK_IMPORTED_MODULE_0__.base32.prefix,\n                    decoder.decode(source)\n                ];\n            }\n        case _bases_base36_js__WEBPACK_IMPORTED_MODULE_1__.base36.prefix:\n            {\n                const decoder = base ?? _bases_base36_js__WEBPACK_IMPORTED_MODULE_1__.base36;\n                return [\n                    _bases_base36_js__WEBPACK_IMPORTED_MODULE_1__.base36.prefix,\n                    decoder.decode(source)\n                ];\n            }\n        default:\n            {\n                if (base == null) {\n                    throw Error(\"To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided\");\n                }\n                return [\n                    source[0],\n                    base.decode(source)\n                ];\n            }\n    }\n}\nfunction toStringV0(bytes, cache, base) {\n    const { prefix } = base;\n    if (prefix !== _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix) {\n        throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    } else {\n        return cid;\n    }\n}\nfunction toStringV1(bytes, cache, base) {\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    } else {\n        return cid;\n    }\n}\nconst DAG_PB_CODE = 0x70;\nconst SHA_256_CODE = 0x12;\nfunction encodeCID(version, code, multihash) {\n    const codeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_5__.encodingLength(version);\n    const hashOffset = codeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_5__.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    _varint_js__WEBPACK_IMPORTED_MODULE_5__.encodeTo(version, bytes, 0);\n    _varint_js__WEBPACK_IMPORTED_MODULE_5__.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n}\nconst cidSymbol = Symbol.for(\"@ipld/js-cid/CID\"); //# sourceMappingURL=cid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/cid.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/codecs/interface.js":
/*!*****************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/codecs/interface.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9jb2RlY3MvaW50ZXJmYWNlLmpzIiwibWFwcGluZ3MiOiI7QUFBVSxDQUNWLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZGlzdC9zcmMvY29kZWNzL2ludGVyZmFjZS5qcz9lZTY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/codecs/interface.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/codecs/raw.js":
/*!***********************************************************!*\
  !*** ../node_modules/multiformats/dist/src/codecs/raw.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   name: () => (/* binding */ name)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"(rsc)/../node_modules/multiformats/dist/src/bytes.js\");\n\nconst name = \"raw\";\nconst code = 0x55;\nfunction encode(node) {\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(node);\n}\nfunction decode(data) {\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(data);\n} //# sourceMappingURL=raw.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9jb2RlY3MvcmF3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQzlCLE1BQU1DLE9BQU8sTUFBTTtBQUNuQixNQUFNQyxPQUFPLEtBQUs7QUFDbEIsU0FBU0MsT0FBT0MsSUFBSTtJQUN2QixPQUFPSixpREFBTUEsQ0FBQ0k7QUFDbEI7QUFDTyxTQUFTQyxPQUFPQyxJQUFJO0lBQ3ZCLE9BQU9OLGlEQUFNQSxDQUFDTTtBQUNsQixFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZGlzdC9zcmMvY29kZWNzL3Jhdy5qcz85NzIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZSB9IGZyb20gJy4uL2J5dGVzLmpzJztcbmV4cG9ydCBjb25zdCBuYW1lID0gJ3Jhdyc7XG5leHBvcnQgY29uc3QgY29kZSA9IDB4NTU7XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gY29lcmNlKG5vZGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShkYXRhKSB7XG4gICAgcmV0dXJuIGNvZXJjZShkYXRhKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhdy5qcy5tYXAiXSwibmFtZXMiOlsiY29lcmNlIiwibmFtZSIsImNvZGUiLCJlbmNvZGUiLCJub2RlIiwiZGVjb2RlIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/codecs/raw.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/hashes/digest.js":
/*!**************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/hashes/digest.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Digest: () => (/* binding */ Digest),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   hasCode: () => (/* binding */ hasCode)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"(rsc)/../node_modules/multiformats/dist/src/bytes.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../varint.js */ \"(rsc)/../node_modules/multiformats/dist/src/varint.js\");\n\n\n/**\n * Creates a multihash digest.\n */ function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(code);\n    const digestOffset = sizeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(code, bytes, 0);\n    _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */ function decode(multihash) {\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(multihash);\n    const [code, sizeOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes);\n    const [size, digestOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error(\"Incorrect length\");\n    }\n    return new Digest(code, size, digest, bytes);\n}\nfunction equals(a, b) {\n    if (a === b) {\n        return true;\n    } else {\n        const data = b;\n        return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.equals)(a.bytes, data.bytes);\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */ class Digest {\n    /**\n     * Creates a multihash digest.\n     */ constructor(code, size, digest, bytes){\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n/**\n * Used to check that the passed multihash has the passed code\n */ function hasCode(digest, code) {\n    return digest.code === code;\n} //# sourceMappingURL=digest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9oYXNoZXMvZGlnZXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMkQ7QUFDcEI7QUFDdkM7O0NBRUMsR0FDTSxTQUFTSSxPQUFPQyxJQUFJLEVBQUVDLE1BQU07SUFDL0IsTUFBTUMsT0FBT0QsT0FBT0UsVUFBVTtJQUM5QixNQUFNQyxhQUFhTixzREFBcUIsQ0FBQ0U7SUFDekMsTUFBTU0sZUFBZUYsYUFBYU4sc0RBQXFCLENBQUNJO0lBQ3hELE1BQU1LLFFBQVEsSUFBSUMsV0FBV0YsZUFBZUo7SUFDNUNKLGdEQUFlLENBQUNFLE1BQU1PLE9BQU87SUFDN0JULGdEQUFlLENBQUNJLE1BQU1LLE9BQU9IO0lBQzdCRyxNQUFNRyxHQUFHLENBQUNULFFBQVFLO0lBQ2xCLE9BQU8sSUFBSUssT0FBT1gsTUFBTUUsTUFBTUQsUUFBUU07QUFDMUM7QUFDQTs7Q0FFQyxHQUNNLFNBQVNLLE9BQU9DLFNBQVM7SUFDNUIsTUFBTU4sUUFBUVosaURBQU1BLENBQUNrQjtJQUNyQixNQUFNLENBQUNiLE1BQU1JLFdBQVcsR0FBR04sOENBQWEsQ0FBQ1M7SUFDekMsTUFBTSxDQUFDTCxNQUFNSSxhQUFhLEdBQUdSLDhDQUFhLENBQUNTLE1BQU1PLFFBQVEsQ0FBQ1Y7SUFDMUQsTUFBTUgsU0FBU00sTUFBTU8sUUFBUSxDQUFDVixhQUFhRTtJQUMzQyxJQUFJTCxPQUFPRSxVQUFVLEtBQUtELE1BQU07UUFDNUIsTUFBTSxJQUFJYSxNQUFNO0lBQ3BCO0lBQ0EsT0FBTyxJQUFJSixPQUFPWCxNQUFNRSxNQUFNRCxRQUFRTTtBQUMxQztBQUNPLFNBQVNYLE9BQU9vQixDQUFDLEVBQUVDLENBQUM7SUFDdkIsSUFBSUQsTUFBTUMsR0FBRztRQUNULE9BQU87SUFDWCxPQUNLO1FBQ0QsTUFBTUMsT0FBT0Q7UUFDYixPQUFRRCxFQUFFaEIsSUFBSSxLQUFLa0IsS0FBS2xCLElBQUksSUFDeEJnQixFQUFFZCxJQUFJLEtBQUtnQixLQUFLaEIsSUFBSSxJQUNwQmdCLEtBQUtYLEtBQUssWUFBWUMsY0FDdEJYLGlEQUFVQSxDQUFDbUIsRUFBRVQsS0FBSyxFQUFFVyxLQUFLWCxLQUFLO0lBQ3RDO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNSTtJQUtUOztLQUVDLEdBQ0RRLFlBQVluQixJQUFJLEVBQUVFLElBQUksRUFBRUQsTUFBTSxFQUFFTSxLQUFLLENBQUU7UUFDbkMsSUFBSSxDQUFDUCxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDRSxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDTSxLQUFLLEdBQUdBO0lBQ2pCO0FBQ0o7QUFDQTs7Q0FFQyxHQUNNLFNBQVNhLFFBQVFuQixNQUFNLEVBQUVELElBQUk7SUFDaEMsT0FBT0MsT0FBT0QsSUFBSSxLQUFLQTtBQUMzQixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZGlzdC9zcmMvaGFzaGVzL2RpZ2VzdC5qcz8zOWIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZSwgZXF1YWxzIGFzIGVxdWFsQnl0ZXMgfSBmcm9tICcuLi9ieXRlcy5qcyc7XG5pbXBvcnQgKiBhcyB2YXJpbnQgZnJvbSAnLi4vdmFyaW50LmpzJztcbi8qKlxuICogQ3JlYXRlcyBhIG11bHRpaGFzaCBkaWdlc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoY29kZSwgZGlnZXN0KSB7XG4gICAgY29uc3Qgc2l6ZSA9IGRpZ2VzdC5ieXRlTGVuZ3RoO1xuICAgIGNvbnN0IHNpemVPZmZzZXQgPSB2YXJpbnQuZW5jb2RpbmdMZW5ndGgoY29kZSk7XG4gICAgY29uc3QgZGlnZXN0T2Zmc2V0ID0gc2l6ZU9mZnNldCArIHZhcmludC5lbmNvZGluZ0xlbmd0aChzaXplKTtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGRpZ2VzdE9mZnNldCArIHNpemUpO1xuICAgIHZhcmludC5lbmNvZGVUbyhjb2RlLCBieXRlcywgMCk7XG4gICAgdmFyaW50LmVuY29kZVRvKHNpemUsIGJ5dGVzLCBzaXplT2Zmc2V0KTtcbiAgICBieXRlcy5zZXQoZGlnZXN0LCBkaWdlc3RPZmZzZXQpO1xuICAgIHJldHVybiBuZXcgRGlnZXN0KGNvZGUsIHNpemUsIGRpZ2VzdCwgYnl0ZXMpO1xufVxuLyoqXG4gKiBUdXJucyBieXRlcyByZXByZXNlbnRhdGlvbiBvZiBtdWx0aWhhc2ggZGlnZXN0IGludG8gYW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUobXVsdGloYXNoKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBjb2VyY2UobXVsdGloYXNoKTtcbiAgICBjb25zdCBbY29kZSwgc2l6ZU9mZnNldF0gPSB2YXJpbnQuZGVjb2RlKGJ5dGVzKTtcbiAgICBjb25zdCBbc2l6ZSwgZGlnZXN0T2Zmc2V0XSA9IHZhcmludC5kZWNvZGUoYnl0ZXMuc3ViYXJyYXkoc2l6ZU9mZnNldCkpO1xuICAgIGNvbnN0IGRpZ2VzdCA9IGJ5dGVzLnN1YmFycmF5KHNpemVPZmZzZXQgKyBkaWdlc3RPZmZzZXQpO1xuICAgIGlmIChkaWdlc3QuYnl0ZUxlbmd0aCAhPT0gc2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29ycmVjdCBsZW5ndGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEaWdlc3QoY29kZSwgc2l6ZSwgZGlnZXN0LCBieXRlcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBiO1xuICAgICAgICByZXR1cm4gKGEuY29kZSA9PT0gZGF0YS5jb2RlICYmXG4gICAgICAgICAgICBhLnNpemUgPT09IGRhdGEuc2l6ZSAmJlxuICAgICAgICAgICAgZGF0YS5ieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiZcbiAgICAgICAgICAgIGVxdWFsQnl0ZXMoYS5ieXRlcywgZGF0YS5ieXRlcykpO1xuICAgIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyBhIG11bHRpaGFzaCBkaWdlc3Qgd2hpY2ggY2FycmllcyBpbmZvcm1hdGlvbiBhYm91dCB0aGVcbiAqIGhhc2hpbmcgYWxnb3JpdGhtIGFuZCBhbiBhY3R1YWwgaGFzaCBkaWdlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBEaWdlc3Qge1xuICAgIGNvZGU7XG4gICAgc2l6ZTtcbiAgICBkaWdlc3Q7XG4gICAgYnl0ZXM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG11bHRpaGFzaCBkaWdlc3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29kZSwgc2l6ZSwgZGlnZXN0LCBieXRlcykge1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLmRpZ2VzdCA9IGRpZ2VzdDtcbiAgICAgICAgdGhpcy5ieXRlcyA9IGJ5dGVzO1xuICAgIH1cbn1cbi8qKlxuICogVXNlZCB0byBjaGVjayB0aGF0IHRoZSBwYXNzZWQgbXVsdGloYXNoIGhhcyB0aGUgcGFzc2VkIGNvZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0NvZGUoZGlnZXN0LCBjb2RlKSB7XG4gICAgcmV0dXJuIGRpZ2VzdC5jb2RlID09PSBjb2RlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlnZXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJjb2VyY2UiLCJlcXVhbHMiLCJlcXVhbEJ5dGVzIiwidmFyaW50IiwiY3JlYXRlIiwiY29kZSIsImRpZ2VzdCIsInNpemUiLCJieXRlTGVuZ3RoIiwic2l6ZU9mZnNldCIsImVuY29kaW5nTGVuZ3RoIiwiZGlnZXN0T2Zmc2V0IiwiYnl0ZXMiLCJVaW50OEFycmF5IiwiZW5jb2RlVG8iLCJzZXQiLCJEaWdlc3QiLCJkZWNvZGUiLCJtdWx0aWhhc2giLCJzdWJhcnJheSIsIkVycm9yIiwiYSIsImIiLCJkYXRhIiwiY29uc3RydWN0b3IiLCJoYXNDb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/hashes/digest.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/hashes/hasher.js":
/*!**************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/hashes/hasher.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hasher: () => (/* binding */ Hasher),\n/* harmony export */   from: () => (/* binding */ from)\n/* harmony export */ });\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./digest.js */ \"(rsc)/../node_modules/multiformats/dist/src/hashes/digest.js\");\n\nfunction from({ name, code, encode }) {\n    return new Hasher(name, code, encode);\n}\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */ class Hasher {\n    constructor(name, code, encode){\n        this.name = name;\n        this.code = code;\n        this.encode = encode;\n    }\n    digest(input) {\n        if (input instanceof Uint8Array) {\n            const result = this.encode(input);\n            return result instanceof Uint8Array ? _digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, result) : result.then((digest)=>_digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, digest));\n        } else {\n            throw Error(\"Unknown type, must be binary type\");\n        /* c8 ignore next 1 */ }\n    }\n} //# sourceMappingURL=hasher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9oYXNoZXMvaGFzaGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUMvQixTQUFTQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUU7SUFDdkMsT0FBTyxJQUFJQyxPQUFPSCxNQUFNQyxNQUFNQztBQUNsQztBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DO0lBSVRDLFlBQVlKLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNLENBQUU7UUFDNUIsSUFBSSxDQUFDRixJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxNQUFNLEdBQUdBO0lBQ2xCO0lBQ0FHLE9BQU9DLEtBQUssRUFBRTtRQUNWLElBQUlBLGlCQUFpQkMsWUFBWTtZQUM3QixNQUFNQyxTQUFTLElBQUksQ0FBQ04sTUFBTSxDQUFDSTtZQUMzQixPQUFPRSxrQkFBa0JELGFBQ25CVCw4Q0FBYSxDQUFDLElBQUksQ0FBQ0csSUFBSSxFQUFFTyxVQUV6QkEsT0FBT0UsSUFBSSxDQUFDTCxDQUFBQSxTQUFVUCw4Q0FBYSxDQUFDLElBQUksQ0FBQ0csSUFBSSxFQUFFSTtRQUN6RCxPQUNLO1lBQ0QsTUFBTU0sTUFBTTtRQUNaLG9CQUFvQixHQUN4QjtJQUNKO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2Rpc3Qvc3JjL2hhc2hlcy9oYXNoZXIuanM/ZGIyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBEaWdlc3QgZnJvbSAnLi9kaWdlc3QuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oeyBuYW1lLCBjb2RlLCBlbmNvZGUgfSkge1xuICAgIHJldHVybiBuZXcgSGFzaGVyKG5hbWUsIGNvZGUsIGVuY29kZSk7XG59XG4vKipcbiAqIEhhc2hlciByZXByZXNlbnRzIGEgaGFzaGluZyBhbGdvcml0aG0gaW1wbGVtZW50YXRpb24gdGhhdCBwcm9kdWNlcyBhc1xuICogYE11bHRpaGFzaERpZ2VzdGAuXG4gKi9cbmV4cG9ydCBjbGFzcyBIYXNoZXIge1xuICAgIG5hbWU7XG4gICAgY29kZTtcbiAgICBlbmNvZGU7XG4gICAgY29uc3RydWN0b3IobmFtZSwgY29kZSwgZW5jb2RlKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMuZW5jb2RlID0gZW5jb2RlO1xuICAgIH1cbiAgICBkaWdlc3QoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lbmNvZGUoaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXlcbiAgICAgICAgICAgICAgICA/IERpZ2VzdC5jcmVhdGUodGhpcy5jb2RlLCByZXN1bHQpXG4gICAgICAgICAgICAgICAgLyogYzggaWdub3JlIG5leHQgMSAqL1xuICAgICAgICAgICAgICAgIDogcmVzdWx0LnRoZW4oZGlnZXN0ID0+IERpZ2VzdC5jcmVhdGUodGhpcy5jb2RlLCBkaWdlc3QpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHR5cGUsIG11c3QgYmUgYmluYXJ5IHR5cGUnKTtcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDEgKi9cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2hlci5qcy5tYXAiXSwibmFtZXMiOlsiRGlnZXN0IiwiZnJvbSIsIm5hbWUiLCJjb2RlIiwiZW5jb2RlIiwiSGFzaGVyIiwiY29uc3RydWN0b3IiLCJkaWdlc3QiLCJpbnB1dCIsIlVpbnQ4QXJyYXkiLCJyZXN1bHQiLCJjcmVhdGUiLCJ0aGVuIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/hashes/hasher.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/hashes/interface.js":
/*!*****************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/hashes/interface.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// # Multihash\n //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9oYXNoZXMvaW50ZXJmYWNlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxjQUFjO0FBQ0osQ0FDVixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2Rpc3Qvc3JjL2hhc2hlcy9pbnRlcmZhY2UuanM/MWVlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAjIE11bHRpaGFzaFxuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/hashes/interface.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/index.js":
/*!******************************************************!*\
  !*** ../node_modules/multiformats/dist/src/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: () => (/* reexport safe */ _cid_js__WEBPACK_IMPORTED_MODULE_1__.CID),\n/* harmony export */   bytes: () => (/* reexport module object */ _bytes_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   digest: () => (/* reexport module object */ _hashes_digest_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   hasher: () => (/* reexport module object */ _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   varint: () => (/* reexport module object */ _varint_js__WEBPACK_IMPORTED_MODULE_4__)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(rsc)/../node_modules/multiformats/dist/src/bytes.js\");\n/* harmony import */ var _cid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cid.js */ \"(rsc)/../node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hashes/digest.js */ \"(rsc)/../node_modules/multiformats/dist/src/hashes/digest.js\");\n/* harmony import */ var _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hashes/hasher.js */ \"(rsc)/../node_modules/multiformats/dist/src/hashes/hasher.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./varint.js */ \"(rsc)/../node_modules/multiformats/dist/src/varint.js\");\n/* harmony import */ var _interface_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/interface.js\");\n/**\n * @packageDocumentation\n *\n * This library defines common interfaces and low level building blocks for various interrelated multiformat technologies (multicodec, multihash, multibase, and CID). They can be used to implement custom base encoders / decoders / codecs, codec encoders /decoders and multihash hashers that comply to the interface that layers above assume.\n *\n * This library provides implementations for most basics and many others can be found in linked repositories.\n *\n * ```TypeScript\n * import { CID } from 'multiformats/cid'\n * import * as json from 'multiformats/codecs/json'\n * import { sha256 } from 'multiformats/hashes/sha2'\n *\n * const bytes = json.encode({ hello: 'world' })\n *\n * const hash = await sha256.digest(bytes)\n * const cid = CID.create(1, json.code, hash)\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n * ```\n *\n * ## Creating Blocks\n *\n * ```TypeScript\n * import * as Block from 'multiformats/block'\n * import * as codec from '@ipld/dag-cbor'\n * import { sha256 as hasher } from 'multiformats/hashes/sha2'\n *\n * const value = { hello: 'world' }\n *\n * // encode a block\n * let block = await Block.encode({ value, codec, hasher })\n *\n * block.value // { hello: 'world' }\n * block.bytes // Uint8Array\n * block.cid   // CID() w/ sha2-256 hash address and dag-cbor codec\n *\n * // you can also decode blocks from their binary state\n * block = await Block.decode({ bytes: block.bytes, codec, hasher })\n *\n * // if you have the cid you can also verify the hash on decode\n * block = await Block.create({ bytes: block.bytes, cid: block.cid, codec, hasher })\n * ```\n *\n * ## Multibase Encoders / Decoders / Codecs\n *\n * CIDs can be serialized to string representation using multibase encoders that implement [`MultibaseEncoder`](https://github.com/multiformats/js-multiformats/blob/master/src/bases/interface.ts) interface. This library provides quite a few implementations that can be imported:\n *\n * ```TypeScript\n * import { base64 } from \"multiformats/bases/base64\"\n * cid.toString(base64.encoder)\n * //> 'mAYAEEiCTojlxqRTl6svwqNJRVM2jCcPBxy+7mRTUfGDzy2gViA'\n * ```\n *\n * Parsing CID string serialized CIDs requires multibase decoder that implements [`MultibaseDecoder`](https://github.com/multiformats/js-multiformats/blob/master/src/bases/interface.ts) interface. This library provides a decoder for every encoder it provides:\n *\n * ```TypeScript\n * CID.parse('mAYAEEiCTojlxqRTl6svwqNJRVM2jCcPBxy+7mRTUfGDzy2gViA', base64.decoder)\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n * ```\n *\n * Dual of multibase encoder & decoder is defined as multibase codec and it exposes\n * them as `encoder` and `decoder` properties. For added convenience codecs also\n * implement `MultibaseEncoder` and `MultibaseDecoder` interfaces so they could be\n * used as either or both:\n *\n * ```TypeScript\n * cid.toString(base64)\n * CID.parse(cid.toString(base64), base64)\n * ```\n *\n * **Note:** CID implementation comes bundled with `base32` and `base58btc`\n * multibase codecs so that CIDs can be base serialized to (version specific)\n * default base encoding and parsed without having to supply base encoders/decoders:\n *\n * ```TypeScript\n * const v1 = CID.parse('bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea')\n * v1.toString()\n * //> 'bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea'\n *\n * const v0 = CID.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n')\n * v0.toString()\n * //> 'QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n'\n * v0.toV1().toString()\n * //> 'bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku'\n * ```\n *\n * ## Multicodec Encoders / Decoders / Codecs\n *\n * This library defines [`BlockEncoder`, `BlockDecoder` and `BlockCodec` interfaces](https://github.com/multiformats/js-multiformats/blob/master/src/codecs/interface.ts).\n * Codec implementations should conform to the `BlockCodec` interface which implements both `BlockEncoder` and `BlockDecoder`.\n * Here is an example implementation of JSON `BlockCodec`.\n *\n * ```TypeScript\n * export const { name, code, encode, decode } = {\n *   name: 'json',\n *   code: 0x0200,\n *   encode: json => new TextEncoder().encode(JSON.stringify(json)),\n *   decode: bytes => JSON.parse(new TextDecoder().decode(bytes))\n * }\n * ```\n *\n * ## Multihash Hashers\n *\n * This library defines [`MultihashHasher` and `MultihashDigest` interfaces](https://github.com/multiformats/js-multiformats/blob/master/src/hashes/interface.ts) and convinient function for implementing them:\n *\n * ```TypeScript\n * import * as hasher from 'multiformats/hashes/hasher'\n *\n * const sha256 = hasher.from({\n *   // As per multiformats table\n *   // https://github.com/multiformats/multicodec/blob/master/table.csv#L9\n *   name: 'sha2-256',\n *   code: 0x12,\n *\n *   encode: (input) => new Uint8Array(crypto.createHash('sha256').update(input).digest())\n * })\n *\n * const hash = await sha256.digest(json.encode({ hello: 'world' }))\n * CID.create(1, json.code, hash)\n *\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n * ```\n *\n * ## Traversal\n *\n * This library contains higher-order functions for traversing graphs of data easily.\n *\n * `walk()` walks through the links in each block of a DAG calling a user-supplied loader function for each one, in depth-first order with no duplicate block visits. The loader should return a `Block` object and can be used to inspect and collect block ordering for a full DAG walk. The loader should `throw` on error, and return `null` if a block should be skipped by `walk()`.\n *\n * ```TypeScript\n * import { walk } from 'multiformats/traversal'\n * import * as Block from 'multiformats/block'\n * import * as codec from 'multiformats/codecs/json'\n * import { sha256 as hasher } from 'multiformats/hashes/sha2'\n *\n * // build a DAG (a single block for this simple example)\n * const value = { hello: 'world' }\n * const block = await Block.encode({ value, codec, hasher })\n * const { cid } = block\n * console.log(cid)\n * //> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n *\n * // create a loader function that also collects CIDs of blocks in\n * // their traversal order\n * const load = (cid, blocks) => async (cid) => {\n *   // fetch a block using its cid\n *   // e.g.: const block = await fetchBlockByCID(cid)\n *   blocks.push(cid)\n *   return block\n * }\n *\n * // collect blocks in this DAG starting from the root `cid`\n * const blocks = []\n * await walk({ cid, load: load(cid, blocks) })\n *\n * console.log(blocks)\n * //> [CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)]\n * ```\n *\n * ## Legacy interface\n *\n * [`blockcodec-to-ipld-format`](https://github.com/ipld/js-blockcodec-to-ipld-format) converts a multiformats [`BlockCodec`](https://github.com/multiformats/js-multiformats/blob/master/src/codecs/interface.ts#L21) into an\n * [`interface-ipld-format`](https://github.com/ipld/interface-ipld-format) for use with the [`ipld`](https://github.com/ipld/ipld) package. This can help bridge IPLD codecs implemented using the structure and interfaces defined here to existing code that assumes, or requires `interface-ipld-format`. This bridge also includes the relevant TypeScript definitions.\n *\n * ## Implementations\n *\n * By default, no base encodings (other than base32 & base58btc), hash functions,\n * or codec implementations are exposed by `multiformats`, you need to\n * import the ones you need yourself.\n *\n * ### Multibase codecs\n *\n * | bases                                                         | import                      | repo                                                                                              |\n * | ------------------------------------------------------------- | --------------------------- | ------------------------------------------------------------------------------------------------- |\n * | `base16`                                                      | `multiformats/bases/base16` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n * | `base32`, `base32pad`, `base32hex`, `base32hexpad`, `base32z` | `multiformats/bases/base32` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n * | `base64`, `base64pad`, `base64url`, `base64urlpad`            | `multiformats/bases/base64` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n * | `base58btc`, `base58flick4`                                   | `multiformats/bases/base58` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n *\n * Other (less useful) bases implemented in [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) include: `base2`, `base8`, `base10`, `base36` and `base256emoji`.\n *\n * ### Multihash hashers\n *\n * | hashes                                                                                                                          | import                         | repo                                                                                                               |\n * | ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------------ |\n * | `sha2-256`, `sha2-512`                                                                                                          | `multiformats/hashes/sha2`     | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/hashes)             |\n * | `sha3-224`, `sha3-256`, `sha3-384`,`sha3-512`, `shake-128`, `shake-256`, `keccak-224`, `keccak-256`, `keccak-384`, `keccak-512` | `@multiformats/sha3`           | [multiformats/js-sha3](https://github.com/multiformats/js-sha3)                                                    |\n * | `identity`                                                                                                                      | `multiformats/hashes/identity` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/hashes/identity.js) |\n * | `murmur3-128`, `murmur3-32`                                                                                                     | `@multiformats/murmur3`        | [multiformats/js-murmur3](https://github.com/multiformats/js-murmur3)                                              |\n * | `blake2b-*`, `blake2s-*`                                                                                                        | `@multiformats/blake2`         | [multiformats/js-blake2](https://github.com/multiformats/js-blake2)                                                |\n *\n * ### IPLD codecs (multicodec)\n *\n * | codec      | import                     | repo                                                                                                   |\n * | ---------- | -------------------------- | ------------------------------------------------------------------------------------------------------ |\n * | `raw`      | `multiformats/codecs/raw`  | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/codecs) |\n * | `json`     | `multiformats/codecs/json` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/codecs) |\n * | `dag-cbor` | `@ipld/dag-cbor`           | [ipld/js-dag-cbor](https://github.com/ipld/js-dag-cbor)                                                |\n * | `dag-json` | `@ipld/dag-json`           | [ipld/js-dag-json](https://github.com/ipld/js-dag-json)                                                |\n * | `dag-pb`   | `@ipld/dag-pb`             | [ipld/js-dag-pb](https://github.com/ipld/js-dag-pb)                                                    |\n * | `dag-jose` | `dag-jose`                 | [ceramicnetwork/js-dag-jose](https://github.com/ceramicnetwork/js-dag-jose)                            |\n */ \n\n\n\n\n// This way TS will also expose all the types from module\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/interface.js":
/*!**********************************************************!*\
  !*** ../node_modules/multiformats/dist/src/interface.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bases_interface_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bases/interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/bases/interface.js\");\n/* harmony import */ var _hashes_interface_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashes/interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/hashes/interface.js\");\n/* harmony import */ var _codecs_interface_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codecs/interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/codecs/interface.js\");\n/* harmony import */ var _link_interface_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./link/interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/link/interface.js\");\n/* harmony import */ var _block_interface_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./block/interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/block/interface.js\");\n\n\n\n\n //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ0M7QUFDQTtBQUNGO0FBQ0MsQ0FDckMscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9pbnRlcmZhY2UuanM/YzRjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Jhc2VzL2ludGVyZmFjZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2hhc2hlcy9pbnRlcmZhY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb2RlY3MvaW50ZXJmYWNlLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbGluay9pbnRlcmZhY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9ibG9jay9pbnRlcmZhY2UuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/interface.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/link.js":
/*!*****************************************************!*\
  !*** ../node_modules/multiformats/dist/src/link.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   createLegacy: () => (/* binding */ createLegacy),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   format: () => (/* reexport safe */ _cid_js__WEBPACK_IMPORTED_MODULE_0__.format),\n/* harmony export */   fromJSON: () => (/* reexport safe */ _cid_js__WEBPACK_IMPORTED_MODULE_0__.fromJSON),\n/* harmony export */   isLink: () => (/* binding */ isLink),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   toJSON: () => (/* reexport safe */ _cid_js__WEBPACK_IMPORTED_MODULE_0__.toJSON)\n/* harmony export */ });\n/* harmony import */ var _cid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cid.js */ \"(rsc)/../node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var _link_interface_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./link/interface.js */ \"(rsc)/../node_modules/multiformats/dist/src/link/interface.js\");\n\n// This way TS will also expose all the types from module\n\nconst DAG_PB_CODE = 0x70;\n// eslint-disable-next-line\nconst SHA_256_CODE = 0x12;\n/**\n * Simplified version of `create` for CIDv0.\n */ function createLegacy(digest) {\n    return _cid_js__WEBPACK_IMPORTED_MODULE_0__.CID.create(0, DAG_PB_CODE, digest);\n}\n/**\n * Simplified version of `create` for CIDv1.\n *\n * @param code - Content encoding format code.\n * @param digest - Miltihash of the content.\n */ function create(code, digest) {\n    return _cid_js__WEBPACK_IMPORTED_MODULE_0__.CID.create(1, code, digest);\n}\n/**\n * Type predicate returns true if value is the link.\n */ function isLink(value) {\n    if (value == null) {\n        return false;\n    }\n    const withSlash = value;\n    if (withSlash[\"/\"] != null && withSlash[\"/\"] === withSlash.bytes) {\n        return true;\n    }\n    const withAsCID = value;\n    if (withAsCID.asCID === value) {\n        return true;\n    }\n    return false;\n}\n/**\n * Takes cid in a string representation and creates an instance. If `base`\n * decoder is not provided will use a default from the configuration. It will\n * throw an error if encoding of the CID is not compatible with supplied (or\n * a default decoder).\n */ function parse(source, base) {\n    return _cid_js__WEBPACK_IMPORTED_MODULE_0__.CID.parse(source, base);\n}\n\n/**\n * Decoded a CID from its binary representation. The byte array must contain\n * only the CID with no additional bytes.\n *\n * An error will be thrown if the bytes provided do not contain a valid\n * binary representation of a CID.\n */ function decode(bytes) {\n    return _cid_js__WEBPACK_IMPORTED_MODULE_0__.CID.decode(bytes);\n} //# sourceMappingURL=link.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9saW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBeUQ7QUFDekQseURBQXlEO0FBQ3JCO0FBQ3BDLE1BQU1JLGNBQWM7QUFDcEIsMkJBQTJCO0FBQzNCLE1BQU1DLGVBQWU7QUFDckI7O0NBRUMsR0FDTSxTQUFTQyxhQUFhQyxNQUFNO0lBQy9CLE9BQU9QLHdDQUFHQSxDQUFDUSxNQUFNLENBQUMsR0FBR0osYUFBYUc7QUFDdEM7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLE9BQU9DLElBQUksRUFBRUYsTUFBTTtJQUMvQixPQUFPUCx3Q0FBR0EsQ0FBQ1EsTUFBTSxDQUFDLEdBQUdDLE1BQU1GO0FBQy9CO0FBQ0E7O0NBRUMsR0FDTSxTQUFTRyxPQUFPQyxLQUFLO0lBQ3hCLElBQUlBLFNBQVMsTUFBTTtRQUNmLE9BQU87SUFDWDtJQUNBLE1BQU1DLFlBQVlEO0lBQ2xCLElBQUlDLFNBQVMsQ0FBQyxJQUFJLElBQUksUUFBUUEsU0FBUyxDQUFDLElBQUksS0FBS0EsVUFBVUMsS0FBSyxFQUFFO1FBQzlELE9BQU87SUFDWDtJQUNBLE1BQU1DLFlBQVlIO0lBQ2xCLElBQUlHLFVBQVVDLEtBQUssS0FBS0osT0FBTztRQUMzQixPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNLLE1BQU1DLE1BQU0sRUFBRUMsSUFBSTtJQUM5QixPQUFPbEIsd0NBQUdBLENBQUNnQixLQUFLLENBQUNDLFFBQVFDO0FBQzdCO0FBQ29DO0FBQ3BDOzs7Ozs7Q0FNQyxHQUNNLFNBQVNDLE9BQU9OLEtBQUs7SUFDeEIsT0FBT2Isd0NBQUdBLENBQUNtQixNQUFNLENBQUNOO0FBQ3RCLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9saW5rLmpzP2I0MDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ0lELCBmb3JtYXQsIHRvSlNPTiwgZnJvbUpTT04gfSBmcm9tICcuL2NpZC5qcyc7XG4vLyBUaGlzIHdheSBUUyB3aWxsIGFsc28gZXhwb3NlIGFsbCB0aGUgdHlwZXMgZnJvbSBtb2R1bGVcbmV4cG9ydCAqIGZyb20gJy4vbGluay9pbnRlcmZhY2UuanMnO1xuY29uc3QgREFHX1BCX0NPREUgPSAweDcwO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5jb25zdCBTSEFfMjU2X0NPREUgPSAweDEyO1xuLyoqXG4gKiBTaW1wbGlmaWVkIHZlcnNpb24gb2YgYGNyZWF0ZWAgZm9yIENJRHYwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGVnYWN5KGRpZ2VzdCkge1xuICAgIHJldHVybiBDSUQuY3JlYXRlKDAsIERBR19QQl9DT0RFLCBkaWdlc3QpO1xufVxuLyoqXG4gKiBTaW1wbGlmaWVkIHZlcnNpb24gb2YgYGNyZWF0ZWAgZm9yIENJRHYxLlxuICpcbiAqIEBwYXJhbSBjb2RlIC0gQ29udGVudCBlbmNvZGluZyBmb3JtYXQgY29kZS5cbiAqIEBwYXJhbSBkaWdlc3QgLSBNaWx0aWhhc2ggb2YgdGhlIGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoY29kZSwgZGlnZXN0KSB7XG4gICAgcmV0dXJuIENJRC5jcmVhdGUoMSwgY29kZSwgZGlnZXN0KTtcbn1cbi8qKlxuICogVHlwZSBwcmVkaWNhdGUgcmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIHRoZSBsaW5rLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMaW5rKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB3aXRoU2xhc2ggPSB2YWx1ZTtcbiAgICBpZiAod2l0aFNsYXNoWycvJ10gIT0gbnVsbCAmJiB3aXRoU2xhc2hbJy8nXSA9PT0gd2l0aFNsYXNoLmJ5dGVzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB3aXRoQXNDSUQgPSB2YWx1ZTtcbiAgICBpZiAod2l0aEFzQ0lELmFzQ0lEID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBUYWtlcyBjaWQgaW4gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gYW5kIGNyZWF0ZXMgYW4gaW5zdGFuY2UuIElmIGBiYXNlYFxuICogZGVjb2RlciBpcyBub3QgcHJvdmlkZWQgd2lsbCB1c2UgYSBkZWZhdWx0IGZyb20gdGhlIGNvbmZpZ3VyYXRpb24uIEl0IHdpbGxcbiAqIHRocm93IGFuIGVycm9yIGlmIGVuY29kaW5nIG9mIHRoZSBDSUQgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBzdXBwbGllZCAob3JcbiAqIGEgZGVmYXVsdCBkZWNvZGVyKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHNvdXJjZSwgYmFzZSkge1xuICAgIHJldHVybiBDSUQucGFyc2Uoc291cmNlLCBiYXNlKTtcbn1cbmV4cG9ydCB7IGZvcm1hdCwgdG9KU09OLCBmcm9tSlNPTiB9O1xuLyoqXG4gKiBEZWNvZGVkIGEgQ0lEIGZyb20gaXRzIGJpbmFyeSByZXByZXNlbnRhdGlvbi4gVGhlIGJ5dGUgYXJyYXkgbXVzdCBjb250YWluXG4gKiBvbmx5IHRoZSBDSUQgd2l0aCBubyBhZGRpdGlvbmFsIGJ5dGVzLlxuICpcbiAqIEFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIHRoZSBieXRlcyBwcm92aWRlZCBkbyBub3QgY29udGFpbiBhIHZhbGlkXG4gKiBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgYSBDSUQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoYnl0ZXMpIHtcbiAgICByZXR1cm4gQ0lELmRlY29kZShieXRlcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5rLmpzLm1hcCJdLCJuYW1lcyI6WyJDSUQiLCJmb3JtYXQiLCJ0b0pTT04iLCJmcm9tSlNPTiIsIkRBR19QQl9DT0RFIiwiU0hBXzI1Nl9DT0RFIiwiY3JlYXRlTGVnYWN5IiwiZGlnZXN0IiwiY3JlYXRlIiwiY29kZSIsImlzTGluayIsInZhbHVlIiwid2l0aFNsYXNoIiwiYnl0ZXMiLCJ3aXRoQXNDSUQiLCJhc0NJRCIsInBhcnNlIiwic291cmNlIiwiYmFzZSIsImRlY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/link.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/link/interface.js":
/*!***************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/link/interface.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy9saW5rL2ludGVyZmFjZS5qcyIsIm1hcHBpbmdzIjoiO0FBQVUsQ0FDVixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2Rpc3Qvc3JjL2xpbmsvaW50ZXJmYWNlLmpzPzRjZWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/link/interface.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/varint.js":
/*!*******************************************************!*\
  !*** ../node_modules/multiformats/dist/src/varint.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encodeTo: () => (/* binding */ encodeTo),\n/* harmony export */   encodingLength: () => (/* binding */ encodingLength)\n/* harmony export */ });\n/* harmony import */ var _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vendor/varint.js */ \"(rsc)/../node_modules/multiformats/dist/src/vendor/varint.js\");\n\nfunction decode(data, offset = 0) {\n    const code = _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode(data, offset);\n    return [\n        code,\n        _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode.bytes\n    ];\n}\nfunction encodeTo(int, target, offset = 0) {\n    _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encode(int, target, offset);\n    return target;\n}\nfunction encodingLength(int) {\n    return _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodingLength(int);\n} //# sourceMappingURL=varint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy92YXJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3QztBQUNqQyxTQUFTQyxPQUFPQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztJQUNuQyxNQUFNQyxPQUFPSix5REFBTUEsQ0FBQ0MsTUFBTSxDQUFDQyxNQUFNQztJQUNqQyxPQUFPO1FBQUNDO1FBQU1KLHlEQUFNQSxDQUFDQyxNQUFNLENBQUNJLEtBQUs7S0FBQztBQUN0QztBQUNPLFNBQVNDLFNBQVNDLEdBQUcsRUFBRUMsTUFBTSxFQUFFTCxTQUFTLENBQUM7SUFDNUNILHlEQUFNQSxDQUFDUyxNQUFNLENBQUNGLEtBQUtDLFFBQVFMO0lBQzNCLE9BQU9LO0FBQ1g7QUFDTyxTQUFTRSxlQUFlSCxHQUFHO0lBQzlCLE9BQU9QLHlEQUFNQSxDQUFDVSxjQUFjLENBQUNIO0FBQ2pDLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy92YXJpbnQuanM/NzAzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFyaW50IGZyb20gJy4vdmVuZG9yL3ZhcmludC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9mZnNldCA9IDApIHtcbiAgICBjb25zdCBjb2RlID0gdmFyaW50LmRlY29kZShkYXRhLCBvZmZzZXQpO1xuICAgIHJldHVybiBbY29kZSwgdmFyaW50LmRlY29kZS5ieXRlc107XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVG8oaW50LCB0YXJnZXQsIG9mZnNldCA9IDApIHtcbiAgICB2YXJpbnQuZW5jb2RlKGludCwgdGFyZ2V0LCBvZmZzZXQpO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RpbmdMZW5ndGgoaW50KSB7XG4gICAgcmV0dXJuIHZhcmludC5lbmNvZGluZ0xlbmd0aChpbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFyaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJ2YXJpbnQiLCJkZWNvZGUiLCJkYXRhIiwib2Zmc2V0IiwiY29kZSIsImJ5dGVzIiwiZW5jb2RlVG8iLCJpbnQiLCJ0YXJnZXQiLCJlbmNvZGUiLCJlbmNvZGluZ0xlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/varint.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/vendor/base-x.js":
/*!**************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/vendor/base-x.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* eslint-disable */ // base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */ function base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError(\"Alphabet too long\");\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for(var j = 0; j < BASE_MAP.length; j++){\n        BASE_MAP[j] = 255;\n    }\n    for(var i = 0; i < ALPHABET.length; i++){\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + \" is ambiguous\");\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */ function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array) ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        } else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError(\"Expected Uint8Array\");\n        }\n        if (source.length === 0) {\n            return \"\";\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while(pbegin !== pend && source[pbegin] === 0){\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while(pbegin !== pend){\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){\n                carry += 256 * b58[it1] >>> 0;\n                b58[it1] = carry % BASE >>> 0;\n                carry = carry / BASE >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while(it2 !== size && b58[it2] === 0){\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for(; it2 < size; ++it2){\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */ function decodeUnsafe(source) {\n        if (typeof source !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === \" \") {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while(source[psz] === LEADER){\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while(source[psz]){\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){\n                carry += BASE * b256[it3] >>> 0;\n                b256[it3] = carry % 256 >>> 0;\n                carry = carry / 256 >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === \" \") {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while(it4 !== size && b256[it4] === 0){\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while(it4 !== size){\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */ function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_brrp__multiformats_scope_baseX); //# sourceMappingURL=base-x.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/vendor/base-x.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/multiformats/dist/src/vendor/varint.js":
/*!**************************************************************!*\
  !*** ../node_modules/multiformats/dist/src/vendor/varint.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* eslint-disable */ var encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */ function encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while(num >= INT){\n        out[offset++] = num & 0xFF | MSB;\n        num /= 128;\n    }\n    while(num & MSBALL){\n        out[offset++] = num & 0xFF | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */ function read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError(\"Could not decode varint\");\n        }\n        b = buf[counter++];\n        res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    }while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function(/** @type {number} */ value) {\n    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_brrp_varint); //# sourceMappingURL=varint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9kaXN0L3NyYy92ZW5kb3IvdmFyaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxrQkFBa0IsR0FDbEIsSUFBSUEsV0FBV0M7QUFDZixJQUFJQyxNQUFNLE1BQU1DLE9BQU8sTUFBTUMsU0FBUyxDQUFDRCxNQUFNRSxNQUFNQyxLQUFLQyxHQUFHLENBQUMsR0FBRztBQUMvRDs7OztDQUlDLEdBQ0QsU0FBU04sT0FBT08sR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE1BQU07SUFDNUJELE1BQU1BLE9BQU8sRUFBRTtJQUNmQyxTQUFTQSxVQUFVO0lBQ25CLElBQUlDLFlBQVlEO0lBQ2hCLE1BQU9GLE9BQU9ILElBQUs7UUFDZkksR0FBRyxDQUFDQyxTQUFTLEdBQUcsTUFBTyxPQUFRUjtRQUMvQk0sT0FBTztJQUNYO0lBQ0EsTUFBT0EsTUFBTUosT0FBUTtRQUNqQkssR0FBRyxDQUFDQyxTQUFTLEdBQUcsTUFBTyxPQUFRUjtRQUMvQk0sU0FBUztJQUNiO0lBQ0FDLEdBQUcsQ0FBQ0MsT0FBTyxHQUFHRixNQUFNO0lBQ3BCLGFBQWE7SUFDYlAsT0FBT1csS0FBSyxHQUFHRixTQUFTQyxZQUFZO0lBQ3BDLE9BQU9GO0FBQ1g7QUFDQSxJQUFJSSxTQUFTQztBQUNiLElBQUlDLFFBQVEsTUFBTUMsU0FBUztBQUMzQjs7O0NBR0MsR0FDRCxTQUFTRixLQUFLRyxHQUFHLEVBQUVQLE1BQU07SUFDckIsSUFBSVEsTUFBTSxHQUFHUixTQUFTQSxVQUFVLEdBQUdTLFFBQVEsR0FBR0MsVUFBVVYsUUFBUVcsR0FBR0MsSUFBSUwsSUFBSU0sTUFBTTtJQUNqRixHQUFHO1FBQ0MsSUFBSUgsV0FBV0UsR0FBRztZQUNkLGFBQWE7WUFDYlIsS0FBS0YsS0FBSyxHQUFHO1lBQ2IsTUFBTSxJQUFJWSxXQUFXO1FBQ3pCO1FBQ0FILElBQUlKLEdBQUcsQ0FBQ0csVUFBVTtRQUNsQkYsT0FBT0MsUUFBUSxLQUNULENBQUNFLElBQUlMLE1BQUssS0FBTUcsUUFDaEIsQ0FBQ0UsSUFBSUwsTUFBSyxJQUFLVixLQUFLQyxHQUFHLENBQUMsR0FBR1k7UUFDakNBLFNBQVM7SUFDYixRQUFTRSxLQUFLTixPQUFPO0lBQ3JCLGFBQWE7SUFDYkQsS0FBS0YsS0FBSyxHQUFHUSxVQUFVVjtJQUN2QixPQUFPUTtBQUNYO0FBQ0EsSUFBSU8sS0FBS25CLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3JCLElBQUltQixLQUFLcEIsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDckIsSUFBSW9CLEtBQUtyQixLQUFLQyxHQUFHLENBQUMsR0FBRztBQUNyQixJQUFJcUIsS0FBS3RCLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3JCLElBQUlzQixLQUFLdkIsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDckIsSUFBSXVCLEtBQUt4QixLQUFLQyxHQUFHLENBQUMsR0FBRztBQUNyQixJQUFJd0IsS0FBS3pCLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3JCLElBQUl5QixLQUFLMUIsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDckIsSUFBSTBCLEtBQUszQixLQUFLQyxHQUFHLENBQUMsR0FBRztBQUNyQixJQUFJZ0IsU0FBUyxTQUFVLG1CQUFtQixHQUFHVyxLQUFLO0lBQzlDLE9BQVFBLFFBQVFULEtBQUssSUFDZlMsUUFBUVIsS0FBSyxJQUNUUSxRQUFRUCxLQUFLLElBQ1RPLFFBQVFOLEtBQUssSUFDVE0sUUFBUUwsS0FBSyxJQUNUSyxRQUFRSixLQUFLLElBQ1RJLFFBQVFILEtBQUssSUFDVEcsUUFBUUYsS0FBSyxJQUNURSxRQUFRRCxLQUFLLElBQ1Q7QUFDMUM7QUFDQSxJQUFJRSxTQUFTO0lBQ1RsQyxRQUFRRDtJQUNSYSxRQUFRQTtJQUNSdUIsZ0JBQWdCYjtBQUNwQjtBQUNBLElBQUljLGVBQWVGO0FBQ25CLGlFQUFlRSxZQUFZQSxFQUFDLENBQzVCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZGlzdC9zcmMvdmVuZG9yL3ZhcmludC5qcz84MWNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgZW5jb2RlXzEgPSBlbmNvZGU7XG52YXIgTVNCID0gMHg4MCwgUkVTVCA9IDB4N0YsIE1TQkFMTCA9IH5SRVNULCBJTlQgPSBNYXRoLnBvdygyLCAzMSk7XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqIEBwYXJhbSB7bnVtYmVyW119IG91dFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtLCBvdXQsIG9mZnNldCkge1xuICAgIG91dCA9IG91dCB8fCBbXTtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICB2YXIgb2xkT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIHdoaWxlIChudW0gPj0gSU5UKSB7XG4gICAgICAgIG91dFtvZmZzZXQrK10gPSAobnVtICYgMHhGRikgfCBNU0I7XG4gICAgICAgIG51bSAvPSAxMjg7XG4gICAgfVxuICAgIHdoaWxlIChudW0gJiBNU0JBTEwpIHtcbiAgICAgICAgb3V0W29mZnNldCsrXSA9IChudW0gJiAweEZGKSB8IE1TQjtcbiAgICAgICAgbnVtID4+Pj0gNztcbiAgICB9XG4gICAgb3V0W29mZnNldF0gPSBudW0gfCAwO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBlbmNvZGUuYnl0ZXMgPSBvZmZzZXQgLSBvbGRPZmZzZXQgKyAxO1xuICAgIHJldHVybiBvdXQ7XG59XG52YXIgZGVjb2RlID0gcmVhZDtcbnZhciBNU0IkMSA9IDB4ODAsIFJFU1QkMSA9IDB4N0Y7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nIHwgYW55W119IGJ1ZlxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICovXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIHJlcyA9IDAsIG9mZnNldCA9IG9mZnNldCB8fCAwLCBzaGlmdCA9IDAsIGNvdW50ZXIgPSBvZmZzZXQsIGIsIGwgPSBidWYubGVuZ3RoO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKGNvdW50ZXIgPj0gbCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmVhZC5ieXRlcyA9IDA7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQ291bGQgbm90IGRlY29kZSB2YXJpbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBiID0gYnVmW2NvdW50ZXIrK107XG4gICAgICAgIHJlcyArPSBzaGlmdCA8IDI4XG4gICAgICAgICAgICA/IChiICYgUkVTVCQxKSA8PCBzaGlmdFxuICAgICAgICAgICAgOiAoYiAmIFJFU1QkMSkgKiBNYXRoLnBvdygyLCBzaGlmdCk7XG4gICAgICAgIHNoaWZ0ICs9IDc7XG4gICAgfSB3aGlsZSAoYiA+PSBNU0IkMSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJlYWQuYnl0ZXMgPSBjb3VudGVyIC0gb2Zmc2V0O1xuICAgIHJldHVybiByZXM7XG59XG52YXIgTjEgPSBNYXRoLnBvdygyLCA3KTtcbnZhciBOMiA9IE1hdGgucG93KDIsIDE0KTtcbnZhciBOMyA9IE1hdGgucG93KDIsIDIxKTtcbnZhciBONCA9IE1hdGgucG93KDIsIDI4KTtcbnZhciBONSA9IE1hdGgucG93KDIsIDM1KTtcbnZhciBONiA9IE1hdGgucG93KDIsIDQyKTtcbnZhciBONyA9IE1hdGgucG93KDIsIDQ5KTtcbnZhciBOOCA9IE1hdGgucG93KDIsIDU2KTtcbnZhciBOOSA9IE1hdGgucG93KDIsIDYzKTtcbnZhciBsZW5ndGggPSBmdW5jdGlvbiAoLyoqIEB0eXBlIHtudW1iZXJ9ICovIHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSA8IE4xID8gMVxuICAgICAgICA6IHZhbHVlIDwgTjIgPyAyXG4gICAgICAgICAgICA6IHZhbHVlIDwgTjMgPyAzXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSA8IE40ID8gNFxuICAgICAgICAgICAgICAgICAgICA6IHZhbHVlIDwgTjUgPyA1XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlIDwgTjYgPyA2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSA8IE43ID8gN1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlIDwgTjggPyA4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlIDwgTjkgPyA5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxMCk7XG59O1xudmFyIHZhcmludCA9IHtcbiAgICBlbmNvZGU6IGVuY29kZV8xLFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kaW5nTGVuZ3RoOiBsZW5ndGhcbn07XG52YXIgX2JycnBfdmFyaW50ID0gdmFyaW50O1xuZXhwb3J0IGRlZmF1bHQgX2JycnBfdmFyaW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFyaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJlbmNvZGVfMSIsImVuY29kZSIsIk1TQiIsIlJFU1QiLCJNU0JBTEwiLCJJTlQiLCJNYXRoIiwicG93IiwibnVtIiwib3V0Iiwib2Zmc2V0Iiwib2xkT2Zmc2V0IiwiYnl0ZXMiLCJkZWNvZGUiLCJyZWFkIiwiTVNCJDEiLCJSRVNUJDEiLCJidWYiLCJyZXMiLCJzaGlmdCIsImNvdW50ZXIiLCJiIiwibCIsImxlbmd0aCIsIlJhbmdlRXJyb3IiLCJOMSIsIk4yIiwiTjMiLCJONCIsIk41IiwiTjYiLCJONyIsIk44IiwiTjkiLCJ2YWx1ZSIsInZhcmludCIsImVuY29kaW5nTGVuZ3RoIiwiX2JycnBfdmFyaW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/multiformats/dist/src/vendor/varint.js\n");

/***/ })

};
;