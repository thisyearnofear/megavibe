"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cborg";
exports.ids = ["vendor-chunks/cborg"];
exports.modules = {

/***/ "(rsc)/../node_modules/cborg/cborg.js":
/*!**************************************!*\
  !*** ../node_modules/cborg/cborg.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Token: () => (/* reexport safe */ _lib_token_js__WEBPACK_IMPORTED_MODULE_2__.Token),\n/* harmony export */   Tokenizer: () => (/* reexport safe */ _lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.Tokeniser),\n/* harmony export */   Type: () => (/* reexport safe */ _lib_token_js__WEBPACK_IMPORTED_MODULE_2__.Type),\n/* harmony export */   decode: () => (/* reexport safe */ _lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.decode),\n/* harmony export */   decodeFirst: () => (/* reexport safe */ _lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.decodeFirst),\n/* harmony export */   encode: () => (/* reexport safe */ _lib_encode_js__WEBPACK_IMPORTED_MODULE_0__.encode),\n/* harmony export */   tokensToObject: () => (/* reexport safe */ _lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.tokensToObject)\n/* harmony export */ });\n/* harmony import */ var _lib_encode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/encode.js */ \"(rsc)/../node_modules/cborg/lib/encode.js\");\n/* harmony import */ var _lib_decode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/decode.js */ \"(rsc)/../node_modules/cborg/lib/decode.js\");\n/* harmony import */ var _lib_token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n\n\n\n/**\n * Export the types that were present in the original manual cborg.d.ts\n * @typedef {import('./interface').TagDecoder} TagDecoder\n * There was originally just `TypeEncoder` so don't break types by renaming or not exporting\n * @typedef {import('./interface').OptionalTypeEncoder} TypeEncoder\n * @typedef {import('./interface').DecodeOptions} DecodeOptions\n * @typedef {import('./interface').EncodeOptions} EncodeOptions\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2Nib3JnLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFDd0M7QUFDcEM7QUFFNUM7Ozs7Ozs7Q0FPQyxHQVVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2Nib3JnLmpzP2M3NjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSAnLi9saWIvZW5jb2RlLmpzJ1xuaW1wb3J0IHsgZGVjb2RlLCBkZWNvZGVGaXJzdCwgVG9rZW5pc2VyLCB0b2tlbnNUb09iamVjdCB9IGZyb20gJy4vbGliL2RlY29kZS5qcydcbmltcG9ydCB7IFRva2VuLCBUeXBlIH0gZnJvbSAnLi9saWIvdG9rZW4uanMnXG5cbi8qKlxuICogRXhwb3J0IHRoZSB0eXBlcyB0aGF0IHdlcmUgcHJlc2VudCBpbiB0aGUgb3JpZ2luYWwgbWFudWFsIGNib3JnLmQudHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vaW50ZXJmYWNlJykuVGFnRGVjb2Rlcn0gVGFnRGVjb2RlclxuICogVGhlcmUgd2FzIG9yaWdpbmFsbHkganVzdCBgVHlwZUVuY29kZXJgIHNvIGRvbid0IGJyZWFrIHR5cGVzIGJ5IHJlbmFtaW5nIG9yIG5vdCBleHBvcnRpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vaW50ZXJmYWNlJykuT3B0aW9uYWxUeXBlRW5jb2Rlcn0gVHlwZUVuY29kZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vaW50ZXJmYWNlJykuRGVjb2RlT3B0aW9uc30gRGVjb2RlT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9pbnRlcmZhY2UnKS5FbmNvZGVPcHRpb25zfSBFbmNvZGVPcHRpb25zXG4gKi9cblxuZXhwb3J0IHtcbiAgZGVjb2RlLFxuICBkZWNvZGVGaXJzdCxcbiAgVG9rZW5pc2VyIGFzIFRva2VuaXplcixcbiAgdG9rZW5zVG9PYmplY3QsXG4gIGVuY29kZSxcbiAgVG9rZW4sXG4gIFR5cGVcbn1cbiJdLCJuYW1lcyI6WyJlbmNvZGUiLCJkZWNvZGUiLCJkZWNvZGVGaXJzdCIsIlRva2VuaXNlciIsInRva2Vuc1RvT2JqZWN0IiwiVG9rZW4iLCJUeXBlIiwiVG9rZW5pemVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/cborg.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/0uint.js":
/*!******************************************!*\
  !*** ../node_modules/cborg/lib/0uint.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeUint16: () => (/* binding */ decodeUint16),\n/* harmony export */   decodeUint32: () => (/* binding */ decodeUint32),\n/* harmony export */   decodeUint64: () => (/* binding */ decodeUint64),\n/* harmony export */   decodeUint8: () => (/* binding */ decodeUint8),\n/* harmony export */   encodeUint: () => (/* binding */ encodeUint),\n/* harmony export */   encodeUintValue: () => (/* binding */ encodeUintValue),\n/* harmony export */   readUint16: () => (/* binding */ readUint16),\n/* harmony export */   readUint32: () => (/* binding */ readUint32),\n/* harmony export */   readUint64: () => (/* binding */ readUint64),\n/* harmony export */   readUint8: () => (/* binding */ readUint8),\n/* harmony export */   uintBoundaries: () => (/* binding */ uintBoundaries)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* globals BigInt */ \n\nconst uintBoundaries = [\n    24,\n    256,\n    65536,\n    4294967296,\n    BigInt(\"18446744073709551616\")\n];\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} data\n * @param {number} offset\n * @param {DecodeOptions} options\n * @returns {number}\n */ function readUint8(data, offset, options) {\n    (0,_common_js__WEBPACK_IMPORTED_MODULE_1__.assertEnoughData)(data, offset, 1);\n    const value = data[offset];\n    if (options.strict === true && value < uintBoundaries[0]) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);\n    }\n    return value;\n}\n/**\n * @param {Uint8Array} data\n * @param {number} offset\n * @param {DecodeOptions} options\n * @returns {number}\n */ function readUint16(data, offset, options) {\n    (0,_common_js__WEBPACK_IMPORTED_MODULE_1__.assertEnoughData)(data, offset, 2);\n    const value = data[offset] << 8 | data[offset + 1];\n    if (options.strict === true && value < uintBoundaries[1]) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);\n    }\n    return value;\n}\n/**\n * @param {Uint8Array} data\n * @param {number} offset\n * @param {DecodeOptions} options\n * @returns {number}\n */ function readUint32(data, offset, options) {\n    (0,_common_js__WEBPACK_IMPORTED_MODULE_1__.assertEnoughData)(data, offset, 4);\n    const value = data[offset] * 16777216 /* 2 ** 24 */  + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n    if (options.strict === true && value < uintBoundaries[2]) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);\n    }\n    return value;\n}\n/**\n * @param {Uint8Array} data\n * @param {number} offset\n * @param {DecodeOptions} options\n * @returns {number|bigint}\n */ function readUint64(data, offset, options) {\n    // assume BigInt, convert back to Number if within safe range\n    (0,_common_js__WEBPACK_IMPORTED_MODULE_1__.assertEnoughData)(data, offset, 8);\n    const hi = data[offset] * 16777216 /* 2 ** 24 */  + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n    const lo = data[offset + 4] * 16777216 /* 2 ** 24 */  + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];\n    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);\n    if (options.strict === true && value < uintBoundaries[3]) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);\n    }\n    if (value <= Number.MAX_SAFE_INTEGER) {\n        return Number(value);\n    }\n    if (options.allowBigInt === true) {\n        return value;\n    }\n    throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} integers outside of the safe integer range are not supported`);\n}\n/* not required thanks to quick[] list\nconst oneByteTokens = new Array(24).fill(0).map((v, i) => new Token(Type.uint, i, 1))\nexport function decodeUintCompact (data, pos, minor, options) {\n  return oneByteTokens[minor]\n}\n*/ /**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeUint8(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.uint, readUint8(data, pos + 1, options), 2);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeUint16(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.uint, readUint16(data, pos + 1, options), 3);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeUint32(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.uint, readUint32(data, pos + 1, options), 5);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeUint64(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.uint, readUint64(data, pos + 1, options), 9);\n}\n/**\n * @param {Bl} buf\n * @param {Token} token\n */ function encodeUint(buf, token) {\n    return encodeUintValue(buf, 0, token.value);\n}\n/**\n * @param {Bl} buf\n * @param {number} major\n * @param {number|bigint} uint\n */ function encodeUintValue(buf, major, uint) {\n    if (uint < uintBoundaries[0]) {\n        const nuint = Number(uint);\n        // pack into one byte, minor=0, additional=value\n        buf.push([\n            major | nuint\n        ]);\n    } else if (uint < uintBoundaries[1]) {\n        const nuint = Number(uint);\n        // pack into two byte, minor=0, additional=24\n        buf.push([\n            major | 24,\n            nuint\n        ]);\n    } else if (uint < uintBoundaries[2]) {\n        const nuint = Number(uint);\n        // pack into three byte, minor=0, additional=25\n        buf.push([\n            major | 25,\n            nuint >>> 8,\n            nuint & 0xff\n        ]);\n    } else if (uint < uintBoundaries[3]) {\n        const nuint = Number(uint);\n        // pack into five byte, minor=0, additional=26\n        buf.push([\n            major | 26,\n            nuint >>> 24 & 0xff,\n            nuint >>> 16 & 0xff,\n            nuint >>> 8 & 0xff,\n            nuint & 0xff\n        ]);\n    } else {\n        const buint = BigInt(uint);\n        if (buint < uintBoundaries[4]) {\n            // pack into nine byte, minor=0, additional=27\n            const set = [\n                major | 27,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n            // simulate bitwise above 32 bits\n            let lo = Number(buint & BigInt(0xffffffff));\n            let hi = Number(buint >> BigInt(32) & BigInt(0xffffffff));\n            set[8] = lo & 0xff;\n            lo = lo >> 8;\n            set[7] = lo & 0xff;\n            lo = lo >> 8;\n            set[6] = lo & 0xff;\n            lo = lo >> 8;\n            set[5] = lo & 0xff;\n            set[4] = hi & 0xff;\n            hi = hi >> 8;\n            set[3] = hi & 0xff;\n            hi = hi >> 8;\n            set[2] = hi & 0xff;\n            hi = hi >> 8;\n            set[1] = hi & 0xff;\n            buf.push(set);\n        } else {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} encountered BigInt larger than allowable range`);\n        }\n    }\n}\n/**\n * @param {Token} token\n * @returns {number}\n */ encodeUint.encodedSize = function encodedSize(token) {\n    return encodeUintValue.encodedSize(token.value);\n};\n/**\n * @param {number} uint\n * @returns {number}\n */ encodeUintValue.encodedSize = function encodedSize(uint) {\n    if (uint < uintBoundaries[0]) {\n        return 1;\n    }\n    if (uint < uintBoundaries[1]) {\n        return 2;\n    }\n    if (uint < uintBoundaries[2]) {\n        return 3;\n    }\n    if (uint < uintBoundaries[3]) {\n        return 5;\n    }\n    return 9;\n};\n/**\n * @param {Token} tok1\n * @param {Token} tok2\n * @returns {number}\n */ encodeUint.compareTokens = function compareTokens(tok1, tok2) {\n    return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : /* c8 ignore next */ 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/0uint.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/1negint.js":
/*!********************************************!*\
  !*** ../node_modules/cborg/lib/1negint.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeNegint16: () => (/* binding */ decodeNegint16),\n/* harmony export */   decodeNegint32: () => (/* binding */ decodeNegint32),\n/* harmony export */   decodeNegint64: () => (/* binding */ decodeNegint64),\n/* harmony export */   decodeNegint8: () => (/* binding */ decodeNegint8),\n/* harmony export */   encodeNegint: () => (/* binding */ encodeNegint)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* eslint-env es2020 */ \n\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeNegint8(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.negint, -1 - _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint8(data, pos + 1, options), 2);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeNegint16(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.negint, -1 - _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint16(data, pos + 1, options), 3);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeNegint32(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.negint, -1 - _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint32(data, pos + 1, options), 5);\n}\nconst neg1b = BigInt(-1);\nconst pos1b = BigInt(1);\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeNegint64(data, pos, _minor, options) {\n    const int = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint64(data, pos + 1, options);\n    if (typeof int !== \"bigint\") {\n        const value = -1 - int;\n        if (value >= Number.MIN_SAFE_INTEGER) {\n            return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.negint, value, 9);\n        }\n    }\n    if (options.allowBigInt !== true) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_2__.decodeErrPrefix} integers outside of the safe integer range are not supported`);\n    }\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.negint, neg1b - BigInt(int), 9);\n}\n/**\n * @param {Bl} buf\n * @param {Token} token\n */ function encodeNegint(buf, token) {\n    const negint = token.value;\n    const unsigned = typeof negint === \"bigint\" ? negint * neg1b - pos1b : negint * -1 - 1;\n    _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUintValue(buf, token.type.majorEncoded, unsigned);\n}\n/**\n * @param {Token} token\n * @returns {number}\n */ encodeNegint.encodedSize = function encodedSize(token) {\n    const negint = token.value;\n    const unsigned = typeof negint === \"bigint\" ? negint * neg1b - pos1b : negint * -1 - 1;\n    /* c8 ignore next 4 */ // handled by quickEncode, we shouldn't get here but it's included for completeness\n    if (unsigned < _0uint_js__WEBPACK_IMPORTED_MODULE_1__.uintBoundaries[0]) {\n        return 1;\n    }\n    if (unsigned < _0uint_js__WEBPACK_IMPORTED_MODULE_1__.uintBoundaries[1]) {\n        return 2;\n    }\n    if (unsigned < _0uint_js__WEBPACK_IMPORTED_MODULE_1__.uintBoundaries[2]) {\n        return 3;\n    }\n    if (unsigned < _0uint_js__WEBPACK_IMPORTED_MODULE_1__.uintBoundaries[3]) {\n        return 5;\n    }\n    return 9;\n};\n/**\n * @param {Token} tok1\n * @param {Token} tok2\n * @returns {number}\n */ encodeNegint.compareTokens = function compareTokens(tok1, tok2) {\n    // opposite of the uint comparison since we store the uint version in bytes\n    return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : /* c8 ignore next */ 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi8xbmVnaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEscUJBQXFCLEdBRW1CO0FBQ047QUFDVztBQUU3Qzs7O0NBR0MsR0FFRDs7Ozs7O0NBTUMsR0FDTSxTQUFTSSxjQUFlQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3ZELE9BQU8sSUFBSVIsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDUSxNQUFNLEVBQUUsQ0FBQyxJQUFJUCxnREFBYyxDQUFDRyxNQUFNQyxNQUFNLEdBQUdFLFVBQVU7QUFDN0U7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRyxlQUFnQk4sSUFBSSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUN4RCxPQUFPLElBQUlSLDRDQUFLQSxDQUFDQywyQ0FBSUEsQ0FBQ1EsTUFBTSxFQUFFLENBQUMsSUFBSVAsaURBQWUsQ0FBQ0csTUFBTUMsTUFBTSxHQUFHRSxVQUFVO0FBQzlFO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU0ssZUFBZ0JSLElBQUksRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDeEQsT0FBTyxJQUFJUiw0Q0FBS0EsQ0FBQ0MsMkNBQUlBLENBQUNRLE1BQU0sRUFBRSxDQUFDLElBQUlQLGlEQUFlLENBQUNHLE1BQU1DLE1BQU0sR0FBR0UsVUFBVTtBQUM5RTtBQUVBLE1BQU1PLFFBQVFDLE9BQU8sQ0FBQztBQUN0QixNQUFNQyxRQUFRRCxPQUFPO0FBRXJCOzs7Ozs7Q0FNQyxHQUNNLFNBQVNFLGVBQWdCYixJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3hELE1BQU1XLE1BQU1qQixpREFBZSxDQUFDRyxNQUFNQyxNQUFNLEdBQUdFO0lBQzNDLElBQUksT0FBT1csUUFBUSxVQUFVO1FBQzNCLE1BQU1FLFFBQVEsQ0FBQyxJQUFJRjtRQUNuQixJQUFJRSxTQUFTQyxPQUFPQyxnQkFBZ0IsRUFBRTtZQUNwQyxPQUFPLElBQUl2Qiw0Q0FBS0EsQ0FBQ0MsMkNBQUlBLENBQUNRLE1BQU0sRUFBRVksT0FBTztRQUN2QztJQUNGO0lBQ0EsSUFBSWIsUUFBUWdCLFdBQVcsS0FBSyxNQUFNO1FBQ2hDLE1BQU0sSUFBSUMsTUFBTSxDQUFDLEVBQUV0Qix1REFBZUEsQ0FBQyw2REFBNkQsQ0FBQztJQUNuRztJQUNBLE9BQU8sSUFBSUgsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDUSxNQUFNLEVBQUVNLFFBQVFDLE9BQU9HLE1BQU07QUFDckQ7QUFFQTs7O0NBR0MsR0FDTSxTQUFTTyxhQUFjQyxHQUFHLEVBQUVDLEtBQUs7SUFDdEMsTUFBTW5CLFNBQVNtQixNQUFNUCxLQUFLO0lBQzFCLE1BQU1RLFdBQVksT0FBT3BCLFdBQVcsV0FBWUEsU0FBU00sUUFBUUUsUUFBVVIsU0FBUyxDQUFDLElBQUk7SUFDekZQLHNEQUFvQixDQUFDeUIsS0FBS0MsTUFBTUcsSUFBSSxDQUFDQyxZQUFZLEVBQUVIO0FBQ3JEO0FBRUE7OztDQUdDLEdBQ0RILGFBQWFPLFdBQVcsR0FBRyxTQUFTQSxZQUFhTCxLQUFLO0lBQ3BELE1BQU1uQixTQUFTbUIsTUFBTVAsS0FBSztJQUMxQixNQUFNUSxXQUFZLE9BQU9wQixXQUFXLFdBQVlBLFNBQVNNLFFBQVFFLFFBQVVSLFNBQVMsQ0FBQyxJQUFJO0lBQ3pGLG9CQUFvQixHQUNwQixtRkFBbUY7SUFDbkYsSUFBSW9CLFdBQVczQixxREFBbUIsQ0FBQyxFQUFFLEVBQUU7UUFDckMsT0FBTztJQUNUO0lBQ0EsSUFBSTJCLFdBQVczQixxREFBbUIsQ0FBQyxFQUFFLEVBQUU7UUFDckMsT0FBTztJQUNUO0lBQ0EsSUFBSTJCLFdBQVczQixxREFBbUIsQ0FBQyxFQUFFLEVBQUU7UUFDckMsT0FBTztJQUNUO0lBQ0EsSUFBSTJCLFdBQVczQixxREFBbUIsQ0FBQyxFQUFFLEVBQUU7UUFDckMsT0FBTztJQUNUO0lBQ0EsT0FBTztBQUNUO0FBRUE7Ozs7Q0FJQyxHQUNEd0IsYUFBYVMsYUFBYSxHQUFHLFNBQVNBLGNBQWVDLElBQUksRUFBRUMsSUFBSTtJQUM3RCwyRUFBMkU7SUFDM0UsT0FBT0QsS0FBS2YsS0FBSyxHQUFHZ0IsS0FBS2hCLEtBQUssR0FBRyxJQUFJZSxLQUFLZixLQUFLLEdBQUdnQixLQUFLaEIsS0FBSyxHQUFHLENBQUMsSUFBSSxrQkFBa0IsR0FBRztBQUMzRiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9jYm9yZy9saWIvMW5lZ2ludC5qcz84M2FhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1lbnYgZXMyMDIwICovXG5cbmltcG9ydCB7IFRva2VuLCBUeXBlIH0gZnJvbSAnLi90b2tlbi5qcydcbmltcG9ydCAqIGFzIHVpbnQgZnJvbSAnLi8wdWludC5qcydcbmltcG9ydCB7IGRlY29kZUVyclByZWZpeCB9IGZyb20gJy4vY29tbW9uLmpzJ1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vYmwuanMnKS5CbH0gQmxcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2ludGVyZmFjZScpLkRlY29kZU9wdGlvbnN9IERlY29kZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVOZWdpbnQ4IChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFRva2VuKFR5cGUubmVnaW50LCAtMSAtIHVpbnQucmVhZFVpbnQ4KGRhdGEsIHBvcyArIDEsIG9wdGlvbnMpLCAyKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVOZWdpbnQxNiAoZGF0YSwgcG9zLCBfbWlub3IsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBUb2tlbihUeXBlLm5lZ2ludCwgLTEgLSB1aW50LnJlYWRVaW50MTYoZGF0YSwgcG9zICsgMSwgb3B0aW9ucyksIDMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gX21pbm9yXG4gKiBAcGFyYW0ge0RlY29kZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU5lZ2ludDMyIChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFRva2VuKFR5cGUubmVnaW50LCAtMSAtIHVpbnQucmVhZFVpbnQzMihkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSwgNSlcbn1cblxuY29uc3QgbmVnMWIgPSBCaWdJbnQoLTEpXG5jb25zdCBwb3MxYiA9IEJpZ0ludCgxKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVOZWdpbnQ2NCAoZGF0YSwgcG9zLCBfbWlub3IsIG9wdGlvbnMpIHtcbiAgY29uc3QgaW50ID0gdWludC5yZWFkVWludDY0KGRhdGEsIHBvcyArIDEsIG9wdGlvbnMpXG4gIGlmICh0eXBlb2YgaW50ICE9PSAnYmlnaW50Jykge1xuICAgIGNvbnN0IHZhbHVlID0gLTEgLSBpbnRcbiAgICBpZiAodmFsdWUgPj0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHJldHVybiBuZXcgVG9rZW4oVHlwZS5uZWdpbnQsIHZhbHVlLCA5KVxuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5hbGxvd0JpZ0ludCAhPT0gdHJ1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtkZWNvZGVFcnJQcmVmaXh9IGludGVnZXJzIG91dHNpZGUgb2YgdGhlIHNhZmUgaW50ZWdlciByYW5nZSBhcmUgbm90IHN1cHBvcnRlZGApXG4gIH1cbiAgcmV0dXJuIG5ldyBUb2tlbihUeXBlLm5lZ2ludCwgbmVnMWIgLSBCaWdJbnQoaW50KSwgOSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0JsfSBidWZcbiAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVOZWdpbnQgKGJ1ZiwgdG9rZW4pIHtcbiAgY29uc3QgbmVnaW50ID0gdG9rZW4udmFsdWVcbiAgY29uc3QgdW5zaWduZWQgPSAodHlwZW9mIG5lZ2ludCA9PT0gJ2JpZ2ludCcgPyAobmVnaW50ICogbmVnMWIgLSBwb3MxYikgOiAobmVnaW50ICogLTEgLSAxKSlcbiAgdWludC5lbmNvZGVVaW50VmFsdWUoYnVmLCB0b2tlbi50eXBlLm1ham9yRW5jb2RlZCwgdW5zaWduZWQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmVuY29kZU5lZ2ludC5lbmNvZGVkU2l6ZSA9IGZ1bmN0aW9uIGVuY29kZWRTaXplICh0b2tlbikge1xuICBjb25zdCBuZWdpbnQgPSB0b2tlbi52YWx1ZVxuICBjb25zdCB1bnNpZ25lZCA9ICh0eXBlb2YgbmVnaW50ID09PSAnYmlnaW50JyA/IChuZWdpbnQgKiBuZWcxYiAtIHBvczFiKSA6IChuZWdpbnQgKiAtMSAtIDEpKVxuICAvKiBjOCBpZ25vcmUgbmV4dCA0ICovXG4gIC8vIGhhbmRsZWQgYnkgcXVpY2tFbmNvZGUsIHdlIHNob3VsZG4ndCBnZXQgaGVyZSBidXQgaXQncyBpbmNsdWRlZCBmb3IgY29tcGxldGVuZXNzXG4gIGlmICh1bnNpZ25lZCA8IHVpbnQudWludEJvdW5kYXJpZXNbMF0pIHtcbiAgICByZXR1cm4gMVxuICB9XG4gIGlmICh1bnNpZ25lZCA8IHVpbnQudWludEJvdW5kYXJpZXNbMV0pIHtcbiAgICByZXR1cm4gMlxuICB9XG4gIGlmICh1bnNpZ25lZCA8IHVpbnQudWludEJvdW5kYXJpZXNbMl0pIHtcbiAgICByZXR1cm4gM1xuICB9XG4gIGlmICh1bnNpZ25lZCA8IHVpbnQudWludEJvdW5kYXJpZXNbM10pIHtcbiAgICByZXR1cm4gNVxuICB9XG4gIHJldHVybiA5XG59XG5cbi8qKlxuICogQHBhcmFtIHtUb2tlbn0gdG9rMVxuICogQHBhcmFtIHtUb2tlbn0gdG9rMlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZW5jb2RlTmVnaW50LmNvbXBhcmVUb2tlbnMgPSBmdW5jdGlvbiBjb21wYXJlVG9rZW5zICh0b2sxLCB0b2syKSB7XG4gIC8vIG9wcG9zaXRlIG9mIHRoZSB1aW50IGNvbXBhcmlzb24gc2luY2Ugd2Ugc3RvcmUgdGhlIHVpbnQgdmVyc2lvbiBpbiBieXRlc1xuICByZXR1cm4gdG9rMS52YWx1ZSA8IHRvazIudmFsdWUgPyAxIDogdG9rMS52YWx1ZSA+IHRvazIudmFsdWUgPyAtMSA6IC8qIGM4IGlnbm9yZSBuZXh0ICovIDBcbn1cbiJdLCJuYW1lcyI6WyJUb2tlbiIsIlR5cGUiLCJ1aW50IiwiZGVjb2RlRXJyUHJlZml4IiwiZGVjb2RlTmVnaW50OCIsImRhdGEiLCJwb3MiLCJfbWlub3IiLCJvcHRpb25zIiwibmVnaW50IiwicmVhZFVpbnQ4IiwiZGVjb2RlTmVnaW50MTYiLCJyZWFkVWludDE2IiwiZGVjb2RlTmVnaW50MzIiLCJyZWFkVWludDMyIiwibmVnMWIiLCJCaWdJbnQiLCJwb3MxYiIsImRlY29kZU5lZ2ludDY0IiwiaW50IiwicmVhZFVpbnQ2NCIsInZhbHVlIiwiTnVtYmVyIiwiTUlOX1NBRkVfSU5URUdFUiIsImFsbG93QmlnSW50IiwiRXJyb3IiLCJlbmNvZGVOZWdpbnQiLCJidWYiLCJ0b2tlbiIsInVuc2lnbmVkIiwiZW5jb2RlVWludFZhbHVlIiwidHlwZSIsIm1ham9yRW5jb2RlZCIsImVuY29kZWRTaXplIiwidWludEJvdW5kYXJpZXMiLCJjb21wYXJlVG9rZW5zIiwidG9rMSIsInRvazIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/1negint.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/2bytes.js":
/*!*******************************************!*\
  !*** ../node_modules/cborg/lib/2bytes.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareBytes: () => (/* binding */ compareBytes),\n/* harmony export */   decodeBytes16: () => (/* binding */ decodeBytes16),\n/* harmony export */   decodeBytes32: () => (/* binding */ decodeBytes32),\n/* harmony export */   decodeBytes64: () => (/* binding */ decodeBytes64),\n/* harmony export */   decodeBytes8: () => (/* binding */ decodeBytes8),\n/* harmony export */   decodeBytesCompact: () => (/* binding */ decodeBytesCompact),\n/* harmony export */   encodeBytes: () => (/* binding */ encodeBytes)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n/* harmony import */ var _byte_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./byte-utils.js */ \"(rsc)/../node_modules/cborg/lib/byte-utils.js\");\n\n\n\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} prefix\n * @param {number} length\n * @returns {Token}\n */ function toToken(data, pos, prefix, length) {\n    (0,_common_js__WEBPACK_IMPORTED_MODULE_1__.assertEnoughData)(data, pos, prefix + length);\n    const buf = (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_3__.slice)(data, pos + prefix, pos + prefix + length);\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.bytes, buf, prefix + length);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} minor\n * @param {DecodeOptions} _options\n * @returns {Token}\n */ function decodeBytesCompact(data, pos, minor, _options) {\n    return toToken(data, pos, 1, minor);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeBytes8(data, pos, _minor, options) {\n    return toToken(data, pos, 2, _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint8(data, pos + 1, options));\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeBytes16(data, pos, _minor, options) {\n    return toToken(data, pos, 3, _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint16(data, pos + 1, options));\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeBytes32(data, pos, _minor, options) {\n    return toToken(data, pos, 5, _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint32(data, pos + 1, options));\n}\n// TODO: maybe we shouldn't support this ..\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeBytes64(data, pos, _minor, options) {\n    const l = _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint64(data, pos + 1, options);\n    if (typeof l === \"bigint\") {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} 64-bit integer bytes lengths not supported`);\n    }\n    return toToken(data, pos, 9, l);\n}\n/**\n * `encodedBytes` allows for caching when we do a byte version of a string\n * for key sorting purposes\n * @param {Token} token\n * @returns {Uint8Array}\n */ function tokenBytes(token) {\n    if (token.encodedBytes === undefined) {\n        token.encodedBytes = token.type === _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.string ? (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_3__.fromString)(token.value) : token.value;\n    }\n    // @ts-ignore c'mon\n    return token.encodedBytes;\n}\n/**\n * @param {Bl} buf\n * @param {Token} token\n */ function encodeBytes(buf, token) {\n    const bytes = tokenBytes(token);\n    _0uint_js__WEBPACK_IMPORTED_MODULE_2__.encodeUintValue(buf, token.type.majorEncoded, bytes.length);\n    buf.push(bytes);\n}\n/**\n * @param {Token} token\n * @returns {number}\n */ encodeBytes.encodedSize = function encodedSize(token) {\n    const bytes = tokenBytes(token);\n    return _0uint_js__WEBPACK_IMPORTED_MODULE_2__.encodeUintValue.encodedSize(bytes.length) + bytes.length;\n};\n/**\n * @param {Token} tok1\n * @param {Token} tok2\n * @returns {number}\n */ encodeBytes.compareTokens = function compareTokens(tok1, tok2) {\n    return compareBytes(tokenBytes(tok1), tokenBytes(tok2));\n};\n/**\n * @param {Uint8Array} b1\n * @param {Uint8Array} b2\n * @returns {number}\n */ function compareBytes(b1, b2) {\n    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_3__.compare)(b1, b2);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/2bytes.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/3string.js":
/*!********************************************!*\
  !*** ../node_modules/cborg/lib/3string.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeString16: () => (/* binding */ decodeString16),\n/* harmony export */   decodeString32: () => (/* binding */ decodeString32),\n/* harmony export */   decodeString64: () => (/* binding */ decodeString64),\n/* harmony export */   decodeString8: () => (/* binding */ decodeString8),\n/* harmony export */   decodeStringCompact: () => (/* binding */ decodeStringCompact),\n/* harmony export */   encodeString: () => (/* binding */ encodeString)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n/* harmony import */ var _2bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./2bytes.js */ \"(rsc)/../node_modules/cborg/lib/2bytes.js\");\n/* harmony import */ var _byte_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./byte-utils.js */ \"(rsc)/../node_modules/cborg/lib/byte-utils.js\");\n\n\n\n\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} prefix\n * @param {number} length\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function toToken(data, pos, prefix, length, options) {\n    const totLength = prefix + length;\n    (0,_common_js__WEBPACK_IMPORTED_MODULE_1__.assertEnoughData)(data, pos, totLength);\n    const tok = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.string, (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_4__.toString)(data, pos + prefix, pos + totLength), totLength);\n    if (options.retainStringBytes === true) {\n        tok.byteValue = (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_4__.slice)(data, pos + prefix, pos + totLength);\n    }\n    return tok;\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeStringCompact(data, pos, minor, options) {\n    return toToken(data, pos, 1, minor, options);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeString8(data, pos, _minor, options) {\n    return toToken(data, pos, 2, _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint8(data, pos + 1, options), options);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeString16(data, pos, _minor, options) {\n    return toToken(data, pos, 3, _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint16(data, pos + 1, options), options);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeString32(data, pos, _minor, options) {\n    return toToken(data, pos, 5, _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint32(data, pos + 1, options), options);\n}\n// TODO: maybe we shouldn't support this ..\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeString64(data, pos, _minor, options) {\n    const l = _0uint_js__WEBPACK_IMPORTED_MODULE_2__.readUint64(data, pos + 1, options);\n    if (typeof l === \"bigint\") {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} 64-bit integer string lengths not supported`);\n    }\n    return toToken(data, pos, 9, l, options);\n}\nconst encodeString = _2bytes_js__WEBPACK_IMPORTED_MODULE_3__.encodeBytes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi8zc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQ3VCO0FBQzdCO0FBQ087QUFDUTtBQUVqRDs7O0NBR0MsR0FFRDs7Ozs7OztDQU9DLEdBQ0QsU0FBU1EsUUFBU0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ2xELE1BQU1DLFlBQVlILFNBQVNDO0lBQzNCViw0REFBZ0JBLENBQUNPLE1BQU1DLEtBQUtJO0lBQzVCLE1BQU1DLE1BQU0sSUFBSWYsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDZSxNQUFNLEVBQUVWLHdEQUFRQSxDQUFDRyxNQUFNQyxNQUFNQyxRQUFRRCxNQUFNSSxZQUFZQTtJQUNsRixJQUFJRCxRQUFRSSxpQkFBaUIsS0FBSyxNQUFNO1FBQ3RDRixJQUFJRyxTQUFTLEdBQUdYLHFEQUFLQSxDQUFDRSxNQUFNQyxNQUFNQyxRQUFRRCxNQUFNSTtJQUNsRDtJQUNBLE9BQU9DO0FBQ1Q7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTSSxvQkFBcUJWLElBQUksRUFBRUMsR0FBRyxFQUFFVSxLQUFLLEVBQUVQLE9BQU87SUFDNUQsT0FBT0wsUUFBUUMsTUFBTUMsS0FBSyxHQUFHVSxPQUFPUDtBQUN0QztBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNRLGNBQWVaLElBQUksRUFBRUMsR0FBRyxFQUFFWSxNQUFNLEVBQUVULE9BQU87SUFDdkQsT0FBT0wsUUFBUUMsTUFBTUMsS0FBSyxHQUFHTixnREFBYyxDQUFDSyxNQUFNQyxNQUFNLEdBQUdHLFVBQVVBO0FBQ3ZFO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU1csZUFBZ0JmLElBQUksRUFBRUMsR0FBRyxFQUFFWSxNQUFNLEVBQUVULE9BQU87SUFDeEQsT0FBT0wsUUFBUUMsTUFBTUMsS0FBSyxHQUFHTixpREFBZSxDQUFDSyxNQUFNQyxNQUFNLEdBQUdHLFVBQVVBO0FBQ3hFO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU2EsZUFBZ0JqQixJQUFJLEVBQUVDLEdBQUcsRUFBRVksTUFBTSxFQUFFVCxPQUFPO0lBQ3hELE9BQU9MLFFBQVFDLE1BQU1DLEtBQUssR0FBR04saURBQWUsQ0FBQ0ssTUFBTUMsTUFBTSxHQUFHRyxVQUFVQTtBQUN4RTtBQUVBLDJDQUEyQztBQUMzQzs7Ozs7O0NBTUMsR0FDTSxTQUFTZSxlQUFnQm5CLElBQUksRUFBRUMsR0FBRyxFQUFFWSxNQUFNLEVBQUVULE9BQU87SUFDeEQsTUFBTWdCLElBQUl6QixpREFBZSxDQUFDSyxNQUFNQyxNQUFNLEdBQUdHO0lBQ3pDLElBQUksT0FBT2dCLE1BQU0sVUFBVTtRQUN6QixNQUFNLElBQUlFLE1BQU0sQ0FBQyxFQUFFNUIsdURBQWVBLENBQUMsNENBQTRDLENBQUM7SUFDbEY7SUFDQSxPQUFPSyxRQUFRQyxNQUFNQyxLQUFLLEdBQUdtQixHQUFHaEI7QUFDbEM7QUFFTyxNQUFNbUIsZUFBZTNCLG1EQUFXQSxDQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi8zc3RyaW5nLmpzPzcwM2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9rZW4sIFR5cGUgfSBmcm9tICcuL3Rva2VuLmpzJ1xuaW1wb3J0IHsgYXNzZXJ0RW5vdWdoRGF0YSwgZGVjb2RlRXJyUHJlZml4IH0gZnJvbSAnLi9jb21tb24uanMnXG5pbXBvcnQgKiBhcyB1aW50IGZyb20gJy4vMHVpbnQuanMnXG5pbXBvcnQgeyBlbmNvZGVCeXRlcyB9IGZyb20gJy4vMmJ5dGVzLmpzJ1xuaW1wb3J0IHsgdG9TdHJpbmcsIHNsaWNlIH0gZnJvbSAnLi9ieXRlLXV0aWxzLmpzJ1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vYmwuanMnKS5CbH0gQmxcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2ludGVyZmFjZScpLkRlY29kZU9wdGlvbnN9IERlY29kZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IHByZWZpeFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmZ1bmN0aW9uIHRvVG9rZW4gKGRhdGEsIHBvcywgcHJlZml4LCBsZW5ndGgsIG9wdGlvbnMpIHtcbiAgY29uc3QgdG90TGVuZ3RoID0gcHJlZml4ICsgbGVuZ3RoXG4gIGFzc2VydEVub3VnaERhdGEoZGF0YSwgcG9zLCB0b3RMZW5ndGgpXG4gIGNvbnN0IHRvayA9IG5ldyBUb2tlbihUeXBlLnN0cmluZywgdG9TdHJpbmcoZGF0YSwgcG9zICsgcHJlZml4LCBwb3MgKyB0b3RMZW5ndGgpLCB0b3RMZW5ndGgpXG4gIGlmIChvcHRpb25zLnJldGFpblN0cmluZ0J5dGVzID09PSB0cnVlKSB7XG4gICAgdG9rLmJ5dGVWYWx1ZSA9IHNsaWNlKGRhdGEsIHBvcyArIHByZWZpeCwgcG9zICsgdG90TGVuZ3RoKVxuICB9XG4gIHJldHVybiB0b2tcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVTdHJpbmdDb21wYWN0IChkYXRhLCBwb3MsIG1pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b1Rva2VuKGRhdGEsIHBvcywgMSwgbWlub3IsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gX21pbm9yXG4gKiBAcGFyYW0ge0RlY29kZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVN0cmluZzggKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b1Rva2VuKGRhdGEsIHBvcywgMiwgdWludC5yZWFkVWludDgoZGF0YSwgcG9zICsgMSwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gX21pbm9yXG4gKiBAcGFyYW0ge0RlY29kZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVN0cmluZzE2IChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Ub2tlbihkYXRhLCBwb3MsIDMsIHVpbnQucmVhZFVpbnQxNihkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBfbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1Rva2VufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaW5nMzIgKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b1Rva2VuKGRhdGEsIHBvcywgNSwgdWludC5yZWFkVWludDMyKGRhdGEsIHBvcyArIDEsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vLyBUT0RPOiBtYXliZSB3ZSBzaG91bGRuJ3Qgc3VwcG9ydCB0aGlzIC4uXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVTdHJpbmc2NCAoZGF0YSwgcG9zLCBfbWlub3IsIG9wdGlvbnMpIHtcbiAgY29uc3QgbCA9IHVpbnQucmVhZFVpbnQ2NChkYXRhLCBwb3MgKyAxLCBvcHRpb25zKVxuICBpZiAodHlwZW9mIGwgPT09ICdiaWdpbnQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2RlY29kZUVyclByZWZpeH0gNjQtYml0IGludGVnZXIgc3RyaW5nIGxlbmd0aHMgbm90IHN1cHBvcnRlZGApXG4gIH1cbiAgcmV0dXJuIHRvVG9rZW4oZGF0YSwgcG9zLCA5LCBsLCBvcHRpb25zKVxufVxuXG5leHBvcnQgY29uc3QgZW5jb2RlU3RyaW5nID0gZW5jb2RlQnl0ZXNcbiJdLCJuYW1lcyI6WyJUb2tlbiIsIlR5cGUiLCJhc3NlcnRFbm91Z2hEYXRhIiwiZGVjb2RlRXJyUHJlZml4IiwidWludCIsImVuY29kZUJ5dGVzIiwidG9TdHJpbmciLCJzbGljZSIsInRvVG9rZW4iLCJkYXRhIiwicG9zIiwicHJlZml4IiwibGVuZ3RoIiwib3B0aW9ucyIsInRvdExlbmd0aCIsInRvayIsInN0cmluZyIsInJldGFpblN0cmluZ0J5dGVzIiwiYnl0ZVZhbHVlIiwiZGVjb2RlU3RyaW5nQ29tcGFjdCIsIm1pbm9yIiwiZGVjb2RlU3RyaW5nOCIsIl9taW5vciIsInJlYWRVaW50OCIsImRlY29kZVN0cmluZzE2IiwicmVhZFVpbnQxNiIsImRlY29kZVN0cmluZzMyIiwicmVhZFVpbnQzMiIsImRlY29kZVN0cmluZzY0IiwibCIsInJlYWRVaW50NjQiLCJFcnJvciIsImVuY29kZVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/3string.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/4array.js":
/*!*******************************************!*\
  !*** ../node_modules/cborg/lib/4array.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeArray16: () => (/* binding */ decodeArray16),\n/* harmony export */   decodeArray32: () => (/* binding */ decodeArray32),\n/* harmony export */   decodeArray64: () => (/* binding */ decodeArray64),\n/* harmony export */   decodeArray8: () => (/* binding */ decodeArray8),\n/* harmony export */   decodeArrayCompact: () => (/* binding */ decodeArrayCompact),\n/* harmony export */   decodeArrayIndefinite: () => (/* binding */ decodeArrayIndefinite),\n/* harmony export */   encodeArray: () => (/* binding */ encodeArray)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n\n\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} _data\n * @param {number} _pos\n * @param {number} prefix\n * @param {number} length\n * @returns {Token}\n */ function toToken(_data, _pos, prefix, length) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.array, length, prefix);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} minor\n * @param {DecodeOptions} _options\n * @returns {Token}\n */ function decodeArrayCompact(data, pos, minor, _options) {\n    return toToken(data, pos, 1, minor);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeArray8(data, pos, _minor, options) {\n    return toToken(data, pos, 2, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint8(data, pos + 1, options));\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeArray16(data, pos, _minor, options) {\n    return toToken(data, pos, 3, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint16(data, pos + 1, options));\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeArray32(data, pos, _minor, options) {\n    return toToken(data, pos, 5, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint32(data, pos + 1, options));\n}\n// TODO: maybe we shouldn't support this ..\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeArray64(data, pos, _minor, options) {\n    const l = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint64(data, pos + 1, options);\n    if (typeof l === \"bigint\") {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_2__.decodeErrPrefix} 64-bit integer array lengths not supported`);\n    }\n    return toToken(data, pos, 9, l);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeArrayIndefinite(data, pos, _minor, options) {\n    if (options.allowIndefinite === false) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_2__.decodeErrPrefix} indefinite length items not allowed`);\n    }\n    return toToken(data, pos, 1, Infinity);\n}\n/**\n * @param {Bl} buf\n * @param {Token} token\n */ function encodeArray(buf, token) {\n    _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUintValue(buf, _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.array.majorEncoded, token.value);\n}\n// using an array as a map key, are you sure about this? we can only sort\n// by map length here, it's up to the encoder to decide to look deeper\nencodeArray.compareTokens = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUint.compareTokens;\n/**\n * @param {Token} token\n * @returns {number}\n */ encodeArray.encodedSize = function encodedSize(token) {\n    return _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUintValue.encodedSize(token.value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi80YXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF3QztBQUNOO0FBQ1c7QUFFN0M7OztDQUdDLEdBRUQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0ksUUFBU0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtJQUMzQyxPQUFPLElBQUlSLDRDQUFLQSxDQUFDQywyQ0FBSUEsQ0FBQ1EsS0FBSyxFQUFFRCxRQUFRRDtBQUN2QztBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNHLG1CQUFvQkMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsUUFBUTtJQUM1RCxPQUFPVixRQUFRTyxNQUFNQyxLQUFLLEdBQUdDO0FBQy9CO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU0UsYUFBY0osSUFBSSxFQUFFQyxHQUFHLEVBQUVJLE1BQU0sRUFBRUMsT0FBTztJQUN0RCxPQUFPYixRQUFRTyxNQUFNQyxLQUFLLEdBQUdWLGdEQUFjLENBQUNTLE1BQU1DLE1BQU0sR0FBR0s7QUFDN0Q7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRSxjQUFlUixJQUFJLEVBQUVDLEdBQUcsRUFBRUksTUFBTSxFQUFFQyxPQUFPO0lBQ3ZELE9BQU9iLFFBQVFPLE1BQU1DLEtBQUssR0FBR1YsaURBQWUsQ0FBQ1MsTUFBTUMsTUFBTSxHQUFHSztBQUM5RDtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNJLGNBQWVWLElBQUksRUFBRUMsR0FBRyxFQUFFSSxNQUFNLEVBQUVDLE9BQU87SUFDdkQsT0FBT2IsUUFBUU8sTUFBTUMsS0FBSyxHQUFHVixpREFBZSxDQUFDUyxNQUFNQyxNQUFNLEdBQUdLO0FBQzlEO0FBRUEsMkNBQTJDO0FBQzNDOzs7Ozs7Q0FNQyxHQUNNLFNBQVNNLGNBQWVaLElBQUksRUFBRUMsR0FBRyxFQUFFSSxNQUFNLEVBQUVDLE9BQU87SUFDdkQsTUFBTU8sSUFBSXRCLGlEQUFlLENBQUNTLE1BQU1DLE1BQU0sR0FBR0s7SUFDekMsSUFBSSxPQUFPTyxNQUFNLFVBQVU7UUFDekIsTUFBTSxJQUFJRSxNQUFNLENBQUMsRUFBRXZCLHVEQUFlQSxDQUFDLDJDQUEyQyxDQUFDO0lBQ2pGO0lBQ0EsT0FBT0MsUUFBUU8sTUFBTUMsS0FBSyxHQUFHWTtBQUMvQjtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNHLHNCQUF1QmhCLElBQUksRUFBRUMsR0FBRyxFQUFFSSxNQUFNLEVBQUVDLE9BQU87SUFDL0QsSUFBSUEsUUFBUVcsZUFBZSxLQUFLLE9BQU87UUFDckMsTUFBTSxJQUFJRixNQUFNLENBQUMsRUFBRXZCLHVEQUFlQSxDQUFDLG9DQUFvQyxDQUFDO0lBQzFFO0lBQ0EsT0FBT0MsUUFBUU8sTUFBTUMsS0FBSyxHQUFHaUI7QUFDL0I7QUFFQTs7O0NBR0MsR0FDTSxTQUFTQyxZQUFhQyxHQUFHLEVBQUVDLEtBQUs7SUFDckM5QixzREFBb0IsQ0FBQzZCLEtBQUs5QiwyQ0FBSUEsQ0FBQ1EsS0FBSyxDQUFDeUIsWUFBWSxFQUFFRixNQUFNRyxLQUFLO0FBQ2hFO0FBRUEseUVBQXlFO0FBQ3pFLHNFQUFzRTtBQUN0RUwsWUFBWU0sYUFBYSxHQUFHbEMsaURBQWUsQ0FBQ2tDLGFBQWE7QUFFekQ7OztDQUdDLEdBQ0ROLFlBQVlRLFdBQVcsR0FBRyxTQUFTQSxZQUFhTixLQUFLO0lBQ25ELE9BQU85QixzREFBb0IsQ0FBQ29DLFdBQVcsQ0FBQ04sTUFBTUcsS0FBSztBQUNyRCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9jYm9yZy9saWIvNGFycmF5LmpzPzM3YzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9rZW4sIFR5cGUgfSBmcm9tICcuL3Rva2VuLmpzJ1xuaW1wb3J0ICogYXMgdWludCBmcm9tICcuLzB1aW50LmpzJ1xuaW1wb3J0IHsgZGVjb2RlRXJyUHJlZml4IH0gZnJvbSAnLi9jb21tb24uanMnXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9ibC5qcycpLkJsfSBCbFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vaW50ZXJmYWNlJykuRGVjb2RlT3B0aW9uc30gRGVjb2RlT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBfZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IF9wb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcmVmaXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZnVuY3Rpb24gdG9Ub2tlbiAoX2RhdGEsIF9wb3MsIHByZWZpeCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgVG9rZW4oVHlwZS5hcnJheSwgbGVuZ3RoLCBwcmVmaXgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gX29wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUFycmF5Q29tcGFjdCAoZGF0YSwgcG9zLCBtaW5vciwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIHRvVG9rZW4oZGF0YSwgcG9zLCAxLCBtaW5vcilcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBfbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1Rva2VufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQXJyYXk4IChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Ub2tlbihkYXRhLCBwb3MsIDIsIHVpbnQucmVhZFVpbnQ4KGRhdGEsIHBvcyArIDEsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVBcnJheTE2IChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Ub2tlbihkYXRhLCBwb3MsIDMsIHVpbnQucmVhZFVpbnQxNihkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBfbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1Rva2VufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQXJyYXkzMiAoZGF0YSwgcG9zLCBfbWlub3IsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvVG9rZW4oZGF0YSwgcG9zLCA1LCB1aW50LnJlYWRVaW50MzIoZGF0YSwgcG9zICsgMSwgb3B0aW9ucykpXG59XG5cbi8vIFRPRE86IG1heWJlIHdlIHNob3VsZG4ndCBzdXBwb3J0IHRoaXMgLi5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gX21pbm9yXG4gKiBAcGFyYW0ge0RlY29kZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUFycmF5NjQgKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIGNvbnN0IGwgPSB1aW50LnJlYWRVaW50NjQoZGF0YSwgcG9zICsgMSwgb3B0aW9ucylcbiAgaWYgKHR5cGVvZiBsID09PSAnYmlnaW50Jykge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtkZWNvZGVFcnJQcmVmaXh9IDY0LWJpdCBpbnRlZ2VyIGFycmF5IGxlbmd0aHMgbm90IHN1cHBvcnRlZGApXG4gIH1cbiAgcmV0dXJuIHRvVG9rZW4oZGF0YSwgcG9zLCA5LCBsKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVBcnJheUluZGVmaW5pdGUgKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmFsbG93SW5kZWZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZGVjb2RlRXJyUHJlZml4fSBpbmRlZmluaXRlIGxlbmd0aCBpdGVtcyBub3QgYWxsb3dlZGApXG4gIH1cbiAgcmV0dXJuIHRvVG9rZW4oZGF0YSwgcG9zLCAxLCBJbmZpbml0eSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0JsfSBidWZcbiAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVBcnJheSAoYnVmLCB0b2tlbikge1xuICB1aW50LmVuY29kZVVpbnRWYWx1ZShidWYsIFR5cGUuYXJyYXkubWFqb3JFbmNvZGVkLCB0b2tlbi52YWx1ZSlcbn1cblxuLy8gdXNpbmcgYW4gYXJyYXkgYXMgYSBtYXAga2V5LCBhcmUgeW91IHN1cmUgYWJvdXQgdGhpcz8gd2UgY2FuIG9ubHkgc29ydFxuLy8gYnkgbWFwIGxlbmd0aCBoZXJlLCBpdCdzIHVwIHRvIHRoZSBlbmNvZGVyIHRvIGRlY2lkZSB0byBsb29rIGRlZXBlclxuZW5jb2RlQXJyYXkuY29tcGFyZVRva2VucyA9IHVpbnQuZW5jb2RlVWludC5jb21wYXJlVG9rZW5zXG5cbi8qKlxuICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmVuY29kZUFycmF5LmVuY29kZWRTaXplID0gZnVuY3Rpb24gZW5jb2RlZFNpemUgKHRva2VuKSB7XG4gIHJldHVybiB1aW50LmVuY29kZVVpbnRWYWx1ZS5lbmNvZGVkU2l6ZSh0b2tlbi52YWx1ZSlcbn1cbiJdLCJuYW1lcyI6WyJUb2tlbiIsIlR5cGUiLCJ1aW50IiwiZGVjb2RlRXJyUHJlZml4IiwidG9Ub2tlbiIsIl9kYXRhIiwiX3BvcyIsInByZWZpeCIsImxlbmd0aCIsImFycmF5IiwiZGVjb2RlQXJyYXlDb21wYWN0IiwiZGF0YSIsInBvcyIsIm1pbm9yIiwiX29wdGlvbnMiLCJkZWNvZGVBcnJheTgiLCJfbWlub3IiLCJvcHRpb25zIiwicmVhZFVpbnQ4IiwiZGVjb2RlQXJyYXkxNiIsInJlYWRVaW50MTYiLCJkZWNvZGVBcnJheTMyIiwicmVhZFVpbnQzMiIsImRlY29kZUFycmF5NjQiLCJsIiwicmVhZFVpbnQ2NCIsIkVycm9yIiwiZGVjb2RlQXJyYXlJbmRlZmluaXRlIiwiYWxsb3dJbmRlZmluaXRlIiwiSW5maW5pdHkiLCJlbmNvZGVBcnJheSIsImJ1ZiIsInRva2VuIiwiZW5jb2RlVWludFZhbHVlIiwibWFqb3JFbmNvZGVkIiwidmFsdWUiLCJjb21wYXJlVG9rZW5zIiwiZW5jb2RlVWludCIsImVuY29kZWRTaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/4array.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/5map.js":
/*!*****************************************!*\
  !*** ../node_modules/cborg/lib/5map.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeMap16: () => (/* binding */ decodeMap16),\n/* harmony export */   decodeMap32: () => (/* binding */ decodeMap32),\n/* harmony export */   decodeMap64: () => (/* binding */ decodeMap64),\n/* harmony export */   decodeMap8: () => (/* binding */ decodeMap8),\n/* harmony export */   decodeMapCompact: () => (/* binding */ decodeMapCompact),\n/* harmony export */   decodeMapIndefinite: () => (/* binding */ decodeMapIndefinite),\n/* harmony export */   encodeMap: () => (/* binding */ encodeMap)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n\n\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} _data\n * @param {number} _pos\n * @param {number} prefix\n * @param {number} length\n * @returns {Token}\n */ function toToken(_data, _pos, prefix, length) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.map, length, prefix);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} minor\n * @param {DecodeOptions} _options\n * @returns {Token}\n */ function decodeMapCompact(data, pos, minor, _options) {\n    return toToken(data, pos, 1, minor);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeMap8(data, pos, _minor, options) {\n    return toToken(data, pos, 2, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint8(data, pos + 1, options));\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeMap16(data, pos, _minor, options) {\n    return toToken(data, pos, 3, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint16(data, pos + 1, options));\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeMap32(data, pos, _minor, options) {\n    return toToken(data, pos, 5, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint32(data, pos + 1, options));\n}\n// TODO: maybe we shouldn't support this ..\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeMap64(data, pos, _minor, options) {\n    const l = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint64(data, pos + 1, options);\n    if (typeof l === \"bigint\") {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_2__.decodeErrPrefix} 64-bit integer map lengths not supported`);\n    }\n    return toToken(data, pos, 9, l);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeMapIndefinite(data, pos, _minor, options) {\n    if (options.allowIndefinite === false) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_2__.decodeErrPrefix} indefinite length items not allowed`);\n    }\n    return toToken(data, pos, 1, Infinity);\n}\n/**\n * @param {Bl} buf\n * @param {Token} token\n */ function encodeMap(buf, token) {\n    _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUintValue(buf, _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.map.majorEncoded, token.value);\n}\n// using a map as a map key, are you sure about this? we can only sort\n// by map length here, it's up to the encoder to decide to look deeper\nencodeMap.compareTokens = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUint.compareTokens;\n/**\n * @param {Token} token\n * @returns {number}\n */ encodeMap.encodedSize = function encodedSize(token) {\n    return _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUintValue.encodedSize(token.value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi81bWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFDTjtBQUNXO0FBRTdDOzs7Q0FHQyxHQUVEOzs7Ozs7Q0FNQyxHQUNELFNBQVNJLFFBQVNDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE1BQU07SUFDM0MsT0FBTyxJQUFJUiw0Q0FBS0EsQ0FBQ0MsMkNBQUlBLENBQUNRLEdBQUcsRUFBRUQsUUFBUUQ7QUFDckM7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRyxpQkFBa0JDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLFFBQVE7SUFDMUQsT0FBT1YsUUFBUU8sTUFBTUMsS0FBSyxHQUFHQztBQUMvQjtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNFLFdBQVlKLElBQUksRUFBRUMsR0FBRyxFQUFFSSxNQUFNLEVBQUVDLE9BQU87SUFDcEQsT0FBT2IsUUFBUU8sTUFBTUMsS0FBSyxHQUFHVixnREFBYyxDQUFDUyxNQUFNQyxNQUFNLEdBQUdLO0FBQzdEO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU0UsWUFBYVIsSUFBSSxFQUFFQyxHQUFHLEVBQUVJLE1BQU0sRUFBRUMsT0FBTztJQUNyRCxPQUFPYixRQUFRTyxNQUFNQyxLQUFLLEdBQUdWLGlEQUFlLENBQUNTLE1BQU1DLE1BQU0sR0FBR0s7QUFDOUQ7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTSSxZQUFhVixJQUFJLEVBQUVDLEdBQUcsRUFBRUksTUFBTSxFQUFFQyxPQUFPO0lBQ3JELE9BQU9iLFFBQVFPLE1BQU1DLEtBQUssR0FBR1YsaURBQWUsQ0FBQ1MsTUFBTUMsTUFBTSxHQUFHSztBQUM5RDtBQUVBLDJDQUEyQztBQUMzQzs7Ozs7O0NBTUMsR0FDTSxTQUFTTSxZQUFhWixJQUFJLEVBQUVDLEdBQUcsRUFBRUksTUFBTSxFQUFFQyxPQUFPO0lBQ3JELE1BQU1PLElBQUl0QixpREFBZSxDQUFDUyxNQUFNQyxNQUFNLEdBQUdLO0lBQ3pDLElBQUksT0FBT08sTUFBTSxVQUFVO1FBQ3pCLE1BQU0sSUFBSUUsTUFBTSxDQUFDLEVBQUV2Qix1REFBZUEsQ0FBQyx5Q0FBeUMsQ0FBQztJQUMvRTtJQUNBLE9BQU9DLFFBQVFPLE1BQU1DLEtBQUssR0FBR1k7QUFDL0I7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRyxvQkFBcUJoQixJQUFJLEVBQUVDLEdBQUcsRUFBRUksTUFBTSxFQUFFQyxPQUFPO0lBQzdELElBQUlBLFFBQVFXLGVBQWUsS0FBSyxPQUFPO1FBQ3JDLE1BQU0sSUFBSUYsTUFBTSxDQUFDLEVBQUV2Qix1REFBZUEsQ0FBQyxvQ0FBb0MsQ0FBQztJQUMxRTtJQUNBLE9BQU9DLFFBQVFPLE1BQU1DLEtBQUssR0FBR2lCO0FBQy9CO0FBRUE7OztDQUdDLEdBQ00sU0FBU0MsVUFBV0MsR0FBRyxFQUFFQyxLQUFLO0lBQ25DOUIsc0RBQW9CLENBQUM2QixLQUFLOUIsMkNBQUlBLENBQUNRLEdBQUcsQ0FBQ3lCLFlBQVksRUFBRUYsTUFBTUcsS0FBSztBQUM5RDtBQUVBLHNFQUFzRTtBQUN0RSxzRUFBc0U7QUFDdEVMLFVBQVVNLGFBQWEsR0FBR2xDLGlEQUFlLENBQUNrQyxhQUFhO0FBRXZEOzs7Q0FHQyxHQUNETixVQUFVUSxXQUFXLEdBQUcsU0FBU0EsWUFBYU4sS0FBSztJQUNqRCxPQUFPOUIsc0RBQW9CLENBQUNvQyxXQUFXLENBQUNOLE1BQU1HLEtBQUs7QUFDckQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvY2JvcmcvbGliLzVtYXAuanM/YjZiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb2tlbiwgVHlwZSB9IGZyb20gJy4vdG9rZW4uanMnXG5pbXBvcnQgKiBhcyB1aW50IGZyb20gJy4vMHVpbnQuanMnXG5pbXBvcnQgeyBkZWNvZGVFcnJQcmVmaXggfSBmcm9tICcuL2NvbW1vbi5qcydcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2JsLmpzJykuQmx9IEJsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9pbnRlcmZhY2UnKS5EZWNvZGVPcHRpb25zfSBEZWNvZGVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IF9kYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gX3Bvc1xuICogQHBhcmFtIHtudW1iZXJ9IHByZWZpeFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybnMge1Rva2VufVxuICovXG5mdW5jdGlvbiB0b1Rva2VuIChfZGF0YSwgX3BvcywgcHJlZml4LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyBUb2tlbihUeXBlLm1hcCwgbGVuZ3RoLCBwcmVmaXgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gX29wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU1hcENvbXBhY3QgKGRhdGEsIHBvcywgbWlub3IsIF9vcHRpb25zKSB7XG4gIHJldHVybiB0b1Rva2VuKGRhdGEsIHBvcywgMSwgbWlub3IpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gX21pbm9yXG4gKiBAcGFyYW0ge0RlY29kZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU1hcDggKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b1Rva2VuKGRhdGEsIHBvcywgMiwgdWludC5yZWFkVWludDgoZGF0YSwgcG9zICsgMSwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zXG4gKiBAcGFyYW0ge251bWJlcn0gX21pbm9yXG4gKiBAcGFyYW0ge0RlY29kZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUb2tlbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU1hcDE2IChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Ub2tlbihkYXRhLCBwb3MsIDMsIHVpbnQucmVhZFVpbnQxNihkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBfbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1Rva2VufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlTWFwMzIgKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b1Rva2VuKGRhdGEsIHBvcywgNSwgdWludC5yZWFkVWludDMyKGRhdGEsIHBvcyArIDEsIG9wdGlvbnMpKVxufVxuXG4vLyBUT0RPOiBtYXliZSB3ZSBzaG91bGRuJ3Qgc3VwcG9ydCB0aGlzIC4uXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVNYXA2NCAoZGF0YSwgcG9zLCBfbWlub3IsIG9wdGlvbnMpIHtcbiAgY29uc3QgbCA9IHVpbnQucmVhZFVpbnQ2NChkYXRhLCBwb3MgKyAxLCBvcHRpb25zKVxuICBpZiAodHlwZW9mIGwgPT09ICdiaWdpbnQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2RlY29kZUVyclByZWZpeH0gNjQtYml0IGludGVnZXIgbWFwIGxlbmd0aHMgbm90IHN1cHBvcnRlZGApXG4gIH1cbiAgcmV0dXJuIHRvVG9rZW4oZGF0YSwgcG9zLCA5LCBsKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVNYXBJbmRlZmluaXRlIChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5hbGxvd0luZGVmaW5pdGUgPT09IGZhbHNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2RlY29kZUVyclByZWZpeH0gaW5kZWZpbml0ZSBsZW5ndGggaXRlbXMgbm90IGFsbG93ZWRgKVxuICB9XG4gIHJldHVybiB0b1Rva2VuKGRhdGEsIHBvcywgMSwgSW5maW5pdHkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtCbH0gYnVmXG4gKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlTWFwIChidWYsIHRva2VuKSB7XG4gIHVpbnQuZW5jb2RlVWludFZhbHVlKGJ1ZiwgVHlwZS5tYXAubWFqb3JFbmNvZGVkLCB0b2tlbi52YWx1ZSlcbn1cblxuLy8gdXNpbmcgYSBtYXAgYXMgYSBtYXAga2V5LCBhcmUgeW91IHN1cmUgYWJvdXQgdGhpcz8gd2UgY2FuIG9ubHkgc29ydFxuLy8gYnkgbWFwIGxlbmd0aCBoZXJlLCBpdCdzIHVwIHRvIHRoZSBlbmNvZGVyIHRvIGRlY2lkZSB0byBsb29rIGRlZXBlclxuZW5jb2RlTWFwLmNvbXBhcmVUb2tlbnMgPSB1aW50LmVuY29kZVVpbnQuY29tcGFyZVRva2Vuc1xuXG4vKipcbiAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5lbmNvZGVNYXAuZW5jb2RlZFNpemUgPSBmdW5jdGlvbiBlbmNvZGVkU2l6ZSAodG9rZW4pIHtcbiAgcmV0dXJuIHVpbnQuZW5jb2RlVWludFZhbHVlLmVuY29kZWRTaXplKHRva2VuLnZhbHVlKVxufVxuIl0sIm5hbWVzIjpbIlRva2VuIiwiVHlwZSIsInVpbnQiLCJkZWNvZGVFcnJQcmVmaXgiLCJ0b1Rva2VuIiwiX2RhdGEiLCJfcG9zIiwicHJlZml4IiwibGVuZ3RoIiwibWFwIiwiZGVjb2RlTWFwQ29tcGFjdCIsImRhdGEiLCJwb3MiLCJtaW5vciIsIl9vcHRpb25zIiwiZGVjb2RlTWFwOCIsIl9taW5vciIsIm9wdGlvbnMiLCJyZWFkVWludDgiLCJkZWNvZGVNYXAxNiIsInJlYWRVaW50MTYiLCJkZWNvZGVNYXAzMiIsInJlYWRVaW50MzIiLCJkZWNvZGVNYXA2NCIsImwiLCJyZWFkVWludDY0IiwiRXJyb3IiLCJkZWNvZGVNYXBJbmRlZmluaXRlIiwiYWxsb3dJbmRlZmluaXRlIiwiSW5maW5pdHkiLCJlbmNvZGVNYXAiLCJidWYiLCJ0b2tlbiIsImVuY29kZVVpbnRWYWx1ZSIsIm1ham9yRW5jb2RlZCIsInZhbHVlIiwiY29tcGFyZVRva2VucyIsImVuY29kZVVpbnQiLCJlbmNvZGVkU2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/5map.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/6tag.js":
/*!*****************************************!*\
  !*** ../node_modules/cborg/lib/6tag.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeTag16: () => (/* binding */ decodeTag16),\n/* harmony export */   decodeTag32: () => (/* binding */ decodeTag32),\n/* harmony export */   decodeTag64: () => (/* binding */ decodeTag64),\n/* harmony export */   decodeTag8: () => (/* binding */ decodeTag8),\n/* harmony export */   decodeTagCompact: () => (/* binding */ decodeTagCompact),\n/* harmony export */   encodeTag: () => (/* binding */ encodeTag)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} _data\n * @param {number} _pos\n * @param {number} minor\n * @param {DecodeOptions} _options\n * @returns {Token}\n */ function decodeTagCompact(_data, _pos, minor, _options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.tag, minor, 1);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeTag8(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.tag, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint8(data, pos + 1, options), 2);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeTag16(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.tag, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint16(data, pos + 1, options), 3);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeTag32(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.tag, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint32(data, pos + 1, options), 5);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeTag64(data, pos, _minor, options) {\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.tag, _0uint_js__WEBPACK_IMPORTED_MODULE_1__.readUint64(data, pos + 1, options), 9);\n}\n/**\n * @param {Bl} buf\n * @param {Token} token\n */ function encodeTag(buf, token) {\n    _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUintValue(buf, _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.tag.majorEncoded, token.value);\n}\nencodeTag.compareTokens = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUint.compareTokens;\n/**\n * @param {Token} token\n * @returns {number}\n */ encodeTag.encodedSize = function encodedSize(token) {\n    return _0uint_js__WEBPACK_IMPORTED_MODULE_1__.encodeUintValue.encodedSize(token.value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi82dGFnLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXdDO0FBQ047QUFFbEM7OztDQUdDLEdBRUQ7Ozs7OztDQU1DLEdBQ00sU0FBU0csaUJBQWtCQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxRQUFRO0lBQzVELE9BQU8sSUFBSVAsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDTyxHQUFHLEVBQUVGLE9BQU87QUFDcEM7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRyxXQUFZQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3BELE9BQU8sSUFBSWIsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDTyxHQUFHLEVBQUVOLGdEQUFjLENBQUNRLE1BQU1DLE1BQU0sR0FBR0UsVUFBVTtBQUNyRTtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNFLFlBQWFMLElBQUksRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDckQsT0FBTyxJQUFJYiw0Q0FBS0EsQ0FBQ0MsMkNBQUlBLENBQUNPLEdBQUcsRUFBRU4saURBQWUsQ0FBQ1EsTUFBTUMsTUFBTSxHQUFHRSxVQUFVO0FBQ3RFO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU0ksWUFBYVAsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUNyRCxPQUFPLElBQUliLDRDQUFLQSxDQUFDQywyQ0FBSUEsQ0FBQ08sR0FBRyxFQUFFTixpREFBZSxDQUFDUSxNQUFNQyxNQUFNLEdBQUdFLFVBQVU7QUFDdEU7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTTSxZQUFhVCxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3JELE9BQU8sSUFBSWIsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDTyxHQUFHLEVBQUVOLGlEQUFlLENBQUNRLE1BQU1DLE1BQU0sR0FBR0UsVUFBVTtBQUN0RTtBQUVBOzs7Q0FHQyxHQUNNLFNBQVNRLFVBQVdDLEdBQUcsRUFBRUMsS0FBSztJQUNuQ3JCLHNEQUFvQixDQUFDb0IsS0FBS3JCLDJDQUFJQSxDQUFDTyxHQUFHLENBQUNpQixZQUFZLEVBQUVGLE1BQU1HLEtBQUs7QUFDOUQ7QUFFQUwsVUFBVU0sYUFBYSxHQUFHekIsaURBQWUsQ0FBQ3lCLGFBQWE7QUFFdkQ7OztDQUdDLEdBQ0ROLFVBQVVRLFdBQVcsR0FBRyxTQUFTQSxZQUFhTixLQUFLO0lBQ2pELE9BQU9yQixzREFBb0IsQ0FBQzJCLFdBQVcsQ0FBQ04sTUFBTUcsS0FBSztBQUNyRCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9jYm9yZy9saWIvNnRhZy5qcz82YWQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRva2VuLCBUeXBlIH0gZnJvbSAnLi90b2tlbi5qcydcbmltcG9ydCAqIGFzIHVpbnQgZnJvbSAnLi8wdWludC5qcydcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2JsLmpzJykuQmx9IEJsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9pbnRlcmZhY2UnKS5EZWNvZGVPcHRpb25zfSBEZWNvZGVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IF9kYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gX3Bvc1xuICogQHBhcmFtIHtudW1iZXJ9IG1pbm9yXG4gKiBAcGFyYW0ge0RlY29kZU9wdGlvbnN9IF9vcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVUYWdDb21wYWN0IChfZGF0YSwgX3BvcywgbWlub3IsIF9vcHRpb25zKSB7XG4gIHJldHVybiBuZXcgVG9rZW4oVHlwZS50YWcsIG1pbm9yLCAxKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IF9taW5vclxuICogQHBhcmFtIHtEZWNvZGVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVUYWc4IChkYXRhLCBwb3MsIF9taW5vciwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFRva2VuKFR5cGUudGFnLCB1aW50LnJlYWRVaW50OChkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSwgMilcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBfbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1Rva2VufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVGFnMTYgKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgVG9rZW4oVHlwZS50YWcsIHVpbnQucmVhZFVpbnQxNihkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSwgMylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBfbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1Rva2VufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVGFnMzIgKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgVG9rZW4oVHlwZS50YWcsIHVpbnQucmVhZFVpbnQzMihkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSwgNSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBfbWlub3JcbiAqIEBwYXJhbSB7RGVjb2RlT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1Rva2VufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVGFnNjQgKGRhdGEsIHBvcywgX21pbm9yLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgVG9rZW4oVHlwZS50YWcsIHVpbnQucmVhZFVpbnQ2NChkYXRhLCBwb3MgKyAxLCBvcHRpb25zKSwgOSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0JsfSBidWZcbiAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVUYWcgKGJ1ZiwgdG9rZW4pIHtcbiAgdWludC5lbmNvZGVVaW50VmFsdWUoYnVmLCBUeXBlLnRhZy5tYWpvckVuY29kZWQsIHRva2VuLnZhbHVlKVxufVxuXG5lbmNvZGVUYWcuY29tcGFyZVRva2VucyA9IHVpbnQuZW5jb2RlVWludC5jb21wYXJlVG9rZW5zXG5cbi8qKlxuICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmVuY29kZVRhZy5lbmNvZGVkU2l6ZSA9IGZ1bmN0aW9uIGVuY29kZWRTaXplICh0b2tlbikge1xuICByZXR1cm4gdWludC5lbmNvZGVVaW50VmFsdWUuZW5jb2RlZFNpemUodG9rZW4udmFsdWUpXG59XG4iXSwibmFtZXMiOlsiVG9rZW4iLCJUeXBlIiwidWludCIsImRlY29kZVRhZ0NvbXBhY3QiLCJfZGF0YSIsIl9wb3MiLCJtaW5vciIsIl9vcHRpb25zIiwidGFnIiwiZGVjb2RlVGFnOCIsImRhdGEiLCJwb3MiLCJfbWlub3IiLCJvcHRpb25zIiwicmVhZFVpbnQ4IiwiZGVjb2RlVGFnMTYiLCJyZWFkVWludDE2IiwiZGVjb2RlVGFnMzIiLCJyZWFkVWludDMyIiwiZGVjb2RlVGFnNjQiLCJyZWFkVWludDY0IiwiZW5jb2RlVGFnIiwiYnVmIiwidG9rZW4iLCJlbmNvZGVVaW50VmFsdWUiLCJtYWpvckVuY29kZWQiLCJ2YWx1ZSIsImNvbXBhcmVUb2tlbnMiLCJlbmNvZGVVaW50IiwiZW5jb2RlZFNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/6tag.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/7float.js":
/*!*******************************************!*\
  !*** ../node_modules/cborg/lib/7float.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBreak: () => (/* binding */ decodeBreak),\n/* harmony export */   decodeFloat16: () => (/* binding */ decodeFloat16),\n/* harmony export */   decodeFloat32: () => (/* binding */ decodeFloat32),\n/* harmony export */   decodeFloat64: () => (/* binding */ decodeFloat64),\n/* harmony export */   decodeUndefined: () => (/* binding */ decodeUndefined),\n/* harmony export */   encodeFloat: () => (/* binding */ encodeFloat)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n// TODO: shift some of the bytes logic to bytes-utils so we can use Buffer\n// where possible\n\n\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n * @typedef {import('../interface').EncodeOptions} EncodeOptions\n */ const MINOR_FALSE = 20;\nconst MINOR_TRUE = 21;\nconst MINOR_NULL = 22;\nconst MINOR_UNDEFINED = 23;\n/**\n * @param {Uint8Array} _data\n * @param {number} _pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeUndefined(_data, _pos, _minor, options) {\n    if (options.allowUndefined === false) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} undefined values are not supported`);\n    } else if (options.coerceUndefinedToNull === true) {\n        return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.null, null, 1);\n    }\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.undefined, undefined, 1);\n}\n/**\n * @param {Uint8Array} _data\n * @param {number} _pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeBreak(_data, _pos, _minor, options) {\n    if (options.allowIndefinite === false) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} indefinite length items not allowed`);\n    }\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.break, undefined, 1);\n}\n/**\n * @param {number} value\n * @param {number} bytes\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function createToken(value, bytes, options) {\n    if (options) {\n        if (options.allowNaN === false && Number.isNaN(value)) {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} NaN values are not supported`);\n        }\n        if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} Infinity values are not supported`);\n        }\n    }\n    return new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.float, value, bytes);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeFloat16(data, pos, _minor, options) {\n    return createToken(readFloat16(data, pos + 1), 3, options);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeFloat32(data, pos, _minor, options) {\n    return createToken(readFloat32(data, pos + 1), 5, options);\n}\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */ function decodeFloat64(data, pos, _minor, options) {\n    return createToken(readFloat64(data, pos + 1), 9, options);\n}\n/**\n * @param {Bl} buf\n * @param {Token} token\n * @param {EncodeOptions} options\n */ function encodeFloat(buf, token, options) {\n    const float = token.value;\n    if (float === false) {\n        buf.push([\n            _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.float.majorEncoded | MINOR_FALSE\n        ]);\n    } else if (float === true) {\n        buf.push([\n            _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.float.majorEncoded | MINOR_TRUE\n        ]);\n    } else if (float === null) {\n        buf.push([\n            _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.float.majorEncoded | MINOR_NULL\n        ]);\n    } else if (float === undefined) {\n        buf.push([\n            _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.float.majorEncoded | MINOR_UNDEFINED\n        ]);\n    } else {\n        let decoded;\n        let success = false;\n        if (!options || options.float64 !== true) {\n            encodeFloat16(float);\n            decoded = readFloat16(ui8a, 1);\n            if (float === decoded || Number.isNaN(float)) {\n                ui8a[0] = 0xf9;\n                buf.push(ui8a.slice(0, 3));\n                success = true;\n            } else {\n                encodeFloat32(float);\n                decoded = readFloat32(ui8a, 1);\n                if (float === decoded) {\n                    ui8a[0] = 0xfa;\n                    buf.push(ui8a.slice(0, 5));\n                    success = true;\n                }\n            }\n        }\n        if (!success) {\n            encodeFloat64(float);\n            decoded = readFloat64(ui8a, 1);\n            ui8a[0] = 0xfb;\n            buf.push(ui8a.slice(0, 9));\n        }\n    }\n}\n/**\n * @param {Token} token\n * @param {EncodeOptions} options\n * @returns {number}\n */ encodeFloat.encodedSize = function encodedSize(token, options) {\n    const float = token.value;\n    if (float === false || float === true || float === null || float === undefined) {\n        return 1;\n    }\n    if (!options || options.float64 !== true) {\n        encodeFloat16(float);\n        let decoded = readFloat16(ui8a, 1);\n        if (float === decoded || Number.isNaN(float)) {\n            return 3;\n        }\n        encodeFloat32(float);\n        decoded = readFloat32(ui8a, 1);\n        if (float === decoded) {\n            return 5;\n        }\n    }\n    return 9;\n};\nconst buffer = new ArrayBuffer(9);\nconst dataView = new DataView(buffer, 1);\nconst ui8a = new Uint8Array(buffer, 0);\n/**\n * @param {number} inp\n */ function encodeFloat16(inp) {\n    if (inp === Infinity) {\n        dataView.setUint16(0, 0x7c00, false);\n    } else if (inp === -Infinity) {\n        dataView.setUint16(0, 0xfc00, false);\n    } else if (Number.isNaN(inp)) {\n        dataView.setUint16(0, 0x7e00, false);\n    } else {\n        dataView.setFloat32(0, inp);\n        const valu32 = dataView.getUint32(0);\n        const exponent = (valu32 & 0x7f800000) >> 23;\n        const mantissa = valu32 & 0x7fffff;\n        /* c8 ignore next 6 */ if (exponent === 0xff) {\n            // too big, Infinity, but this should be hard (impossible?) to trigger\n            dataView.setUint16(0, 0x7c00, false);\n        } else if (exponent === 0x00) {\n            // 0.0, -0.0 and subnormals, shouldn't be possible to get here because 0.0 should be counted as an int\n            dataView.setUint16(0, (inp & 0x80000000) >> 16 | mantissa >> 13, false);\n        } else {\n            // chunks of logic here borrowed from https://github.com/PJK/libcbor/blob/c78f437182533e3efa8d963ff4b945bb635c2284/src/cbor/encoding.c#L127\n            const logicalExponent = exponent - 127;\n            // Now we know that 2^exponent <= 0 logically\n            /* c8 ignore next 6 */ if (logicalExponent < -24) {\n                /* No unambiguous representation exists, this float is not a half float\n          and is too small to be represented using a half, round off to zero.\n          Consistent with the reference implementation. */ // should be difficult (impossible?) to get here in JS\n                dataView.setUint16(0, 0);\n            } else if (logicalExponent < -14) {\n                /* Offset the remaining decimal places by shifting the significand, the\n          value is lost. This is an implementation decision that works around the\n          absence of standard half-float in the language. */ dataView.setUint16(0, (valu32 & 0x80000000) >> 16 | /* sign bit */ 1 << 24 + logicalExponent, false);\n            } else {\n                dataView.setUint16(0, (valu32 & 0x80000000) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);\n            }\n        }\n    }\n}\n/**\n * @param {Uint8Array} ui8a\n * @param {number} pos\n * @returns {number}\n */ function readFloat16(ui8a, pos) {\n    if (ui8a.length - pos < 2) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} not enough data for float16`);\n    }\n    const half = (ui8a[pos] << 8) + ui8a[pos + 1];\n    if (half === 0x7c00) {\n        return Infinity;\n    }\n    if (half === 0xfc00) {\n        return -Infinity;\n    }\n    if (half === 0x7e00) {\n        return NaN;\n    }\n    const exp = half >> 10 & 0x1f;\n    const mant = half & 0x3ff;\n    let val;\n    if (exp === 0) {\n        val = mant * 2 ** -24;\n    } else if (exp !== 31) {\n        val = (mant + 1024) * 2 ** (exp - 25);\n    /* c8 ignore next 4 */ } else {\n        // may not be possible to get here\n        val = mant === 0 ? Infinity : NaN;\n    }\n    return half & 0x8000 ? -val : val;\n}\n/**\n * @param {number} inp\n */ function encodeFloat32(inp) {\n    dataView.setFloat32(0, inp, false);\n}\n/**\n * @param {Uint8Array} ui8a\n * @param {number} pos\n * @returns {number}\n */ function readFloat32(ui8a, pos) {\n    if (ui8a.length - pos < 4) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} not enough data for float32`);\n    }\n    const offset = (ui8a.byteOffset || 0) + pos;\n    return new DataView(ui8a.buffer, offset, 4).getFloat32(0, false);\n}\n/**\n * @param {number} inp\n */ function encodeFloat64(inp) {\n    dataView.setFloat64(0, inp, false);\n}\n/**\n * @param {Uint8Array} ui8a\n * @param {number} pos\n * @returns {number}\n */ function readFloat64(ui8a, pos) {\n    if (ui8a.length - pos < 8) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_1__.decodeErrPrefix} not enough data for float64`);\n    }\n    const offset = (ui8a.byteOffset || 0) + pos;\n    return new DataView(ui8a.buffer, offset, 8).getFloat64(0, false);\n}\n/**\n * @param {Token} _tok1\n * @param {Token} _tok2\n * @returns {number}\n */ encodeFloat.compareTokens = _0uint_js__WEBPACK_IMPORTED_MODULE_2__.encodeUint.compareTokens /*\nencodeFloat.compareTokens = function compareTokens (_tok1, _tok2) {\n  return _tok1\n  throw new Error(`${encodeErrPrefix} cannot use floats as map keys`)\n}\n*/ ;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/7float.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/bl.js":
/*!***************************************!*\
  !*** ../node_modules/cborg/lib/bl.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bl: () => (/* binding */ Bl)\n/* harmony export */ });\n/* harmony import */ var _byte_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-utils.js */ \"(rsc)/../node_modules/cborg/lib/byte-utils.js\");\n/**\n * Bl is a list of byte chunks, similar to https://github.com/rvagg/bl but for\n * writing rather than reading.\n * A Bl object accepts set() operations for individual bytes and copyTo() for\n * inserting byte arrays. These write operations don't automatically increment\n * the internal cursor so its \"length\" won't be changed. Instead, increment()\n * must be called to extend its length to cover the inserted data.\n * The toBytes() call will convert all internal memory to a single Uint8Array of\n * the correct length, truncating any data that is stored but hasn't been\n * included by an increment().\n * get() can retrieve a single byte.\n * All operations (except toBytes()) take an \"offset\" argument that will perform\n * the write at the offset _from the current cursor_. For most operations this\n * will be `0` to write at the current cursor position but it can be ahead of\n * the current cursor. Negative offsets probably work but are untested.\n */ // TODO: ipjs doesn't support this, only for test files: https://github.com/mikeal/ipjs/blob/master/src/package/testFile.js#L39\n\n// the ts-ignores in this file are almost all for the `Uint8Array|number[]` duality that exists\n// for perf reasons. Consider better approaches to this or removing it entirely, it is quite\n// risky because of some assumptions about small chunks === number[] and everything else === Uint8Array.\nconst defaultChunkSize = 256;\nclass Bl {\n    /**\n   * @param {number} [chunkSize]\n   */ constructor(chunkSize = defaultChunkSize){\n        this.chunkSize = chunkSize;\n        /** @type {number} */ this.cursor = 0;\n        /** @type {number} */ this.maxCursor = -1;\n        /** @type {(Uint8Array|number[])[]} */ this.chunks = [];\n        // keep the first chunk around if we can to save allocations for future encodes\n        /** @type {Uint8Array|number[]|null} */ this._initReuseChunk = null;\n    }\n    reset() {\n        this.cursor = 0;\n        this.maxCursor = -1;\n        if (this.chunks.length) {\n            this.chunks = [];\n        }\n        if (this._initReuseChunk !== null) {\n            this.chunks.push(this._initReuseChunk);\n            this.maxCursor = this._initReuseChunk.length - 1;\n        }\n    }\n    /**\n   * @param {Uint8Array|number[]} bytes\n   */ push(bytes) {\n        let topChunk = this.chunks[this.chunks.length - 1];\n        const newMax = this.cursor + bytes.length;\n        if (newMax <= this.maxCursor + 1) {\n            // we have at least one chunk and we can fit these bytes into that chunk\n            const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n            // @ts-ignore\n            topChunk.set(bytes, chunkPos);\n        } else {\n            // can't fit it in\n            if (topChunk) {\n                // trip the last chunk to `cursor` if we need to\n                const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n                if (chunkPos < topChunk.length) {\n                    // @ts-ignore\n                    this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);\n                    this.maxCursor = this.cursor - 1;\n                }\n            }\n            if (bytes.length < 64 && bytes.length < this.chunkSize) {\n                // make a new chunk and copy the new one into it\n                topChunk = (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_0__.alloc)(this.chunkSize);\n                this.chunks.push(topChunk);\n                this.maxCursor += topChunk.length;\n                if (this._initReuseChunk === null) {\n                    this._initReuseChunk = topChunk;\n                }\n                // @ts-ignore\n                topChunk.set(bytes, 0);\n            } else {\n                // push the new bytes in as its own chunk\n                this.chunks.push(bytes);\n                this.maxCursor += bytes.length;\n            }\n        }\n        this.cursor += bytes.length;\n    }\n    /**\n   * @param {boolean} [reset]\n   * @returns {Uint8Array}\n   */ toBytes(reset = false) {\n        let byts;\n        if (this.chunks.length === 1) {\n            const chunk = this.chunks[0];\n            if (reset && this.cursor > chunk.length / 2) {\n                /* c8 ignore next 2 */ // @ts-ignore\n                byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n                this._initReuseChunk = null;\n                this.chunks = [];\n            } else {\n                // @ts-ignore\n                byts = (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_0__.slice)(chunk, 0, this.cursor);\n            }\n        } else {\n            // @ts-ignore\n            byts = (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_0__.concat)(this.chunks, this.cursor);\n        }\n        if (reset) {\n            this.reset();\n        }\n        return byts;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/bl.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/byte-utils.js":
/*!***********************************************!*\
  !*** ../node_modules/cborg/lib/byte-utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alloc: () => (/* binding */ alloc),\n/* harmony export */   asU8A: () => (/* binding */ asU8A),\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   decodeCodePointsArray: () => (/* binding */ decodeCodePointsArray),\n/* harmony export */   fromArray: () => (/* binding */ fromArray),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   slice: () => (/* binding */ slice),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toString: () => (/* binding */ toString),\n/* harmony export */   useBuffer: () => (/* binding */ useBuffer)\n/* harmony export */ });\n// Use Uint8Array directly in the browser, use Buffer in Node.js but don't\n// speak its name directly to avoid bundlers pulling in the `Buffer` polyfill\n// @ts-ignore\nconst useBuffer = globalThis.process && // @ts-ignore\n!globalThis.process.browser && // @ts-ignore\nglobalThis.Buffer && // @ts-ignore\ntypeof globalThis.Buffer.isBuffer === \"function\";\nconst textDecoder = new TextDecoder();\nconst textEncoder = new TextEncoder();\n/**\n * @param {Uint8Array} buf\n * @returns {boolean}\n */ function isBuffer(buf) {\n    // @ts-ignore\n    return useBuffer && globalThis.Buffer.isBuffer(buf);\n}\n/**\n * @param {Uint8Array|number[]} buf\n * @returns {Uint8Array}\n */ function asU8A(buf) {\n    /* c8 ignore next */ if (!(buf instanceof Uint8Array)) {\n        return Uint8Array.from(buf);\n    }\n    return isBuffer(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;\n}\nconst toString = useBuffer ? /**\n     * @param {Uint8Array} bytes\n     * @param {number} start\n     * @param {number} end\n     */ (bytes, start, end)=>{\n    return end - start > 64 ? // @ts-ignore\n    globalThis.Buffer.from(bytes.subarray(start, end)).toString(\"utf8\") : utf8Slice(bytes, start, end);\n} : /**\n     * @param {Uint8Array} bytes\n     * @param {number} start\n     * @param {number} end\n     */ (bytes, start, end)=>{\n    return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);\n};\nconst fromString = useBuffer ? /**\n     * @param {string} string\n     */ (string)=>{\n    return string.length > 64 ? // @ts-ignore\n    globalThis.Buffer.from(string) : utf8ToBytes(string);\n} : /**\n     * @param {string} string\n     */ (string)=>{\n    return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);\n};\n/**\n * Buffer variant not fast enough for what we need\n * @param {number[]} arr\n * @returns {Uint8Array}\n */ const fromArray = (arr)=>{\n    return Uint8Array.from(arr);\n};\nconst slice = useBuffer ? /**\n     * @param {Uint8Array} bytes\n     * @param {number} start\n     * @param {number} end\n     */ (bytes, start, end)=>{\n    if (isBuffer(bytes)) {\n        return new Uint8Array(bytes.subarray(start, end));\n    }\n    return bytes.slice(start, end);\n} : /**\n     * @param {Uint8Array} bytes\n     * @param {number} start\n     * @param {number} end\n     */ (bytes, start, end)=>{\n    return bytes.slice(start, end);\n};\nconst concat = useBuffer ? /**\n     * @param {Uint8Array[]} chunks\n     * @param {number} length\n     * @returns {Uint8Array}\n     */ (chunks, length)=>{\n    // might get a stray plain Array here\n    /* c8 ignore next 1 */ chunks = chunks.map((c)=>c instanceof Uint8Array ? c : // @ts-ignore\n        globalThis.Buffer.from(c));\n    // @ts-ignore\n    return asU8A(globalThis.Buffer.concat(chunks, length));\n} : /**\n     * @param {Uint8Array[]} chunks\n     * @param {number} length\n     * @returns {Uint8Array}\n     */ (chunks, length)=>{\n    const out = new Uint8Array(length);\n    let off = 0;\n    for (let b of chunks){\n        if (off + b.length > out.length) {\n            // final chunk that's bigger than we need\n            b = b.subarray(0, out.length - off);\n        }\n        out.set(b, off);\n        off += b.length;\n    }\n    return out;\n};\nconst alloc = useBuffer ? /**\n     * @param {number} size\n     * @returns {Uint8Array}\n     */ (size)=>{\n    // we always write over the contents we expose so this should be safe\n    // @ts-ignore\n    return globalThis.Buffer.allocUnsafe(size);\n} : /**\n     * @param {number} size\n     * @returns {Uint8Array}\n     */ (size)=>{\n    return new Uint8Array(size);\n};\nconst toHex = useBuffer ? /**\n     * @param {Uint8Array} d\n     * @returns {string}\n     */ (d)=>{\n    if (typeof d === \"string\") {\n        return d;\n    }\n    // @ts-ignore\n    return globalThis.Buffer.from(toBytes(d)).toString(\"hex\");\n} : /**\n     * @param {Uint8Array} d\n     * @returns {string}\n     */ (d)=>{\n    if (typeof d === \"string\") {\n        return d;\n    }\n    // @ts-ignore not smart enough to figure this out\n    return Array.prototype.reduce.call(toBytes(d), (p, c)=>`${p}${c.toString(16).padStart(2, \"0\")}`, \"\");\n};\nconst fromHex = useBuffer ? /**\n   * @param {string|Uint8Array} hex\n   * @returns {Uint8Array}\n   */ (hex)=>{\n    if (hex instanceof Uint8Array) {\n        return hex;\n    }\n    // @ts-ignore\n    return globalThis.Buffer.from(hex, \"hex\");\n} : /**\n   * @param {string|Uint8Array} hex\n   * @returns {Uint8Array}\n   */ (hex)=>{\n    if (hex instanceof Uint8Array) {\n        return hex;\n    }\n    if (!hex.length) {\n        return new Uint8Array(0);\n    }\n    return new Uint8Array(hex.split(\"\").map((/** @type {string} */ c, /** @type {number} */ i, /** @type {string[]} */ d)=>i % 2 === 0 ? `0x${c}${d[i + 1]}` : \"\").filter(Boolean).map((/** @type {string} */ e)=>parseInt(e, 16)));\n};\n/**\n * @param {Uint8Array|ArrayBuffer|ArrayBufferView} obj\n * @returns {Uint8Array}\n */ function toBytes(obj) {\n    if (obj instanceof Uint8Array && obj.constructor.name === \"Uint8Array\") {\n        return obj;\n    }\n    if (obj instanceof ArrayBuffer) {\n        return new Uint8Array(obj);\n    }\n    if (ArrayBuffer.isView(obj)) {\n        return new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);\n    }\n    /* c8 ignore next */ throw new Error(\"Unknown type, must be binary type\");\n}\n/**\n * @param {Uint8Array} b1\n * @param {Uint8Array} b2\n * @returns {number}\n */ function compare(b1, b2) {\n    /* c8 ignore next 5 */ if (isBuffer(b1) && isBuffer(b2)) {\n        // probably not possible to get here in the current API\n        // @ts-ignore Buffer\n        return b1.compare(b2);\n    }\n    for(let i = 0; i < b1.length; i++){\n        if (b1[i] === b2[i]) {\n            continue;\n        }\n        return b1[i] < b2[i] ? -1 : 1;\n    } /* c8 ignore next 3 */ \n    return 0;\n}\n// The below code is taken from https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n// Licensed Apache-2.0.\n/**\n * @param {string} str\n * @returns {number[]}\n */ function utf8ToBytes(str) {\n    const out = [];\n    let p = 0;\n    for(let i = 0; i < str.length; i++){\n        let c = str.charCodeAt(i);\n        if (c < 128) {\n            out[p++] = c;\n        } else if (c < 2048) {\n            out[p++] = c >> 6 | 192;\n            out[p++] = c & 63 | 128;\n        } else if ((c & 0xFC00) === 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n            out[p++] = c >> 18 | 240;\n            out[p++] = c >> 12 & 63 | 128;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        } else {\n            out[p++] = c >> 12 | 224;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        }\n    }\n    return out;\n}\n// The below code is mostly taken from https://github.com/feross/buffer\n// Licensed MIT. Copyright (c) Feross Aboukhadijeh\n/**\n * @param {Uint8Array} buf\n * @param {number} offset\n * @param {number} end\n * @returns {string}\n */ function utf8Slice(buf, offset, end) {\n    const res = [];\n    while(offset < end){\n        const firstByte = buf[offset];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;\n        if (offset + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch(bytesPerSequence){\n                case 1:\n                    if (firstByte < 0x80) {\n                        codePoint = firstByte;\n                    }\n                    break;\n                case 2:\n                    secondByte = buf[offset + 1];\n                    if ((secondByte & 0xc0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1f) << 0x6 | secondByte & 0x3f;\n                        if (tempCodePoint > 0x7f) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 3:\n                    secondByte = buf[offset + 1];\n                    thirdByte = buf[offset + 2];\n                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | thirdByte & 0x3f;\n                        /* c8 ignore next 3 */ if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 4:\n                    secondByte = buf[offset + 1];\n                    thirdByte = buf[offset + 2];\n                    fourthByte = buf[offset + 3];\n                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | fourthByte & 0x3f;\n                        if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n            }\n        }\n        /* c8 ignore next 5 */ if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xfffd;\n            bytesPerSequence = 1;\n        } else if (codePoint > 0xffff) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3ff | 0xd800);\n            codePoint = 0xdc00 | codePoint & 0x3ff;\n        }\n        res.push(codePoint);\n        offset += bytesPerSequence;\n    }\n    return decodeCodePointsArray(res);\n}\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000;\n/**\n * @param {number[]} codePoints\n * @returns {string}\n */ function decodeCodePointsArray(codePoints) {\n    const len = codePoints.length;\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n        ;\n    }\n    /* c8 ignore next 10 */ // Decode in chunks to avoid \"call stack size exceeded\".\n    let res = \"\";\n    let i = 0;\n    while(i < len){\n        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/byte-utils.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/common.js":
/*!*******************************************!*\
  !*** ../node_modules/cborg/lib/common.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertEnoughData: () => (/* binding */ assertEnoughData),\n/* harmony export */   decodeErrPrefix: () => (/* binding */ decodeErrPrefix),\n/* harmony export */   encodeErrPrefix: () => (/* binding */ encodeErrPrefix),\n/* harmony export */   uintMinorPrefixBytes: () => (/* binding */ uintMinorPrefixBytes)\n/* harmony export */ });\nconst decodeErrPrefix = \"CBOR decode error:\";\nconst encodeErrPrefix = \"CBOR encode error:\";\nconst uintMinorPrefixBytes = [];\nuintMinorPrefixBytes[23] = 1;\nuintMinorPrefixBytes[24] = 2;\nuintMinorPrefixBytes[25] = 3;\nuintMinorPrefixBytes[26] = 5;\nuintMinorPrefixBytes[27] = 9;\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} need\n */ function assertEnoughData(data, pos, need) {\n    if (data.length - pos < need) {\n        throw new Error(`${decodeErrPrefix} not enough data for type`);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQU1BLGtCQUFrQjtBQUN4QixNQUFNQyxrQkFBa0I7QUFFeEIsTUFBTUMsdUJBQXVCLEVBQUU7QUFDL0JBLG9CQUFvQixDQUFDLEdBQUcsR0FBRztBQUMzQkEsb0JBQW9CLENBQUMsR0FBRyxHQUFHO0FBQzNCQSxvQkFBb0IsQ0FBQyxHQUFHLEdBQUc7QUFDM0JBLG9CQUFvQixDQUFDLEdBQUcsR0FBRztBQUMzQkEsb0JBQW9CLENBQUMsR0FBRyxHQUFHO0FBRTNCOzs7O0NBSUMsR0FDRCxTQUFTQyxpQkFBa0JDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxJQUFJO0lBQ3hDLElBQUlGLEtBQUtHLE1BQU0sR0FBR0YsTUFBTUMsTUFBTTtRQUM1QixNQUFNLElBQUlFLE1BQU0sQ0FBQyxFQUFFUixnQkFBZ0IseUJBQXlCLENBQUM7SUFDL0Q7QUFDRjtBQU9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi9jb21tb24uanM/NWNhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWNvZGVFcnJQcmVmaXggPSAnQ0JPUiBkZWNvZGUgZXJyb3I6J1xuY29uc3QgZW5jb2RlRXJyUHJlZml4ID0gJ0NCT1IgZW5jb2RlIGVycm9yOidcblxuY29uc3QgdWludE1pbm9yUHJlZml4Qnl0ZXMgPSBbXVxudWludE1pbm9yUHJlZml4Qnl0ZXNbMjNdID0gMVxudWludE1pbm9yUHJlZml4Qnl0ZXNbMjRdID0gMlxudWludE1pbm9yUHJlZml4Qnl0ZXNbMjVdID0gM1xudWludE1pbm9yUHJlZml4Qnl0ZXNbMjZdID0gNVxudWludE1pbm9yUHJlZml4Qnl0ZXNbMjddID0gOVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IG5lZWRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0RW5vdWdoRGF0YSAoZGF0YSwgcG9zLCBuZWVkKSB7XG4gIGlmIChkYXRhLmxlbmd0aCAtIHBvcyA8IG5lZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZGVjb2RlRXJyUHJlZml4fSBub3QgZW5vdWdoIGRhdGEgZm9yIHR5cGVgKVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIGRlY29kZUVyclByZWZpeCxcbiAgZW5jb2RlRXJyUHJlZml4LFxuICB1aW50TWlub3JQcmVmaXhCeXRlcyxcbiAgYXNzZXJ0RW5vdWdoRGF0YVxufVxuIl0sIm5hbWVzIjpbImRlY29kZUVyclByZWZpeCIsImVuY29kZUVyclByZWZpeCIsInVpbnRNaW5vclByZWZpeEJ5dGVzIiwiYXNzZXJ0RW5vdWdoRGF0YSIsImRhdGEiLCJwb3MiLCJuZWVkIiwibGVuZ3RoIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/common.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/decode.js":
/*!*******************************************!*\
  !*** ../node_modules/cborg/lib/decode.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tokeniser: () => (/* binding */ Tokeniser),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeFirst: () => (/* binding */ decodeFirst),\n/* harmony export */   tokensToObject: () => (/* binding */ tokensToObject)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _jump_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jump.js */ \"(rsc)/../node_modules/cborg/lib/jump.js\");\n\n\n\n/**\n * @typedef {import('./token.js').Token} Token\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n * @typedef {import('../interface').DecodeTokenizer} DecodeTokenizer\n */ const defaultDecodeOptions = {\n    strict: false,\n    allowIndefinite: true,\n    allowUndefined: true,\n    allowBigInt: true\n};\n/**\n * @implements {DecodeTokenizer}\n */ class Tokeniser {\n    /**\n   * @param {Uint8Array} data\n   * @param {DecodeOptions} options\n   */ constructor(data, options = {}){\n        this._pos = 0;\n        this.data = data;\n        this.options = options;\n    }\n    pos() {\n        return this._pos;\n    }\n    done() {\n        return this._pos >= this.data.length;\n    }\n    next() {\n        const byt = this.data[this._pos];\n        let token = _jump_js__WEBPACK_IMPORTED_MODULE_2__.quick[byt];\n        if (token === undefined) {\n            const decoder = _jump_js__WEBPACK_IMPORTED_MODULE_2__.jump[byt];\n            /* c8 ignore next 4 */ // if we're here then there's something wrong with our jump or quick lists!\n            if (!decoder) {\n                throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, \"0\")})`);\n            }\n            const minor = byt & 31;\n            token = decoder(this.data, this._pos, minor, this.options);\n        }\n        // @ts-ignore we get to assume encodedLength is set (crossing fingers slightly)\n        this._pos += token.encodedLength;\n        return token;\n    }\n}\nconst DONE = Symbol.for(\"DONE\");\nconst BREAK = Symbol.for(\"BREAK\");\n/**\n * @param {Token} token\n * @param {DecodeTokenizer} tokeniser\n * @param {DecodeOptions} options\n * @returns {any|BREAK|DONE}\n */ function tokenToArray(token, tokeniser, options) {\n    const arr = [];\n    for(let i = 0; i < token.value; i++){\n        const value = tokensToObject(tokeniser, options);\n        if (value === BREAK) {\n            if (token.value === Infinity) {\n                break;\n            }\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} got unexpected break to lengthed array`);\n        }\n        if (value === DONE) {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} found array but not enough entries (got ${i}, expected ${token.value})`);\n        }\n        arr[i] = value;\n    }\n    return arr;\n}\n/**\n * @param {Token} token\n * @param {DecodeTokenizer} tokeniser\n * @param {DecodeOptions} options\n * @returns {any|BREAK|DONE}\n */ function tokenToMap(token, tokeniser, options) {\n    const useMaps = options.useMaps === true;\n    const obj = useMaps ? undefined : {};\n    const m = useMaps ? new Map() : undefined;\n    for(let i = 0; i < token.value; i++){\n        const key = tokensToObject(tokeniser, options);\n        if (key === BREAK) {\n            if (token.value === Infinity) {\n                break;\n            }\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} got unexpected break to lengthed map`);\n        }\n        if (key === DONE) {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} found map but not enough entries (got ${i} [no key], expected ${token.value})`);\n        }\n        if (useMaps !== true && typeof key !== \"string\") {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} non-string keys not supported (got ${typeof key})`);\n        }\n        if (options.rejectDuplicateMapKeys === true) {\n            // @ts-ignore\n            if (useMaps && m.has(key) || !useMaps && key in obj) {\n                throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} found repeat map key \"${key}\"`);\n            }\n        }\n        const value = tokensToObject(tokeniser, options);\n        if (value === DONE) {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} found map but not enough entries (got ${i} [no value], expected ${token.value})`);\n        }\n        if (useMaps) {\n            // @ts-ignore TODO reconsider this .. maybe needs to be strict about key types\n            m.set(key, value);\n        } else {\n            // @ts-ignore TODO reconsider this .. maybe needs to be strict about key types\n            obj[key] = value;\n        }\n    }\n    // @ts-ignore c'mon man\n    return useMaps ? m : obj;\n}\n/**\n * @param {DecodeTokenizer} tokeniser\n * @param {DecodeOptions} options\n * @returns {any|BREAK|DONE}\n */ function tokensToObject(tokeniser, options) {\n    // should we support array as an argument?\n    // check for tokenIter[Symbol.iterator] and replace tokenIter with what that returns?\n    if (tokeniser.done()) {\n        return DONE;\n    }\n    const token = tokeniser.next();\n    if (token.type === _token_js__WEBPACK_IMPORTED_MODULE_1__.Type.break) {\n        return BREAK;\n    }\n    if (token.type.terminal) {\n        return token.value;\n    }\n    if (token.type === _token_js__WEBPACK_IMPORTED_MODULE_1__.Type.array) {\n        return tokenToArray(token, tokeniser, options);\n    }\n    if (token.type === _token_js__WEBPACK_IMPORTED_MODULE_1__.Type.map) {\n        return tokenToMap(token, tokeniser, options);\n    }\n    if (token.type === _token_js__WEBPACK_IMPORTED_MODULE_1__.Type.tag) {\n        if (options.tags && typeof options.tags[token.value] === \"function\") {\n            const tagged = tokensToObject(tokeniser, options);\n            return options.tags[token.value](tagged);\n        }\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} tag not supported (${token.value})`);\n    }\n    /* c8 ignore next */ throw new Error(\"unsupported\");\n}\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {[any, Uint8Array]}\n */ function decodeFirst(data, options) {\n    if (!(data instanceof Uint8Array)) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} data to decode must be a Uint8Array`);\n    }\n    options = Object.assign({}, defaultDecodeOptions, options);\n    const tokeniser = options.tokenizer || new Tokeniser(data, options);\n    const decoded = tokensToObject(tokeniser, options);\n    if (decoded === DONE) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} did not find any content to decode`);\n    }\n    if (decoded === BREAK) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} got unexpected break`);\n    }\n    return [\n        decoded,\n        data.subarray(tokeniser.pos())\n    ];\n}\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {any}\n */ function decode(data, options) {\n    const [decoded, remainder] = decodeFirst(data, options);\n    if (remainder.length > 0) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_0__.decodeErrPrefix} too many terminals, data makes no sense`);\n    }\n    return decoded;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/decode.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/encode.js":
/*!*******************************************!*\
  !*** ../node_modules/cborg/lib/encode.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ref: () => (/* binding */ Ref),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeCustom: () => (/* binding */ encodeCustom),\n/* harmony export */   makeCborEncoders: () => (/* binding */ makeCborEncoders),\n/* harmony export */   objectToTokens: () => (/* binding */ objectToTokens)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(rsc)/../node_modules/cborg/lib/is.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _bl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bl.js */ \"(rsc)/../node_modules/cborg/lib/bl.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* harmony import */ var _jump_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jump.js */ \"(rsc)/../node_modules/cborg/lib/jump.js\");\n/* harmony import */ var _byte_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./byte-utils.js */ \"(rsc)/../node_modules/cborg/lib/byte-utils.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n/* harmony import */ var _1negint_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./1negint.js */ \"(rsc)/../node_modules/cborg/lib/1negint.js\");\n/* harmony import */ var _2bytes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./2bytes.js */ \"(rsc)/../node_modules/cborg/lib/2bytes.js\");\n/* harmony import */ var _3string_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./3string.js */ \"(rsc)/../node_modules/cborg/lib/3string.js\");\n/* harmony import */ var _4array_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./4array.js */ \"(rsc)/../node_modules/cborg/lib/4array.js\");\n/* harmony import */ var _5map_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./5map.js */ \"(rsc)/../node_modules/cborg/lib/5map.js\");\n/* harmony import */ var _6tag_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./6tag.js */ \"(rsc)/../node_modules/cborg/lib/6tag.js\");\n/* harmony import */ var _7float_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./7float.js */ \"(rsc)/../node_modules/cborg/lib/7float.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @typedef {import('../interface').EncodeOptions} EncodeOptions\n * @typedef {import('../interface').OptionalTypeEncoder} OptionalTypeEncoder\n * @typedef {import('../interface').Reference} Reference\n * @typedef {import('../interface').StrictTypeEncoder} StrictTypeEncoder\n * @typedef {import('../interface').TokenTypeEncoder} TokenTypeEncoder\n * @typedef {import('../interface').TokenOrNestedTokens} TokenOrNestedTokens\n */ /** @type {EncodeOptions} */ const defaultEncodeOptions = {\n    float64: false,\n    mapSorter,\n    quickEncodeToken: _jump_js__WEBPACK_IMPORTED_MODULE_4__.quickEncodeToken\n};\n/** @returns {TokenTypeEncoder[]} */ function makeCborEncoders() {\n    const encoders = [];\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.uint.major] = _0uint_js__WEBPACK_IMPORTED_MODULE_6__.encodeUint;\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.negint.major] = _1negint_js__WEBPACK_IMPORTED_MODULE_7__.encodeNegint;\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.bytes.major] = _2bytes_js__WEBPACK_IMPORTED_MODULE_8__.encodeBytes;\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.string.major] = _3string_js__WEBPACK_IMPORTED_MODULE_9__.encodeString;\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.array.major] = _4array_js__WEBPACK_IMPORTED_MODULE_10__.encodeArray;\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.map.major] = _5map_js__WEBPACK_IMPORTED_MODULE_11__.encodeMap;\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.tag.major] = _6tag_js__WEBPACK_IMPORTED_MODULE_12__.encodeTag;\n    encoders[_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.float.major] = _7float_js__WEBPACK_IMPORTED_MODULE_13__.encodeFloat;\n    return encoders;\n}\nconst cborEncoders = makeCborEncoders();\nconst buf = new _bl_js__WEBPACK_IMPORTED_MODULE_2__.Bl();\n/** @implements {Reference} */ class Ref {\n    /**\n   * @param {object|any[]} obj\n   * @param {Reference|undefined} parent\n   */ constructor(obj, parent){\n        this.obj = obj;\n        this.parent = parent;\n    }\n    /**\n   * @param {object|any[]} obj\n   * @returns {boolean}\n   */ includes(obj) {\n        /** @type {Reference|undefined} */ let p = this;\n        do {\n            if (p.obj === obj) {\n                return true;\n            }\n        }while (p = p.parent); // eslint-disable-line\n        return false;\n    }\n    /**\n   * @param {Reference|undefined} stack\n   * @param {object|any[]} obj\n   * @returns {Reference}\n   */ static createCheck(stack, obj) {\n        if (stack && stack.includes(obj)) {\n            throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_3__.encodeErrPrefix} object contains circular references`);\n        }\n        return new Ref(obj, stack);\n    }\n}\nconst simpleTokens = {\n    null: new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.null, null),\n    undefined: new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.undefined, undefined),\n    true: new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.true, true),\n    false: new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.false, false),\n    emptyArray: new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.array, 0),\n    emptyMap: new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.map, 0)\n};\n/** @type {{[typeName: string]: StrictTypeEncoder}} */ const typeEncoders = {\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ number (obj, _typ, _options, _refStack) {\n        if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {\n            return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.float, obj);\n        } else if (obj >= 0) {\n            return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.uint, obj);\n        } else {\n            return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.negint, obj);\n        }\n    },\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ bigint (obj, _typ, _options, _refStack) {\n        if (obj >= BigInt(0)) {\n            return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.uint, obj);\n        } else {\n            return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.negint, obj);\n        }\n    },\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ Uint8Array (obj, _typ, _options, _refStack) {\n        return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.bytes, obj);\n    },\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ string (obj, _typ, _options, _refStack) {\n        return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.string, obj);\n    },\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ boolean (obj, _typ, _options, _refStack) {\n        return obj ? simpleTokens.true : simpleTokens.false;\n    },\n    /**\n   * @param {any} _obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ null (_obj, _typ, _options, _refStack) {\n        return simpleTokens.null;\n    },\n    /**\n   * @param {any} _obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ undefined (_obj, _typ, _options, _refStack) {\n        return simpleTokens.undefined;\n    },\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ ArrayBuffer (obj, _typ, _options, _refStack) {\n        return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.bytes, new Uint8Array(obj));\n    },\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} _options\n   * @param {Reference} [_refStack]\n   * @returns {TokenOrNestedTokens}\n   */ DataView (obj, _typ, _options, _refStack) {\n        return new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));\n    },\n    /**\n   * @param {any} obj\n   * @param {string} _typ\n   * @param {EncodeOptions} options\n   * @param {Reference} [refStack]\n   * @returns {TokenOrNestedTokens}\n   */ Array (obj, _typ, options, refStack) {\n        if (!obj.length) {\n            if (options.addBreakTokens === true) {\n                return [\n                    simpleTokens.emptyArray,\n                    new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.break)\n                ];\n            }\n            return simpleTokens.emptyArray;\n        }\n        refStack = Ref.createCheck(refStack, obj);\n        const entries = [];\n        let i = 0;\n        for (const e of obj){\n            entries[i++] = objectToTokens(e, options, refStack);\n        }\n        if (options.addBreakTokens) {\n            return [\n                new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.array, obj.length),\n                entries,\n                new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.break)\n            ];\n        }\n        return [\n            new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.array, obj.length),\n            entries\n        ];\n    },\n    /**\n   * @param {any} obj\n   * @param {string} typ\n   * @param {EncodeOptions} options\n   * @param {Reference} [refStack]\n   * @returns {TokenOrNestedTokens}\n   */ Object (obj, typ, options, refStack) {\n        // could be an Object or a Map\n        const isMap = typ !== \"Object\";\n        // it's slightly quicker to use Object.keys() than Object.entries()\n        const keys = isMap ? obj.keys() : Object.keys(obj);\n        const length = isMap ? obj.size : keys.length;\n        if (!length) {\n            if (options.addBreakTokens === true) {\n                return [\n                    simpleTokens.emptyMap,\n                    new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.break)\n                ];\n            }\n            return simpleTokens.emptyMap;\n        }\n        refStack = Ref.createCheck(refStack, obj);\n        /** @type {TokenOrNestedTokens[]} */ const entries = [];\n        let i = 0;\n        for (const key of keys){\n            entries[i++] = [\n                objectToTokens(key, options, refStack),\n                objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)\n            ];\n        }\n        sortMapEntries(entries, options);\n        if (options.addBreakTokens) {\n            return [\n                new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.map, length),\n                entries,\n                new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.break)\n            ];\n        }\n        return [\n            new _token_js__WEBPACK_IMPORTED_MODULE_1__.Token(_token_js__WEBPACK_IMPORTED_MODULE_1__.Type.map, length),\n            entries\n        ];\n    }\n};\ntypeEncoders.Map = typeEncoders.Object;\ntypeEncoders.Buffer = typeEncoders.Uint8Array;\nfor (const typ of \"Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64\".split(\" \")){\n    typeEncoders[`${typ}Array`] = typeEncoders.DataView;\n}\n/**\n * @param {any} obj\n * @param {EncodeOptions} [options]\n * @param {Reference} [refStack]\n * @returns {TokenOrNestedTokens}\n */ function objectToTokens(obj, options = {}, refStack) {\n    const typ = (0,_is_js__WEBPACK_IMPORTED_MODULE_0__.is)(obj);\n    const customTypeEncoder = options && options.typeEncoders && /** @type {OptionalTypeEncoder} */ options.typeEncoders[typ] || typeEncoders[typ];\n    if (typeof customTypeEncoder === \"function\") {\n        const tokens = customTypeEncoder(obj, typ, options, refStack);\n        if (tokens != null) {\n            return tokens;\n        }\n    }\n    const typeEncoder = typeEncoders[typ];\n    if (!typeEncoder) {\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_3__.encodeErrPrefix} unsupported type: ${typ}`);\n    }\n    return typeEncoder(obj, typ, options, refStack);\n}\n/*\nCBOR key sorting is a mess.\n\nThe canonicalisation recommendation from https://tools.ietf.org/html/rfc7049#section-3.9\nincludes the wording:\n\n> The keys in every map must be sorted lowest value to highest.\n> Sorting is performed on the bytes of the representation of the key\n> data items without paying attention to the 3/5 bit splitting for\n> major types.\n> ...\n>  *  If two keys have different lengths, the shorter one sorts\n      earlier;\n>  *  If two keys have the same length, the one with the lower value\n      in (byte-wise) lexical order sorts earlier.\n\n1. It is not clear what \"bytes of the representation of the key\" means: is it\n   the CBOR representation, or the binary representation of the object itself?\n   Consider the int and uint difference here.\n2. It is not clear what \"without paying attention to\" means: do we include it\n   and compare on that? Or do we omit the special prefix byte, (mostly) treating\n   the key in its plain binary representation form.\n\nThe FIDO 2.0: Client To Authenticator Protocol spec takes the original CBOR\nwording and clarifies it according to their understanding.\nhttps://fidoalliance.org/specs/fido-v2.0-rd-20170927/fido-client-to-authenticator-protocol-v2.0-rd-20170927.html#message-encoding\n\n> The keys in every map must be sorted lowest value to highest. Sorting is\n> performed on the bytes of the representation of the key data items without\n> paying attention to the 3/5 bit splitting for major types. The sorting rules\n> are:\n>  * If the major types are different, the one with the lower value in numerical\n>    order sorts earlier.\n>  * If two keys have different lengths, the shorter one sorts earlier;\n>  * If two keys have the same length, the one with the lower value in\n>    (byte-wise) lexical order sorts earlier.\n\nSome other implementations, such as borc, do a full encode then do a\nlength-first, byte-wise-second comparison:\nhttps://github.com/dignifiedquire/borc/blob/b6bae8b0bcde7c3976b0f0f0957208095c392a36/src/encoder.js#L358\nhttps://github.com/dignifiedquire/borc/blob/b6bae8b0bcde7c3976b0f0f0957208095c392a36/src/utils.js#L143-L151\n\nThis has the benefit of being able to easily handle arbitrary keys, including\ncomplex types (maps and arrays).\n\nWe'll opt for the FIDO approach, since it affords some efficies since we don't\nneed a full encode of each key to determine order and can defer to the types\nto determine how to most efficiently order their values (i.e. int and uint\nordering can be done on the numbers, no need for byte-wise, for example).\n\nRecommendation: stick to single key types or you'll get into trouble, and prefer\nstring keys because it's much simpler that way.\n*/ /*\n(UPDATE, Dec 2020)\nhttps://tools.ietf.org/html/rfc8949 is the updated CBOR spec and clarifies some\nof the questions above with a new recommendation for sorting order being much\ncloser to what would be expected in other environments (i.e. no length-first\nweirdness).\nThis new sorting order is not yet implemented here but could be added as an\noption. \"Determinism\" (canonicity) is system dependent and it's difficult to\nchange existing systems that are built with existing expectations. So if a new\nordering is introduced here, the old needs to be kept as well with the user\nhaving the option.\n*/ /**\n * @param {TokenOrNestedTokens[]} entries\n * @param {EncodeOptions} options\n */ function sortMapEntries(entries, options) {\n    if (options.mapSorter) {\n        entries.sort(options.mapSorter);\n    }\n}\n/**\n * @param {(Token|Token[])[]} e1\n * @param {(Token|Token[])[]} e2\n * @returns {number}\n */ function mapSorter(e1, e2) {\n    // the key position ([0]) could have a single token or an array\n    // almost always it'll be a single token but complex key might get involved\n    /* c8 ignore next 2 */ const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];\n    const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];\n    // different key types\n    if (keyToken1.type !== keyToken2.type) {\n        return keyToken1.type.compare(keyToken2.type);\n    }\n    const major = keyToken1.type.major;\n    // TODO: handle case where cmp === 0 but there are more keyToken e. complex type)\n    const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);\n    /* c8 ignore next 5 */ if (tcmp === 0) {\n        // duplicate key or complex type where the first token matched,\n        // i.e. a map or array and we're only comparing the opening token\n        console.warn(\"WARNING: complex key types used, CBOR key sorting guarantees are gone\");\n    }\n    return tcmp;\n}\n/**\n * @param {Bl} buf\n * @param {TokenOrNestedTokens} tokens\n * @param {TokenTypeEncoder[]} encoders\n * @param {EncodeOptions} options\n */ function tokensToEncoded(buf, tokens, encoders, options) {\n    if (Array.isArray(tokens)) {\n        for (const token of tokens){\n            tokensToEncoded(buf, token, encoders, options);\n        }\n    } else {\n        encoders[tokens.type.major](buf, tokens, options);\n    }\n}\n/**\n * @param {any} data\n * @param {TokenTypeEncoder[]} encoders\n * @param {EncodeOptions} options\n * @returns {Uint8Array}\n */ function encodeCustom(data, encoders, options) {\n    const tokens = objectToTokens(data, options);\n    if (!Array.isArray(tokens) && options.quickEncodeToken) {\n        const quickBytes = options.quickEncodeToken(tokens);\n        if (quickBytes) {\n            return quickBytes;\n        }\n        const encoder = encoders[tokens.type.major];\n        if (encoder.encodedSize) {\n            const size = encoder.encodedSize(tokens, options);\n            const buf = new _bl_js__WEBPACK_IMPORTED_MODULE_2__.Bl(size);\n            encoder(buf, tokens, options);\n            /* c8 ignore next 4 */ // this would be a problem with encodedSize() functions\n            if (buf.chunks.length !== 1) {\n                throw new Error(`Unexpected error: pre-calculated length for ${tokens} was wrong`);\n            }\n            return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_5__.asU8A)(buf.chunks[0]);\n        }\n    }\n    buf.reset();\n    tokensToEncoded(buf, tokens, encoders, options);\n    return buf.toBytes(true);\n}\n/**\n * @param {any} data\n * @param {EncodeOptions} [options]\n * @returns {Uint8Array}\n */ function encode(data, options) {\n    options = Object.assign({}, defaultEncodeOptions, options);\n    return encodeCustom(data, cborEncoders, options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/encode.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/is.js":
/*!***************************************!*\
  !*** ../node_modules/cborg/lib/is.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   is: () => (/* binding */ is)\n/* harmony export */ });\n// This is an unfortunate replacement for @sindresorhus/is that we need to\n// re-implement for performance purposes. In particular the is.observable()\n// check is expensive, and unnecessary for our purposes. The values returned\n// are compatible with @sindresorhus/is, however.\nconst typeofs = [\n    \"string\",\n    \"number\",\n    \"bigint\",\n    \"symbol\"\n];\nconst objectTypeNames = [\n    \"Function\",\n    \"Generator\",\n    \"AsyncGenerator\",\n    \"GeneratorFunction\",\n    \"AsyncGeneratorFunction\",\n    \"AsyncFunction\",\n    \"Observable\",\n    \"Array\",\n    \"Buffer\",\n    \"Object\",\n    \"RegExp\",\n    \"Date\",\n    \"Error\",\n    \"Map\",\n    \"Set\",\n    \"WeakMap\",\n    \"WeakSet\",\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"DataView\",\n    \"Promise\",\n    \"URL\",\n    \"HTMLElement\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Uint16Array\",\n    \"Int32Array\",\n    \"Uint32Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\"\n];\n/**\n * @param {any} value\n * @returns {string}\n */ function is(value) {\n    if (value === null) {\n        return \"null\";\n    }\n    if (value === undefined) {\n        return \"undefined\";\n    }\n    if (value === true || value === false) {\n        return \"boolean\";\n    }\n    const typeOf = typeof value;\n    if (typeofs.includes(typeOf)) {\n        return typeOf;\n    }\n    /* c8 ignore next 4 */ // not going to bother testing this, it's not going to be valid anyway\n    if (typeOf === \"function\") {\n        return \"Function\";\n    }\n    if (Array.isArray(value)) {\n        return \"Array\";\n    }\n    if (isBuffer(value)) {\n        return \"Buffer\";\n    }\n    const objectType = getObjectType(value);\n    if (objectType) {\n        return objectType;\n    }\n    /* c8 ignore next */ return \"Object\";\n}\n/**\n * @param {any} value\n * @returns {boolean}\n */ function isBuffer(value) {\n    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);\n}\n/**\n * @param {any} value\n * @returns {string|undefined}\n */ function getObjectType(value) {\n    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);\n    if (objectTypeNames.includes(objectTypeName)) {\n        return objectTypeName;\n    }\n    /* c8 ignore next */ return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi9pcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMEVBQTBFO0FBQzFFLDJFQUEyRTtBQUMzRSw0RUFBNEU7QUFDNUUsaURBQWlEO0FBRWpELE1BQU1BLFVBQVU7SUFDZDtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBRUQsTUFBTUMsa0JBQWtCO0lBQ3RCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRDs7O0NBR0MsR0FDTSxTQUFTQyxHQUFJQyxLQUFLO0lBQ3ZCLElBQUlBLFVBQVUsTUFBTTtRQUNsQixPQUFPO0lBQ1Q7SUFDQSxJQUFJQSxVQUFVQyxXQUFXO1FBQ3ZCLE9BQU87SUFDVDtJQUNBLElBQUlELFVBQVUsUUFBUUEsVUFBVSxPQUFPO1FBQ3JDLE9BQU87SUFDVDtJQUNBLE1BQU1FLFNBQVMsT0FBT0Y7SUFDdEIsSUFBSUgsUUFBUU0sUUFBUSxDQUFDRCxTQUFTO1FBQzVCLE9BQU9BO0lBQ1Q7SUFDQSxvQkFBb0IsR0FDcEIsc0VBQXNFO0lBQ3RFLElBQUlBLFdBQVcsWUFBWTtRQUN6QixPQUFPO0lBQ1Q7SUFDQSxJQUFJRSxNQUFNQyxPQUFPLENBQUNMLFFBQVE7UUFDeEIsT0FBTztJQUNUO0lBQ0EsSUFBSU0sU0FBU04sUUFBUTtRQUNuQixPQUFPO0lBQ1Q7SUFDQSxNQUFNTyxhQUFhQyxjQUFjUjtJQUNqQyxJQUFJTyxZQUFZO1FBQ2QsT0FBT0E7SUFDVDtJQUNBLGtCQUFrQixHQUNsQixPQUFPO0FBQ1Q7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRCxTQUFVTixLQUFLO0lBQ3RCLE9BQU9BLFNBQVNBLE1BQU1TLFdBQVcsSUFBSVQsTUFBTVMsV0FBVyxDQUFDSCxRQUFRLElBQUlOLE1BQU1TLFdBQVcsQ0FBQ0gsUUFBUSxDQUFDSSxJQUFJLENBQUMsTUFBTVY7QUFDM0c7QUFFQTs7O0NBR0MsR0FDRCxTQUFTUSxjQUFlUixLQUFLO0lBQzNCLE1BQU1XLGlCQUFpQkMsT0FBT0MsU0FBUyxDQUFDQyxRQUFRLENBQUNKLElBQUksQ0FBQ1YsT0FBT2UsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUN2RSxJQUFJakIsZ0JBQWdCSyxRQUFRLENBQUNRLGlCQUFpQjtRQUM1QyxPQUFPQTtJQUNUO0lBQ0Esa0JBQWtCLEdBQ2xCLE9BQU9WO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWdhdmliZS1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvY2JvcmcvbGliL2lzLmpzPzEyZTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpcyBhbiB1bmZvcnR1bmF0ZSByZXBsYWNlbWVudCBmb3IgQHNpbmRyZXNvcmh1cy9pcyB0aGF0IHdlIG5lZWQgdG9cbi8vIHJlLWltcGxlbWVudCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMuIEluIHBhcnRpY3VsYXIgdGhlIGlzLm9ic2VydmFibGUoKVxuLy8gY2hlY2sgaXMgZXhwZW5zaXZlLCBhbmQgdW5uZWNlc3NhcnkgZm9yIG91ciBwdXJwb3Nlcy4gVGhlIHZhbHVlcyByZXR1cm5lZFxuLy8gYXJlIGNvbXBhdGlibGUgd2l0aCBAc2luZHJlc29yaHVzL2lzLCBob3dldmVyLlxuXG5jb25zdCB0eXBlb2ZzID0gW1xuICAnc3RyaW5nJyxcbiAgJ251bWJlcicsXG4gICdiaWdpbnQnLFxuICAnc3ltYm9sJ1xuXVxuXG5jb25zdCBvYmplY3RUeXBlTmFtZXMgPSBbXG4gICdGdW5jdGlvbicsXG4gICdHZW5lcmF0b3InLFxuICAnQXN5bmNHZW5lcmF0b3InLFxuICAnR2VuZXJhdG9yRnVuY3Rpb24nLFxuICAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsXG4gICdBc3luY0Z1bmN0aW9uJyxcbiAgJ09ic2VydmFibGUnLFxuICAnQXJyYXknLFxuICAnQnVmZmVyJyxcbiAgJ09iamVjdCcsXG4gICdSZWdFeHAnLFxuICAnRGF0ZScsXG4gICdFcnJvcicsXG4gICdNYXAnLFxuICAnU2V0JyxcbiAgJ1dlYWtNYXAnLFxuICAnV2Vha1NldCcsXG4gICdBcnJheUJ1ZmZlcicsXG4gICdTaGFyZWRBcnJheUJ1ZmZlcicsXG4gICdEYXRhVmlldycsXG4gICdQcm9taXNlJyxcbiAgJ1VSTCcsXG4gICdIVE1MRWxlbWVudCcsXG4gICdJbnQ4QXJyYXknLFxuICAnVWludDhBcnJheScsXG4gICdVaW50OENsYW1wZWRBcnJheScsXG4gICdJbnQxNkFycmF5JyxcbiAgJ1VpbnQxNkFycmF5JyxcbiAgJ0ludDMyQXJyYXknLFxuICAnVWludDMyQXJyYXknLFxuICAnRmxvYXQzMkFycmF5JyxcbiAgJ0Zsb2F0NjRBcnJheScsXG4gICdCaWdJbnQ2NEFycmF5JyxcbiAgJ0JpZ1VpbnQ2NEFycmF5J1xuXVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzICh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ251bGwnXG4gIH1cbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gJ3VuZGVmaW5lZCdcbiAgfVxuICBpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuICdib29sZWFuJ1xuICB9XG4gIGNvbnN0IHR5cGVPZiA9IHR5cGVvZiB2YWx1ZVxuICBpZiAodHlwZW9mcy5pbmNsdWRlcyh0eXBlT2YpKSB7XG4gICAgcmV0dXJuIHR5cGVPZlxuICB9XG4gIC8qIGM4IGlnbm9yZSBuZXh0IDQgKi9cbiAgLy8gbm90IGdvaW5nIHRvIGJvdGhlciB0ZXN0aW5nIHRoaXMsIGl0J3Mgbm90IGdvaW5nIHRvIGJlIHZhbGlkIGFueXdheVxuICBpZiAodHlwZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICdGdW5jdGlvbidcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gJ0FycmF5J1xuICB9XG4gIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gJ0J1ZmZlcidcbiAgfVxuICBjb25zdCBvYmplY3RUeXBlID0gZ2V0T2JqZWN0VHlwZSh2YWx1ZSlcbiAgaWYgKG9iamVjdFR5cGUpIHtcbiAgICByZXR1cm4gb2JqZWN0VHlwZVxuICB9XG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnT2JqZWN0J1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IuaXNCdWZmZXIgJiYgdmFsdWUuY29uc3RydWN0b3IuaXNCdWZmZXIuY2FsbChudWxsLCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBnZXRPYmplY3RUeXBlICh2YWx1ZSkge1xuICBjb25zdCBvYmplY3RUeXBlTmFtZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG4gIGlmIChvYmplY3RUeXBlTmFtZXMuaW5jbHVkZXMob2JqZWN0VHlwZU5hbWUpKSB7XG4gICAgcmV0dXJuIG9iamVjdFR5cGVOYW1lXG4gIH1cbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuIl0sIm5hbWVzIjpbInR5cGVvZnMiLCJvYmplY3RUeXBlTmFtZXMiLCJpcyIsInZhbHVlIiwidW5kZWZpbmVkIiwidHlwZU9mIiwiaW5jbHVkZXMiLCJBcnJheSIsImlzQXJyYXkiLCJpc0J1ZmZlciIsIm9iamVjdFR5cGUiLCJnZXRPYmplY3RUeXBlIiwiY29uc3RydWN0b3IiLCJjYWxsIiwib2JqZWN0VHlwZU5hbWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/is.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/jump.js":
/*!*****************************************!*\
  !*** ../node_modules/cborg/lib/jump.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jump: () => (/* binding */ jump),\n/* harmony export */   quick: () => (/* binding */ quick),\n/* harmony export */   quickEncodeToken: () => (/* binding */ quickEncodeToken)\n/* harmony export */ });\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token.js */ \"(rsc)/../node_modules/cborg/lib/token.js\");\n/* harmony import */ var _0uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./0uint.js */ \"(rsc)/../node_modules/cborg/lib/0uint.js\");\n/* harmony import */ var _1negint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./1negint.js */ \"(rsc)/../node_modules/cborg/lib/1negint.js\");\n/* harmony import */ var _2bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./2bytes.js */ \"(rsc)/../node_modules/cborg/lib/2bytes.js\");\n/* harmony import */ var _3string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./3string.js */ \"(rsc)/../node_modules/cborg/lib/3string.js\");\n/* harmony import */ var _4array_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./4array.js */ \"(rsc)/../node_modules/cborg/lib/4array.js\");\n/* harmony import */ var _5map_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./5map.js */ \"(rsc)/../node_modules/cborg/lib/5map.js\");\n/* harmony import */ var _6tag_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./6tag.js */ \"(rsc)/../node_modules/cborg/lib/6tag.js\");\n/* harmony import */ var _7float_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./7float.js */ \"(rsc)/../node_modules/cborg/lib/7float.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./common.js */ \"(rsc)/../node_modules/cborg/lib/common.js\");\n/* harmony import */ var _byte_utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./byte-utils.js */ \"(rsc)/../node_modules/cborg/lib/byte-utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */ /**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} minor\n */ function invalidMinor(data, pos, minor) {\n    throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_9__.decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);\n}\n/**\n * @param {string} msg\n * @returns {()=>any}\n */ function errorer(msg) {\n    return ()=>{\n        throw new Error(`${_common_js__WEBPACK_IMPORTED_MODULE_9__.decodeErrPrefix} ${msg}`);\n    };\n}\n/** @type {((data:Uint8Array, pos:number, minor:number, options?:DecodeOptions) => any)[]} */ const jump = [];\n// unsigned integer, 0x00..0x17 (0..23)\nfor(let i = 0; i <= 0x17; i++){\n    jump[i] = invalidMinor // uint.decodeUintCompact, handled by quick[]\n    ;\n}\njump[0x18] = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.decodeUint8 // unsigned integer, one-byte uint8_t follows\n;\njump[0x19] = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.decodeUint16 // unsigned integer, two-byte uint16_t follows\n;\njump[0x1a] = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.decodeUint32 // unsigned integer, four-byte uint32_t follows\n;\njump[0x1b] = _0uint_js__WEBPACK_IMPORTED_MODULE_1__.decodeUint64 // unsigned integer, eight-byte uint64_t follows\n;\njump[0x1c] = invalidMinor;\njump[0x1d] = invalidMinor;\njump[0x1e] = invalidMinor;\njump[0x1f] = invalidMinor;\n// negative integer, -1-0x00..-1-0x17 (-1..-24)\nfor(let i = 0x20; i <= 0x37; i++){\n    jump[i] = invalidMinor // negintDecode, handled by quick[]\n    ;\n}\njump[0x38] = _1negint_js__WEBPACK_IMPORTED_MODULE_2__.decodeNegint8 // negative integer, -1-n one-byte uint8_t for n follows\n;\njump[0x39] = _1negint_js__WEBPACK_IMPORTED_MODULE_2__.decodeNegint16 // negative integer, -1-n two-byte uint16_t for n follows\n;\njump[0x3a] = _1negint_js__WEBPACK_IMPORTED_MODULE_2__.decodeNegint32 // negative integer, -1-n four-byte uint32_t for follows\n;\njump[0x3b] = _1negint_js__WEBPACK_IMPORTED_MODULE_2__.decodeNegint64 // negative integer, -1-n eight-byte uint64_t for follows\n;\njump[0x3c] = invalidMinor;\njump[0x3d] = invalidMinor;\njump[0x3e] = invalidMinor;\njump[0x3f] = invalidMinor;\n// byte string, 0x00..0x17 bytes follow\nfor(let i = 0x40; i <= 0x57; i++){\n    jump[i] = _2bytes_js__WEBPACK_IMPORTED_MODULE_3__.decodeBytesCompact;\n}\njump[0x58] = _2bytes_js__WEBPACK_IMPORTED_MODULE_3__.decodeBytes8 // byte string, one-byte uint8_t for n, and then n bytes follow\n;\njump[0x59] = _2bytes_js__WEBPACK_IMPORTED_MODULE_3__.decodeBytes16 // byte string, two-byte uint16_t for n, and then n bytes follow\n;\njump[0x5a] = _2bytes_js__WEBPACK_IMPORTED_MODULE_3__.decodeBytes32 // byte string, four-byte uint32_t for n, and then n bytes follow\n;\njump[0x5b] = _2bytes_js__WEBPACK_IMPORTED_MODULE_3__.decodeBytes64 // byte string, eight-byte uint64_t for n, and then n bytes follow\n;\njump[0x5c] = invalidMinor;\njump[0x5d] = invalidMinor;\njump[0x5e] = invalidMinor;\njump[0x5f] = errorer(\"indefinite length bytes/strings are not supported\") // byte string, byte strings follow, terminated by \"break\"\n;\n// UTF-8 string 0x00..0x17 bytes follow\nfor(let i = 0x60; i <= 0x77; i++){\n    jump[i] = _3string_js__WEBPACK_IMPORTED_MODULE_4__.decodeStringCompact;\n}\njump[0x78] = _3string_js__WEBPACK_IMPORTED_MODULE_4__.decodeString8 // UTF-8 string, one-byte uint8_t for n, and then n bytes follow\n;\njump[0x79] = _3string_js__WEBPACK_IMPORTED_MODULE_4__.decodeString16 // UTF-8 string, two-byte uint16_t for n, and then n bytes follow\n;\njump[0x7a] = _3string_js__WEBPACK_IMPORTED_MODULE_4__.decodeString32 // UTF-8 string, four-byte uint32_t for n, and then n bytes follow\n;\njump[0x7b] = _3string_js__WEBPACK_IMPORTED_MODULE_4__.decodeString64 // UTF-8 string, eight-byte uint64_t for n, and then n bytes follow\n;\njump[0x7c] = invalidMinor;\njump[0x7d] = invalidMinor;\njump[0x7e] = invalidMinor;\njump[0x7f] = errorer(\"indefinite length bytes/strings are not supported\") // UTF-8 strings follow, terminated by \"break\"\n;\n// array, 0x00..0x17 data items follow\nfor(let i = 0x80; i <= 0x97; i++){\n    jump[i] = _4array_js__WEBPACK_IMPORTED_MODULE_5__.decodeArrayCompact;\n}\njump[0x98] = _4array_js__WEBPACK_IMPORTED_MODULE_5__.decodeArray8 // array, one-byte uint8_t for n, and then n data items follow\n;\njump[0x99] = _4array_js__WEBPACK_IMPORTED_MODULE_5__.decodeArray16 // array, two-byte uint16_t for n, and then n data items follow\n;\njump[0x9a] = _4array_js__WEBPACK_IMPORTED_MODULE_5__.decodeArray32 // array, four-byte uint32_t for n, and then n data items follow\n;\njump[0x9b] = _4array_js__WEBPACK_IMPORTED_MODULE_5__.decodeArray64 // array, eight-byte uint64_t for n, and then n data items follow\n;\njump[0x9c] = invalidMinor;\njump[0x9d] = invalidMinor;\njump[0x9e] = invalidMinor;\njump[0x9f] = _4array_js__WEBPACK_IMPORTED_MODULE_5__.decodeArrayIndefinite // array, data items follow, terminated by \"break\"\n;\n// map, 0x00..0x17 pairs of data items follow\nfor(let i = 0xa0; i <= 0xb7; i++){\n    jump[i] = _5map_js__WEBPACK_IMPORTED_MODULE_6__.decodeMapCompact;\n}\njump[0xb8] = _5map_js__WEBPACK_IMPORTED_MODULE_6__.decodeMap8 // map, one-byte uint8_t for n, and then n pairs of data items follow\n;\njump[0xb9] = _5map_js__WEBPACK_IMPORTED_MODULE_6__.decodeMap16 // map, two-byte uint16_t for n, and then n pairs of data items follow\n;\njump[0xba] = _5map_js__WEBPACK_IMPORTED_MODULE_6__.decodeMap32 // map, four-byte uint32_t for n, and then n pairs of data items follow\n;\njump[0xbb] = _5map_js__WEBPACK_IMPORTED_MODULE_6__.decodeMap64 // map, eight-byte uint64_t for n, and then n pairs of data items follow\n;\njump[0xbc] = invalidMinor;\njump[0xbd] = invalidMinor;\njump[0xbe] = invalidMinor;\njump[0xbf] = _5map_js__WEBPACK_IMPORTED_MODULE_6__.decodeMapIndefinite // map, pairs of data items follow, terminated by \"break\"\n;\n// tags\nfor(let i = 0xc0; i <= 0xd7; i++){\n    jump[i] = _6tag_js__WEBPACK_IMPORTED_MODULE_7__.decodeTagCompact;\n}\njump[0xd8] = _6tag_js__WEBPACK_IMPORTED_MODULE_7__.decodeTag8;\njump[0xd9] = _6tag_js__WEBPACK_IMPORTED_MODULE_7__.decodeTag16;\njump[0xda] = _6tag_js__WEBPACK_IMPORTED_MODULE_7__.decodeTag32;\njump[0xdb] = _6tag_js__WEBPACK_IMPORTED_MODULE_7__.decodeTag64;\njump[0xdc] = invalidMinor;\njump[0xdd] = invalidMinor;\njump[0xde] = invalidMinor;\njump[0xdf] = invalidMinor;\n// 0xe0..0xf3 simple values, unsupported\nfor(let i = 0xe0; i <= 0xf3; i++){\n    jump[i] = errorer(\"simple values are not supported\");\n}\njump[0xf4] = invalidMinor // false, handled by quick[]\n;\njump[0xf5] = invalidMinor // true, handled by quick[]\n;\njump[0xf6] = invalidMinor // null, handled by quick[]\n;\njump[0xf7] = _7float_js__WEBPACK_IMPORTED_MODULE_8__.decodeUndefined // undefined\n;\njump[0xf8] = errorer(\"simple values are not supported\") // simple value, one byte follows, unsupported\n;\njump[0xf9] = _7float_js__WEBPACK_IMPORTED_MODULE_8__.decodeFloat16 // half-precision float (two-byte IEEE 754)\n;\njump[0xfa] = _7float_js__WEBPACK_IMPORTED_MODULE_8__.decodeFloat32 // single-precision float (four-byte IEEE 754)\n;\njump[0xfb] = _7float_js__WEBPACK_IMPORTED_MODULE_8__.decodeFloat64 // double-precision float (eight-byte IEEE 754)\n;\njump[0xfc] = invalidMinor;\njump[0xfd] = invalidMinor;\njump[0xfe] = invalidMinor;\njump[0xff] = _7float_js__WEBPACK_IMPORTED_MODULE_8__.decodeBreak // \"break\" stop code\n;\n/** @type {Token[]} */ const quick = [];\n// ints <24\nfor(let i = 0; i < 24; i++){\n    quick[i] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.uint, i, 1);\n}\n// negints >= -24\nfor(let i = -1; i >= -24; i--){\n    quick[31 - i] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.negint, i, 1);\n}\n// empty bytes\nquick[0x40] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.bytes, new Uint8Array(0), 1);\n// empty string\nquick[0x60] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.string, \"\", 1);\n// empty list\nquick[0x80] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.array, 0, 1);\n// empty map\nquick[0xa0] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.map, 0, 1);\n// false\nquick[0xf4] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.false, false, 1);\n// true\nquick[0xf5] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.true, true, 1);\n// null\nquick[0xf6] = new _token_js__WEBPACK_IMPORTED_MODULE_0__.Token(_token_js__WEBPACK_IMPORTED_MODULE_0__.Type.null, null, 1);\n/**\n * @param {Token} token\n * @returns {Uint8Array|undefined}\n */ function quickEncodeToken(token) {\n    switch(token.type){\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.false:\n            return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                0xf4\n            ]);\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.true:\n            return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                0xf5\n            ]);\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.null:\n            return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                0xf6\n            ]);\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.bytes:\n            if (!token.value.length) {\n                return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                    0x40\n                ]);\n            }\n            return;\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.string:\n            if (token.value === \"\") {\n                return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                    0x60\n                ]);\n            }\n            return;\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.array:\n            if (token.value === 0) {\n                return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                    0x80\n                ]);\n            }\n            /* c8 ignore next 2 */ // shouldn't be possible if this were called when there was only one token\n            return;\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.map:\n            if (token.value === 0) {\n                return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                    0xa0\n                ]);\n            }\n            /* c8 ignore next 2 */ // shouldn't be possible if this were called when there was only one token\n            return;\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.uint:\n            if (token.value < 24) {\n                return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                    Number(token.value)\n                ]);\n            }\n            return;\n        case _token_js__WEBPACK_IMPORTED_MODULE_0__.Type.negint:\n            if (token.value >= -24) {\n                return (0,_byte_utils_js__WEBPACK_IMPORTED_MODULE_10__.fromArray)([\n                    31 - Number(token.value)\n                ]);\n            }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi9qdW1wLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQ047QUFDSTtBQUNGO0FBQ0U7QUFDRjtBQUNKO0FBQ0E7QUFDSTtBQUNTO0FBQ0Y7QUFFM0M7O0NBRUMsR0FFRDs7OztDQUlDLEdBQ0QsU0FBU1ksYUFBY0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUs7SUFDckMsTUFBTSxJQUFJQyxNQUFNLENBQUMsRUFBRU4sdURBQWVBLENBQUMsNEJBQTRCLEVBQUVLLE1BQU0sWUFBWSxFQUFFRixJQUFJLENBQUNDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDeEc7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRyxRQUFTQyxHQUFHO0lBQ25CLE9BQU87UUFBUSxNQUFNLElBQUlGLE1BQU0sQ0FBQyxFQUFFTix1REFBZUEsQ0FBQyxDQUFDLEVBQUVRLElBQUksQ0FBQztJQUFFO0FBQzlEO0FBRUEsMkZBQTJGLEdBQ3BGLE1BQU1DLE9BQU8sRUFBRTtBQUV0Qix1Q0FBdUM7QUFDdkMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLEtBQUssTUFBTUEsSUFBSztJQUM5QkQsSUFBSSxDQUFDQyxFQUFFLEdBQUdSLGFBQWEsNkNBQTZDOztBQUN0RTtBQUNBTyxJQUFJLENBQUMsS0FBSyxHQUFHakIsa0RBQWdCLENBQUMsNkNBQTZDOztBQUMzRWlCLElBQUksQ0FBQyxLQUFLLEdBQUdqQixtREFBaUIsQ0FBQyw4Q0FBOEM7O0FBQzdFaUIsSUFBSSxDQUFDLEtBQUssR0FBR2pCLG1EQUFpQixDQUFDLCtDQUErQzs7QUFDOUVpQixJQUFJLENBQUMsS0FBSyxHQUFHakIsbURBQWlCLENBQUMsZ0RBQWdEOztBQUMvRWlCLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2IsK0NBQStDO0FBQy9DLElBQUssSUFBSVEsSUFBSSxNQUFNQSxLQUFLLE1BQU1BLElBQUs7SUFDakNELElBQUksQ0FBQ0MsRUFBRSxHQUFHUixhQUFhLG1DQUFtQzs7QUFDNUQ7QUFDQU8sSUFBSSxDQUFDLEtBQUssR0FBR2hCLHNEQUFvQixDQUFDLHdEQUF3RDs7QUFDMUZnQixJQUFJLENBQUMsS0FBSyxHQUFHaEIsdURBQXFCLENBQUMseURBQXlEOztBQUM1RmdCLElBQUksQ0FBQyxLQUFLLEdBQUdoQix1REFBcUIsQ0FBQyx3REFBd0Q7O0FBQzNGZ0IsSUFBSSxDQUFDLEtBQUssR0FBR2hCLHVEQUFxQixDQUFDLHlEQUF5RDs7QUFDNUZnQixJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiLHVDQUF1QztBQUN2QyxJQUFLLElBQUlRLElBQUksTUFBTUEsS0FBSyxNQUFNQSxJQUFLO0lBQ2pDRCxJQUFJLENBQUNDLEVBQUUsR0FBR2hCLDBEQUF3QjtBQUNwQztBQUNBZSxJQUFJLENBQUMsS0FBSyxHQUFHZixvREFBa0IsQ0FBQywrREFBK0Q7O0FBQy9GZSxJQUFJLENBQUMsS0FBSyxHQUFHZixxREFBbUIsQ0FBQyxnRUFBZ0U7O0FBQ2pHZSxJQUFJLENBQUMsS0FBSyxHQUFHZixxREFBbUIsQ0FBQyxpRUFBaUU7O0FBQ2xHZSxJQUFJLENBQUMsS0FBSyxHQUFHZixxREFBbUIsQ0FBQyxrRUFBa0U7O0FBQ25HZSxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHRixRQUFRLHFEQUFxRCwwREFBMEQ7O0FBQ3BJLHVDQUF1QztBQUN2QyxJQUFLLElBQUlHLElBQUksTUFBTUEsS0FBSyxNQUFNQSxJQUFLO0lBQ2pDRCxJQUFJLENBQUNDLEVBQUUsR0FBR2YsNERBQTBCO0FBQ3RDO0FBQ0FjLElBQUksQ0FBQyxLQUFLLEdBQUdkLHNEQUFvQixDQUFDLGdFQUFnRTs7QUFDbEdjLElBQUksQ0FBQyxLQUFLLEdBQUdkLHVEQUFxQixDQUFDLGlFQUFpRTs7QUFDcEdjLElBQUksQ0FBQyxLQUFLLEdBQUdkLHVEQUFxQixDQUFDLGtFQUFrRTs7QUFDckdjLElBQUksQ0FBQyxLQUFLLEdBQUdkLHVEQUFxQixDQUFDLG1FQUFtRTs7QUFDdEdjLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdGLFFBQVEscURBQXFELDhDQUE4Qzs7QUFDeEgsc0NBQXNDO0FBQ3RDLElBQUssSUFBSUcsSUFBSSxNQUFNQSxLQUFLLE1BQU1BLElBQUs7SUFDakNELElBQUksQ0FBQ0MsRUFBRSxHQUFHZCwwREFBd0I7QUFDcEM7QUFDQWEsSUFBSSxDQUFDLEtBQUssR0FBR2Isb0RBQWtCLENBQUMsOERBQThEOztBQUM5RmEsSUFBSSxDQUFDLEtBQUssR0FBR2IscURBQW1CLENBQUMsK0RBQStEOztBQUNoR2EsSUFBSSxDQUFDLEtBQUssR0FBR2IscURBQW1CLENBQUMsZ0VBQWdFOztBQUNqR2EsSUFBSSxDQUFDLEtBQUssR0FBR2IscURBQW1CLENBQUMsaUVBQWlFOztBQUNsR2EsSUFBSSxDQUFDLEtBQUssR0FBR1A7QUFDYk8sSUFBSSxDQUFDLEtBQUssR0FBR1A7QUFDYk8sSUFBSSxDQUFDLEtBQUssR0FBR1A7QUFDYk8sSUFBSSxDQUFDLEtBQUssR0FBR2IsNkRBQTJCLENBQUMsa0RBQWtEOztBQUMzRiw2Q0FBNkM7QUFDN0MsSUFBSyxJQUFJYyxJQUFJLE1BQU1BLEtBQUssTUFBTUEsSUFBSztJQUNqQ0QsSUFBSSxDQUFDQyxFQUFFLEdBQUdiLHNEQUFvQjtBQUNoQztBQUNBWSxJQUFJLENBQUMsS0FBSyxHQUFHWixnREFBYyxDQUFDLHFFQUFxRTs7QUFDakdZLElBQUksQ0FBQyxLQUFLLEdBQUdaLGlEQUFlLENBQUMsc0VBQXNFOztBQUNuR1ksSUFBSSxDQUFDLEtBQUssR0FBR1osaURBQWUsQ0FBQyx1RUFBdUU7O0FBQ3BHWSxJQUFJLENBQUMsS0FBSyxHQUFHWixpREFBZSxDQUFDLHdFQUF3RTs7QUFDckdZLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdaLHlEQUF1QixDQUFDLHlEQUF5RDs7QUFDOUYsT0FBTztBQUNQLElBQUssSUFBSWEsSUFBSSxNQUFNQSxLQUFLLE1BQU1BLElBQUs7SUFDakNELElBQUksQ0FBQ0MsRUFBRSxHQUFHWixzREFBb0I7QUFDaEM7QUFDQVcsSUFBSSxDQUFDLEtBQUssR0FBR1gsZ0RBQWM7QUFDM0JXLElBQUksQ0FBQyxLQUFLLEdBQUdYLGlEQUFlO0FBQzVCVyxJQUFJLENBQUMsS0FBSyxHQUFHWCxpREFBZTtBQUM1QlcsSUFBSSxDQUFDLEtBQUssR0FBR1gsaURBQWU7QUFDNUJXLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2JPLElBQUksQ0FBQyxLQUFLLEdBQUdQO0FBQ2Isd0NBQXdDO0FBQ3hDLElBQUssSUFBSVEsSUFBSSxNQUFNQSxLQUFLLE1BQU1BLElBQUs7SUFDakNELElBQUksQ0FBQ0MsRUFBRSxHQUFHSCxRQUFRO0FBQ3BCO0FBQ0FFLElBQUksQ0FBQyxLQUFLLEdBQUdQLGFBQWEsNEJBQTRCOztBQUN0RE8sSUFBSSxDQUFDLEtBQUssR0FBR1AsYUFBYSwyQkFBMkI7O0FBQ3JETyxJQUFJLENBQUMsS0FBSyxHQUFHUCxhQUFhLDJCQUEyQjs7QUFDckRPLElBQUksQ0FBQyxLQUFLLEdBQUdWLHVEQUFxQixDQUFDLFlBQVk7O0FBQy9DVSxJQUFJLENBQUMsS0FBSyxHQUFHRixRQUFRLG1DQUFtQyw4Q0FBOEM7O0FBQ3RHRSxJQUFJLENBQUMsS0FBSyxHQUFHVixxREFBbUIsQ0FBQywyQ0FBMkM7O0FBQzVFVSxJQUFJLENBQUMsS0FBSyxHQUFHVixxREFBbUIsQ0FBQyw4Q0FBOEM7O0FBQy9FVSxJQUFJLENBQUMsS0FBSyxHQUFHVixxREFBbUIsQ0FBQywrQ0FBK0M7O0FBQ2hGVSxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHUDtBQUNiTyxJQUFJLENBQUMsS0FBSyxHQUFHVixtREFBaUIsQ0FBQyxvQkFBb0I7O0FBRW5ELG9CQUFvQixHQUNiLE1BQU1vRCxRQUFRLEVBQUU7QUFDdkIsV0FBVztBQUNYLElBQUssSUFBSXpDLElBQUksR0FBR0EsSUFBSSxJQUFJQSxJQUFLO0lBQzNCeUMsS0FBSyxDQUFDekMsRUFBRSxHQUFHLElBQUlwQiw0Q0FBS0EsQ0FBQ0MsMkNBQUlBLENBQUNDLElBQUksRUFBRWtCLEdBQUc7QUFDckM7QUFDQSxpQkFBaUI7QUFDakIsSUFBSyxJQUFJQSxJQUFJLENBQUMsR0FBR0EsS0FBSyxDQUFDLElBQUlBLElBQUs7SUFDOUJ5QyxLQUFLLENBQUMsS0FBS3pDLEVBQUUsR0FBRyxJQUFJcEIsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDRSxNQUFNLEVBQUVpQixHQUFHO0FBQzVDO0FBQ0EsY0FBYztBQUNkeUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJN0QsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDRyxLQUFLLEVBQUUsSUFBSTBELFdBQVcsSUFBSTtBQUN2RCxlQUFlO0FBQ2ZELEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSTdELDRDQUFLQSxDQUFDQywyQ0FBSUEsQ0FBQ0ksTUFBTSxFQUFFLElBQUk7QUFDekMsYUFBYTtBQUNid0QsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJN0QsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDSyxLQUFLLEVBQUUsR0FBRztBQUN2QyxZQUFZO0FBQ1p1RCxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUk3RCw0Q0FBS0EsQ0FBQ0MsMkNBQUlBLENBQUNNLEdBQUcsRUFBRSxHQUFHO0FBQ3JDLFFBQVE7QUFDUnNELEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSTdELDRDQUFLQSxDQUFDQywyQ0FBSUEsQ0FBQzhELEtBQUssRUFBRSxPQUFPO0FBQzNDLE9BQU87QUFDUEYsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJN0QsNENBQUtBLENBQUNDLDJDQUFJQSxDQUFDK0QsSUFBSSxFQUFFLE1BQU07QUFDekMsT0FBTztBQUNQSCxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUk3RCw0Q0FBS0EsQ0FBQ0MsMkNBQUlBLENBQUNnRSxJQUFJLEVBQUUsTUFBTTtBQUV6Qzs7O0NBR0MsR0FDTSxTQUFTQyxpQkFBa0JDLEtBQUs7SUFDckMsT0FBUUEsTUFBTUMsSUFBSTtRQUNoQixLQUFLbkUsMkNBQUlBLENBQUM4RCxLQUFLO1lBQ2IsT0FBT3BELDBEQUFTQSxDQUFDO2dCQUFDO2FBQUs7UUFDekIsS0FBS1YsMkNBQUlBLENBQUMrRCxJQUFJO1lBQ1osT0FBT3JELDBEQUFTQSxDQUFDO2dCQUFDO2FBQUs7UUFDekIsS0FBS1YsMkNBQUlBLENBQUNnRSxJQUFJO1lBQ1osT0FBT3RELDBEQUFTQSxDQUFDO2dCQUFDO2FBQUs7UUFDekIsS0FBS1YsMkNBQUlBLENBQUNHLEtBQUs7WUFDYixJQUFJLENBQUMrRCxNQUFNRSxLQUFLLENBQUNDLE1BQU0sRUFBRTtnQkFDdkIsT0FBTzNELDBEQUFTQSxDQUFDO29CQUFDO2lCQUFLO1lBQ3pCO1lBQ0E7UUFDRixLQUFLViwyQ0FBSUEsQ0FBQ0ksTUFBTTtZQUNkLElBQUk4RCxNQUFNRSxLQUFLLEtBQUssSUFBSTtnQkFDdEIsT0FBTzFELDBEQUFTQSxDQUFDO29CQUFDO2lCQUFLO1lBQ3pCO1lBQ0E7UUFDRixLQUFLViwyQ0FBSUEsQ0FBQ0ssS0FBSztZQUNiLElBQUk2RCxNQUFNRSxLQUFLLEtBQUssR0FBRztnQkFDckIsT0FBTzFELDBEQUFTQSxDQUFDO29CQUFDO2lCQUFLO1lBQ3pCO1lBQ0Esb0JBQW9CLEdBQ3BCLDBFQUEwRTtZQUMxRTtRQUNGLEtBQUtWLDJDQUFJQSxDQUFDTSxHQUFHO1lBQ1gsSUFBSTRELE1BQU1FLEtBQUssS0FBSyxHQUFHO2dCQUNyQixPQUFPMUQsMERBQVNBLENBQUM7b0JBQUM7aUJBQUs7WUFDekI7WUFDQSxvQkFBb0IsR0FDcEIsMEVBQTBFO1lBQzFFO1FBQ0YsS0FBS1YsMkNBQUlBLENBQUNDLElBQUk7WUFDWixJQUFJaUUsTUFBTUUsS0FBSyxHQUFHLElBQUk7Z0JBQ3BCLE9BQU8xRCwwREFBU0EsQ0FBQztvQkFBQzRELE9BQU9KLE1BQU1FLEtBQUs7aUJBQUU7WUFDeEM7WUFDQTtRQUNGLEtBQUtwRSwyQ0FBSUEsQ0FBQ0UsTUFBTTtZQUNkLElBQUlnRSxNQUFNRSxLQUFLLElBQUksQ0FBQyxJQUFJO2dCQUN0QixPQUFPMUQsMERBQVNBLENBQUM7b0JBQUMsS0FBSzRELE9BQU9KLE1BQU1FLEtBQUs7aUJBQUU7WUFDN0M7SUFDSjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVnYXZpYmUtZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi9qdW1wLmpzPzIyZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9rZW4sIFR5cGUgfSBmcm9tICcuL3Rva2VuLmpzJ1xuaW1wb3J0ICogYXMgdWludCBmcm9tICcuLzB1aW50LmpzJ1xuaW1wb3J0ICogYXMgbmVnaW50IGZyb20gJy4vMW5lZ2ludC5qcydcbmltcG9ydCAqIGFzIGJ5dGVzIGZyb20gJy4vMmJ5dGVzLmpzJ1xuaW1wb3J0ICogYXMgc3RyaW5nIGZyb20gJy4vM3N0cmluZy5qcydcbmltcG9ydCAqIGFzIGFycmF5IGZyb20gJy4vNGFycmF5LmpzJ1xuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vNW1hcC5qcydcbmltcG9ydCAqIGFzIHRhZyBmcm9tICcuLzZ0YWcuanMnXG5pbXBvcnQgKiBhcyBmbG9hdCBmcm9tICcuLzdmbG9hdC5qcydcbmltcG9ydCB7IGRlY29kZUVyclByZWZpeCB9IGZyb20gJy4vY29tbW9uLmpzJ1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9ieXRlLXV0aWxzLmpzJ1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2ludGVyZmFjZScpLkRlY29kZU9wdGlvbnN9IERlY29kZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IG1pbm9yXG4gKi9cbmZ1bmN0aW9uIGludmFsaWRNaW5vciAoZGF0YSwgcG9zLCBtaW5vcikge1xuICB0aHJvdyBuZXcgRXJyb3IoYCR7ZGVjb2RlRXJyUHJlZml4fSBlbmNvdW50ZXJlZCBpbnZhbGlkIG1pbm9yICgke21pbm9yfSkgZm9yIG1ham9yICR7ZGF0YVtwb3NdID4+PiA1fWApXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICogQHJldHVybnMgeygpPT5hbnl9XG4gKi9cbmZ1bmN0aW9uIGVycm9yZXIgKG1zZykge1xuICByZXR1cm4gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoYCR7ZGVjb2RlRXJyUHJlZml4fSAke21zZ31gKSB9XG59XG5cbi8qKiBAdHlwZSB7KChkYXRhOlVpbnQ4QXJyYXksIHBvczpudW1iZXIsIG1pbm9yOm51bWJlciwgb3B0aW9ucz86RGVjb2RlT3B0aW9ucykgPT4gYW55KVtdfSAqL1xuZXhwb3J0IGNvbnN0IGp1bXAgPSBbXVxuXG4vLyB1bnNpZ25lZCBpbnRlZ2VyLCAweDAwLi4weDE3ICgwLi4yMylcbmZvciAobGV0IGkgPSAwOyBpIDw9IDB4MTc7IGkrKykge1xuICBqdW1wW2ldID0gaW52YWxpZE1pbm9yIC8vIHVpbnQuZGVjb2RlVWludENvbXBhY3QsIGhhbmRsZWQgYnkgcXVpY2tbXVxufVxuanVtcFsweDE4XSA9IHVpbnQuZGVjb2RlVWludDggLy8gdW5zaWduZWQgaW50ZWdlciwgb25lLWJ5dGUgdWludDhfdCBmb2xsb3dzXG5qdW1wWzB4MTldID0gdWludC5kZWNvZGVVaW50MTYgLy8gdW5zaWduZWQgaW50ZWdlciwgdHdvLWJ5dGUgdWludDE2X3QgZm9sbG93c1xuanVtcFsweDFhXSA9IHVpbnQuZGVjb2RlVWludDMyIC8vIHVuc2lnbmVkIGludGVnZXIsIGZvdXItYnl0ZSB1aW50MzJfdCBmb2xsb3dzXG5qdW1wWzB4MWJdID0gdWludC5kZWNvZGVVaW50NjQgLy8gdW5zaWduZWQgaW50ZWdlciwgZWlnaHQtYnl0ZSB1aW50NjRfdCBmb2xsb3dzXG5qdW1wWzB4MWNdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4MWRdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4MWVdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4MWZdID0gaW52YWxpZE1pbm9yXG4vLyBuZWdhdGl2ZSBpbnRlZ2VyLCAtMS0weDAwLi4tMS0weDE3ICgtMS4uLTI0KVxuZm9yIChsZXQgaSA9IDB4MjA7IGkgPD0gMHgzNzsgaSsrKSB7XG4gIGp1bXBbaV0gPSBpbnZhbGlkTWlub3IgLy8gbmVnaW50RGVjb2RlLCBoYW5kbGVkIGJ5IHF1aWNrW11cbn1cbmp1bXBbMHgzOF0gPSBuZWdpbnQuZGVjb2RlTmVnaW50OCAvLyBuZWdhdGl2ZSBpbnRlZ2VyLCAtMS1uIG9uZS1ieXRlIHVpbnQ4X3QgZm9yIG4gZm9sbG93c1xuanVtcFsweDM5XSA9IG5lZ2ludC5kZWNvZGVOZWdpbnQxNiAvLyBuZWdhdGl2ZSBpbnRlZ2VyLCAtMS1uIHR3by1ieXRlIHVpbnQxNl90IGZvciBuIGZvbGxvd3Ncbmp1bXBbMHgzYV0gPSBuZWdpbnQuZGVjb2RlTmVnaW50MzIgLy8gbmVnYXRpdmUgaW50ZWdlciwgLTEtbiBmb3VyLWJ5dGUgdWludDMyX3QgZm9yIGZvbGxvd3Ncbmp1bXBbMHgzYl0gPSBuZWdpbnQuZGVjb2RlTmVnaW50NjQgLy8gbmVnYXRpdmUgaW50ZWdlciwgLTEtbiBlaWdodC1ieXRlIHVpbnQ2NF90IGZvciBmb2xsb3dzXG5qdW1wWzB4M2NdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4M2RdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4M2VdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4M2ZdID0gaW52YWxpZE1pbm9yXG4vLyBieXRlIHN0cmluZywgMHgwMC4uMHgxNyBieXRlcyBmb2xsb3dcbmZvciAobGV0IGkgPSAweDQwOyBpIDw9IDB4NTc7IGkrKykge1xuICBqdW1wW2ldID0gYnl0ZXMuZGVjb2RlQnl0ZXNDb21wYWN0XG59XG5qdW1wWzB4NThdID0gYnl0ZXMuZGVjb2RlQnl0ZXM4IC8vIGJ5dGUgc3RyaW5nLCBvbmUtYnl0ZSB1aW50OF90IGZvciBuLCBhbmQgdGhlbiBuIGJ5dGVzIGZvbGxvd1xuanVtcFsweDU5XSA9IGJ5dGVzLmRlY29kZUJ5dGVzMTYgLy8gYnl0ZSBzdHJpbmcsIHR3by1ieXRlIHVpbnQxNl90IGZvciBuLCBhbmQgdGhlbiBuIGJ5dGVzIGZvbGxvd1xuanVtcFsweDVhXSA9IGJ5dGVzLmRlY29kZUJ5dGVzMzIgLy8gYnl0ZSBzdHJpbmcsIGZvdXItYnl0ZSB1aW50MzJfdCBmb3IgbiwgYW5kIHRoZW4gbiBieXRlcyBmb2xsb3dcbmp1bXBbMHg1Yl0gPSBieXRlcy5kZWNvZGVCeXRlczY0IC8vIGJ5dGUgc3RyaW5nLCBlaWdodC1ieXRlIHVpbnQ2NF90IGZvciBuLCBhbmQgdGhlbiBuIGJ5dGVzIGZvbGxvd1xuanVtcFsweDVjXSA9IGludmFsaWRNaW5vclxuanVtcFsweDVkXSA9IGludmFsaWRNaW5vclxuanVtcFsweDVlXSA9IGludmFsaWRNaW5vclxuanVtcFsweDVmXSA9IGVycm9yZXIoJ2luZGVmaW5pdGUgbGVuZ3RoIGJ5dGVzL3N0cmluZ3MgYXJlIG5vdCBzdXBwb3J0ZWQnKSAvLyBieXRlIHN0cmluZywgYnl0ZSBzdHJpbmdzIGZvbGxvdywgdGVybWluYXRlZCBieSBcImJyZWFrXCJcbi8vIFVURi04IHN0cmluZyAweDAwLi4weDE3IGJ5dGVzIGZvbGxvd1xuZm9yIChsZXQgaSA9IDB4NjA7IGkgPD0gMHg3NzsgaSsrKSB7XG4gIGp1bXBbaV0gPSBzdHJpbmcuZGVjb2RlU3RyaW5nQ29tcGFjdFxufVxuanVtcFsweDc4XSA9IHN0cmluZy5kZWNvZGVTdHJpbmc4IC8vIFVURi04IHN0cmluZywgb25lLWJ5dGUgdWludDhfdCBmb3IgbiwgYW5kIHRoZW4gbiBieXRlcyBmb2xsb3dcbmp1bXBbMHg3OV0gPSBzdHJpbmcuZGVjb2RlU3RyaW5nMTYgLy8gVVRGLTggc3RyaW5nLCB0d28tYnl0ZSB1aW50MTZfdCBmb3IgbiwgYW5kIHRoZW4gbiBieXRlcyBmb2xsb3dcbmp1bXBbMHg3YV0gPSBzdHJpbmcuZGVjb2RlU3RyaW5nMzIgLy8gVVRGLTggc3RyaW5nLCBmb3VyLWJ5dGUgdWludDMyX3QgZm9yIG4sIGFuZCB0aGVuIG4gYnl0ZXMgZm9sbG93XG5qdW1wWzB4N2JdID0gc3RyaW5nLmRlY29kZVN0cmluZzY0IC8vIFVURi04IHN0cmluZywgZWlnaHQtYnl0ZSB1aW50NjRfdCBmb3IgbiwgYW5kIHRoZW4gbiBieXRlcyBmb2xsb3dcbmp1bXBbMHg3Y10gPSBpbnZhbGlkTWlub3Jcbmp1bXBbMHg3ZF0gPSBpbnZhbGlkTWlub3Jcbmp1bXBbMHg3ZV0gPSBpbnZhbGlkTWlub3Jcbmp1bXBbMHg3Zl0gPSBlcnJvcmVyKCdpbmRlZmluaXRlIGxlbmd0aCBieXRlcy9zdHJpbmdzIGFyZSBub3Qgc3VwcG9ydGVkJykgLy8gVVRGLTggc3RyaW5ncyBmb2xsb3csIHRlcm1pbmF0ZWQgYnkgXCJicmVha1wiXG4vLyBhcnJheSwgMHgwMC4uMHgxNyBkYXRhIGl0ZW1zIGZvbGxvd1xuZm9yIChsZXQgaSA9IDB4ODA7IGkgPD0gMHg5NzsgaSsrKSB7XG4gIGp1bXBbaV0gPSBhcnJheS5kZWNvZGVBcnJheUNvbXBhY3Rcbn1cbmp1bXBbMHg5OF0gPSBhcnJheS5kZWNvZGVBcnJheTggLy8gYXJyYXksIG9uZS1ieXRlIHVpbnQ4X3QgZm9yIG4sIGFuZCB0aGVuIG4gZGF0YSBpdGVtcyBmb2xsb3dcbmp1bXBbMHg5OV0gPSBhcnJheS5kZWNvZGVBcnJheTE2IC8vIGFycmF5LCB0d28tYnl0ZSB1aW50MTZfdCBmb3IgbiwgYW5kIHRoZW4gbiBkYXRhIGl0ZW1zIGZvbGxvd1xuanVtcFsweDlhXSA9IGFycmF5LmRlY29kZUFycmF5MzIgLy8gYXJyYXksIGZvdXItYnl0ZSB1aW50MzJfdCBmb3IgbiwgYW5kIHRoZW4gbiBkYXRhIGl0ZW1zIGZvbGxvd1xuanVtcFsweDliXSA9IGFycmF5LmRlY29kZUFycmF5NjQgLy8gYXJyYXksIGVpZ2h0LWJ5dGUgdWludDY0X3QgZm9yIG4sIGFuZCB0aGVuIG4gZGF0YSBpdGVtcyBmb2xsb3dcbmp1bXBbMHg5Y10gPSBpbnZhbGlkTWlub3Jcbmp1bXBbMHg5ZF0gPSBpbnZhbGlkTWlub3Jcbmp1bXBbMHg5ZV0gPSBpbnZhbGlkTWlub3Jcbmp1bXBbMHg5Zl0gPSBhcnJheS5kZWNvZGVBcnJheUluZGVmaW5pdGUgLy8gYXJyYXksIGRhdGEgaXRlbXMgZm9sbG93LCB0ZXJtaW5hdGVkIGJ5IFwiYnJlYWtcIlxuLy8gbWFwLCAweDAwLi4weDE3IHBhaXJzIG9mIGRhdGEgaXRlbXMgZm9sbG93XG5mb3IgKGxldCBpID0gMHhhMDsgaSA8PSAweGI3OyBpKyspIHtcbiAganVtcFtpXSA9IG1hcC5kZWNvZGVNYXBDb21wYWN0XG59XG5qdW1wWzB4YjhdID0gbWFwLmRlY29kZU1hcDggLy8gbWFwLCBvbmUtYnl0ZSB1aW50OF90IGZvciBuLCBhbmQgdGhlbiBuIHBhaXJzIG9mIGRhdGEgaXRlbXMgZm9sbG93XG5qdW1wWzB4YjldID0gbWFwLmRlY29kZU1hcDE2IC8vIG1hcCwgdHdvLWJ5dGUgdWludDE2X3QgZm9yIG4sIGFuZCB0aGVuIG4gcGFpcnMgb2YgZGF0YSBpdGVtcyBmb2xsb3dcbmp1bXBbMHhiYV0gPSBtYXAuZGVjb2RlTWFwMzIgLy8gbWFwLCBmb3VyLWJ5dGUgdWludDMyX3QgZm9yIG4sIGFuZCB0aGVuIG4gcGFpcnMgb2YgZGF0YSBpdGVtcyBmb2xsb3dcbmp1bXBbMHhiYl0gPSBtYXAuZGVjb2RlTWFwNjQgLy8gbWFwLCBlaWdodC1ieXRlIHVpbnQ2NF90IGZvciBuLCBhbmQgdGhlbiBuIHBhaXJzIG9mIGRhdGEgaXRlbXMgZm9sbG93XG5qdW1wWzB4YmNdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4YmRdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4YmVdID0gaW52YWxpZE1pbm9yXG5qdW1wWzB4YmZdID0gbWFwLmRlY29kZU1hcEluZGVmaW5pdGUgLy8gbWFwLCBwYWlycyBvZiBkYXRhIGl0ZW1zIGZvbGxvdywgdGVybWluYXRlZCBieSBcImJyZWFrXCJcbi8vIHRhZ3NcbmZvciAobGV0IGkgPSAweGMwOyBpIDw9IDB4ZDc7IGkrKykge1xuICBqdW1wW2ldID0gdGFnLmRlY29kZVRhZ0NvbXBhY3Rcbn1cbmp1bXBbMHhkOF0gPSB0YWcuZGVjb2RlVGFnOFxuanVtcFsweGQ5XSA9IHRhZy5kZWNvZGVUYWcxNlxuanVtcFsweGRhXSA9IHRhZy5kZWNvZGVUYWczMlxuanVtcFsweGRiXSA9IHRhZy5kZWNvZGVUYWc2NFxuanVtcFsweGRjXSA9IGludmFsaWRNaW5vclxuanVtcFsweGRkXSA9IGludmFsaWRNaW5vclxuanVtcFsweGRlXSA9IGludmFsaWRNaW5vclxuanVtcFsweGRmXSA9IGludmFsaWRNaW5vclxuLy8gMHhlMC4uMHhmMyBzaW1wbGUgdmFsdWVzLCB1bnN1cHBvcnRlZFxuZm9yIChsZXQgaSA9IDB4ZTA7IGkgPD0gMHhmMzsgaSsrKSB7XG4gIGp1bXBbaV0gPSBlcnJvcmVyKCdzaW1wbGUgdmFsdWVzIGFyZSBub3Qgc3VwcG9ydGVkJylcbn1cbmp1bXBbMHhmNF0gPSBpbnZhbGlkTWlub3IgLy8gZmFsc2UsIGhhbmRsZWQgYnkgcXVpY2tbXVxuanVtcFsweGY1XSA9IGludmFsaWRNaW5vciAvLyB0cnVlLCBoYW5kbGVkIGJ5IHF1aWNrW11cbmp1bXBbMHhmNl0gPSBpbnZhbGlkTWlub3IgLy8gbnVsbCwgaGFuZGxlZCBieSBxdWlja1tdXG5qdW1wWzB4ZjddID0gZmxvYXQuZGVjb2RlVW5kZWZpbmVkIC8vIHVuZGVmaW5lZFxuanVtcFsweGY4XSA9IGVycm9yZXIoJ3NpbXBsZSB2YWx1ZXMgYXJlIG5vdCBzdXBwb3J0ZWQnKSAvLyBzaW1wbGUgdmFsdWUsIG9uZSBieXRlIGZvbGxvd3MsIHVuc3VwcG9ydGVkXG5qdW1wWzB4ZjldID0gZmxvYXQuZGVjb2RlRmxvYXQxNiAvLyBoYWxmLXByZWNpc2lvbiBmbG9hdCAodHdvLWJ5dGUgSUVFRSA3NTQpXG5qdW1wWzB4ZmFdID0gZmxvYXQuZGVjb2RlRmxvYXQzMiAvLyBzaW5nbGUtcHJlY2lzaW9uIGZsb2F0IChmb3VyLWJ5dGUgSUVFRSA3NTQpXG5qdW1wWzB4ZmJdID0gZmxvYXQuZGVjb2RlRmxvYXQ2NCAvLyBkb3VibGUtcHJlY2lzaW9uIGZsb2F0IChlaWdodC1ieXRlIElFRUUgNzU0KVxuanVtcFsweGZjXSA9IGludmFsaWRNaW5vclxuanVtcFsweGZkXSA9IGludmFsaWRNaW5vclxuanVtcFsweGZlXSA9IGludmFsaWRNaW5vclxuanVtcFsweGZmXSA9IGZsb2F0LmRlY29kZUJyZWFrIC8vIFwiYnJlYWtcIiBzdG9wIGNvZGVcblxuLyoqIEB0eXBlIHtUb2tlbltdfSAqL1xuZXhwb3J0IGNvbnN0IHF1aWNrID0gW11cbi8vIGludHMgPDI0XG5mb3IgKGxldCBpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgcXVpY2tbaV0gPSBuZXcgVG9rZW4oVHlwZS51aW50LCBpLCAxKVxufVxuLy8gbmVnaW50cyA+PSAtMjRcbmZvciAobGV0IGkgPSAtMTsgaSA+PSAtMjQ7IGktLSkge1xuICBxdWlja1szMSAtIGldID0gbmV3IFRva2VuKFR5cGUubmVnaW50LCBpLCAxKVxufVxuLy8gZW1wdHkgYnl0ZXNcbnF1aWNrWzB4NDBdID0gbmV3IFRva2VuKFR5cGUuYnl0ZXMsIG5ldyBVaW50OEFycmF5KDApLCAxKVxuLy8gZW1wdHkgc3RyaW5nXG5xdWlja1sweDYwXSA9IG5ldyBUb2tlbihUeXBlLnN0cmluZywgJycsIDEpXG4vLyBlbXB0eSBsaXN0XG5xdWlja1sweDgwXSA9IG5ldyBUb2tlbihUeXBlLmFycmF5LCAwLCAxKVxuLy8gZW1wdHkgbWFwXG5xdWlja1sweGEwXSA9IG5ldyBUb2tlbihUeXBlLm1hcCwgMCwgMSlcbi8vIGZhbHNlXG5xdWlja1sweGY0XSA9IG5ldyBUb2tlbihUeXBlLmZhbHNlLCBmYWxzZSwgMSlcbi8vIHRydWVcbnF1aWNrWzB4ZjVdID0gbmV3IFRva2VuKFR5cGUudHJ1ZSwgdHJ1ZSwgMSlcbi8vIG51bGxcbnF1aWNrWzB4ZjZdID0gbmV3IFRva2VuKFR5cGUubnVsbCwgbnVsbCwgMSlcblxuLyoqXG4gKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICogQHJldHVybnMge1VpbnQ4QXJyYXl8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVpY2tFbmNvZGVUb2tlbiAodG9rZW4pIHtcbiAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgY2FzZSBUeXBlLmZhbHNlOlxuICAgICAgcmV0dXJuIGZyb21BcnJheShbMHhmNF0pXG4gICAgY2FzZSBUeXBlLnRydWU6XG4gICAgICByZXR1cm4gZnJvbUFycmF5KFsweGY1XSlcbiAgICBjYXNlIFR5cGUubnVsbDpcbiAgICAgIHJldHVybiBmcm9tQXJyYXkoWzB4ZjZdKVxuICAgIGNhc2UgVHlwZS5ieXRlczpcbiAgICAgIGlmICghdG9rZW4udmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmcm9tQXJyYXkoWzB4NDBdKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgY2FzZSBUeXBlLnN0cmluZzpcbiAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheShbMHg2MF0pXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICBjYXNlIFR5cGUuYXJyYXk6XG4gICAgICBpZiAodG9rZW4udmFsdWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheShbMHg4MF0pXG4gICAgICB9XG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAyICovXG4gICAgICAvLyBzaG91bGRuJ3QgYmUgcG9zc2libGUgaWYgdGhpcyB3ZXJlIGNhbGxlZCB3aGVuIHRoZXJlIHdhcyBvbmx5IG9uZSB0b2tlblxuICAgICAgcmV0dXJuXG4gICAgY2FzZSBUeXBlLm1hcDpcbiAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZnJvbUFycmF5KFsweGEwXSlcbiAgICAgIH1cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbiAgICAgIC8vIHNob3VsZG4ndCBiZSBwb3NzaWJsZSBpZiB0aGlzIHdlcmUgY2FsbGVkIHdoZW4gdGhlcmUgd2FzIG9ubHkgb25lIHRva2VuXG4gICAgICByZXR1cm5cbiAgICBjYXNlIFR5cGUudWludDpcbiAgICAgIGlmICh0b2tlbi52YWx1ZSA8IDI0KSB7XG4gICAgICAgIHJldHVybiBmcm9tQXJyYXkoW051bWJlcih0b2tlbi52YWx1ZSldKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgY2FzZSBUeXBlLm5lZ2ludDpcbiAgICAgIGlmICh0b2tlbi52YWx1ZSA+PSAtMjQpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheShbMzEgLSBOdW1iZXIodG9rZW4udmFsdWUpXSlcbiAgICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIlRva2VuIiwiVHlwZSIsInVpbnQiLCJuZWdpbnQiLCJieXRlcyIsInN0cmluZyIsImFycmF5IiwibWFwIiwidGFnIiwiZmxvYXQiLCJkZWNvZGVFcnJQcmVmaXgiLCJmcm9tQXJyYXkiLCJpbnZhbGlkTWlub3IiLCJkYXRhIiwicG9zIiwibWlub3IiLCJFcnJvciIsImVycm9yZXIiLCJtc2ciLCJqdW1wIiwiaSIsImRlY29kZVVpbnQ4IiwiZGVjb2RlVWludDE2IiwiZGVjb2RlVWludDMyIiwiZGVjb2RlVWludDY0IiwiZGVjb2RlTmVnaW50OCIsImRlY29kZU5lZ2ludDE2IiwiZGVjb2RlTmVnaW50MzIiLCJkZWNvZGVOZWdpbnQ2NCIsImRlY29kZUJ5dGVzQ29tcGFjdCIsImRlY29kZUJ5dGVzOCIsImRlY29kZUJ5dGVzMTYiLCJkZWNvZGVCeXRlczMyIiwiZGVjb2RlQnl0ZXM2NCIsImRlY29kZVN0cmluZ0NvbXBhY3QiLCJkZWNvZGVTdHJpbmc4IiwiZGVjb2RlU3RyaW5nMTYiLCJkZWNvZGVTdHJpbmczMiIsImRlY29kZVN0cmluZzY0IiwiZGVjb2RlQXJyYXlDb21wYWN0IiwiZGVjb2RlQXJyYXk4IiwiZGVjb2RlQXJyYXkxNiIsImRlY29kZUFycmF5MzIiLCJkZWNvZGVBcnJheTY0IiwiZGVjb2RlQXJyYXlJbmRlZmluaXRlIiwiZGVjb2RlTWFwQ29tcGFjdCIsImRlY29kZU1hcDgiLCJkZWNvZGVNYXAxNiIsImRlY29kZU1hcDMyIiwiZGVjb2RlTWFwNjQiLCJkZWNvZGVNYXBJbmRlZmluaXRlIiwiZGVjb2RlVGFnQ29tcGFjdCIsImRlY29kZVRhZzgiLCJkZWNvZGVUYWcxNiIsImRlY29kZVRhZzMyIiwiZGVjb2RlVGFnNjQiLCJkZWNvZGVVbmRlZmluZWQiLCJkZWNvZGVGbG9hdDE2IiwiZGVjb2RlRmxvYXQzMiIsImRlY29kZUZsb2F0NjQiLCJkZWNvZGVCcmVhayIsInF1aWNrIiwiVWludDhBcnJheSIsImZhbHNlIiwidHJ1ZSIsIm51bGwiLCJxdWlja0VuY29kZVRva2VuIiwidG9rZW4iLCJ0eXBlIiwidmFsdWUiLCJsZW5ndGgiLCJOdW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/jump.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/cborg/lib/token.js":
/*!******************************************!*\
  !*** ../node_modules/cborg/lib/token.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   Type: () => (/* binding */ Type)\n/* harmony export */ });\nclass Type {\n    /**\n   * @param {number} major\n   * @param {string} name\n   * @param {boolean} terminal\n   */ constructor(major, name, terminal){\n        this.major = major;\n        this.majorEncoded = major << 5;\n        this.name = name;\n        this.terminal = terminal;\n    }\n    /* c8 ignore next 3 */ toString() {\n        return `Type[${this.major}].${this.name}`;\n    }\n    /**\n   * @param {Type} typ\n   * @returns {number}\n   */ compare(typ) {\n        /* c8 ignore next 1 */ return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;\n    }\n}\n// convert to static fields when better supported\nType.uint = new Type(0, \"uint\", true);\nType.negint = new Type(1, \"negint\", true);\nType.bytes = new Type(2, \"bytes\", true);\nType.string = new Type(3, \"string\", true);\nType.array = new Type(4, \"array\", false);\nType.map = new Type(5, \"map\", false);\nType.tag = new Type(6, \"tag\", false) // terminal?\n;\nType.float = new Type(7, \"float\", true);\nType.false = new Type(7, \"false\", true);\nType.true = new Type(7, \"true\", true);\nType.null = new Type(7, \"null\", true);\nType.undefined = new Type(7, \"undefined\", true);\nType.break = new Type(7, \"break\", true);\n// Type.indefiniteLength = new Type(0, 'indefiniteLength', true)\nclass Token {\n    /**\n   * @param {Type} type\n   * @param {any} [value]\n   * @param {number} [encodedLength]\n   */ constructor(type, value, encodedLength){\n        this.type = type;\n        this.value = value;\n        this.encodedLength = encodedLength;\n        /** @type {Uint8Array|undefined} */ this.encodedBytes = undefined;\n        /** @type {Uint8Array|undefined} */ this.byteValue = undefined;\n    }\n    /* c8 ignore next 3 */ toString() {\n        return `Token[${this.type}].${this.value}`;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2Nib3JnL2xpYi90b2tlbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BO0lBQ0o7Ozs7R0FJQyxHQUNEQyxZQUFhQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsUUFBUSxDQUFFO1FBQ2xDLElBQUksQ0FBQ0YsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0csWUFBWSxHQUFHSCxTQUFTO1FBQzdCLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtJQUNsQjtJQUVBLG9CQUFvQixHQUNwQkUsV0FBWTtRQUNWLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDSixLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDM0M7SUFFQTs7O0dBR0MsR0FDREksUUFBU0MsR0FBRyxFQUFFO1FBQ1osb0JBQW9CLEdBQ3BCLE9BQU8sSUFBSSxDQUFDTixLQUFLLEdBQUdNLElBQUlOLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDQSxLQUFLLEdBQUdNLElBQUlOLEtBQUssR0FBRyxJQUFJO0lBQ3BFO0FBQ0Y7QUFFQSxpREFBaUQ7QUFDakRGLEtBQUtTLElBQUksR0FBRyxJQUFJVCxLQUFLLEdBQUcsUUFBUTtBQUNoQ0EsS0FBS1UsTUFBTSxHQUFHLElBQUlWLEtBQUssR0FBRyxVQUFVO0FBQ3BDQSxLQUFLVyxLQUFLLEdBQUcsSUFBSVgsS0FBSyxHQUFHLFNBQVM7QUFDbENBLEtBQUtZLE1BQU0sR0FBRyxJQUFJWixLQUFLLEdBQUcsVUFBVTtBQUNwQ0EsS0FBS2EsS0FBSyxHQUFHLElBQUliLEtBQUssR0FBRyxTQUFTO0FBQ2xDQSxLQUFLYyxHQUFHLEdBQUcsSUFBSWQsS0FBSyxHQUFHLE9BQU87QUFDOUJBLEtBQUtlLEdBQUcsR0FBRyxJQUFJZixLQUFLLEdBQUcsT0FBTyxPQUFPLFlBQVk7O0FBQ2pEQSxLQUFLZ0IsS0FBSyxHQUFHLElBQUloQixLQUFLLEdBQUcsU0FBUztBQUNsQ0EsS0FBS2lCLEtBQUssR0FBRyxJQUFJakIsS0FBSyxHQUFHLFNBQVM7QUFDbENBLEtBQUtrQixJQUFJLEdBQUcsSUFBSWxCLEtBQUssR0FBRyxRQUFRO0FBQ2hDQSxLQUFLbUIsSUFBSSxHQUFHLElBQUluQixLQUFLLEdBQUcsUUFBUTtBQUNoQ0EsS0FBS29CLFNBQVMsR0FBRyxJQUFJcEIsS0FBSyxHQUFHLGFBQWE7QUFDMUNBLEtBQUtxQixLQUFLLEdBQUcsSUFBSXJCLEtBQUssR0FBRyxTQUFTO0FBQ2xDLGdFQUFnRTtBQUVoRSxNQUFNc0I7SUFDSjs7OztHQUlDLEdBQ0RyQixZQUFhc0IsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLGFBQWEsQ0FBRTtRQUN2QyxJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLGFBQWEsR0FBR0E7UUFDckIsaUNBQWlDLEdBQ2pDLElBQUksQ0FBQ0MsWUFBWSxHQUFHTjtRQUNwQixpQ0FBaUMsR0FDakMsSUFBSSxDQUFDTyxTQUFTLEdBQUdQO0lBQ25CO0lBRUEsb0JBQW9CLEdBQ3BCZCxXQUFZO1FBQ1YsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUNpQixJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDNUM7QUFDRjtBQUVzQiIsInNvdXJjZXMiOlsid2VicGFjazovL21lZ2F2aWJlLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9jYm9yZy9saWIvdG9rZW4uanM/MWIwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBUeXBlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYWpvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRlcm1pbmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobWFqb3IsIG5hbWUsIHRlcm1pbmFsKSB7XG4gICAgdGhpcy5tYWpvciA9IG1ham9yXG4gICAgdGhpcy5tYWpvckVuY29kZWQgPSBtYWpvciA8PCA1XG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMudGVybWluYWwgPSB0ZXJtaW5hbFxuICB9XG5cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIGBUeXBlWyR7dGhpcy5tYWpvcn1dLiR7dGhpcy5uYW1lfWBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1R5cGV9IHR5cFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgY29tcGFyZSAodHlwKSB7XG4gICAgLyogYzggaWdub3JlIG5leHQgMSAqL1xuICAgIHJldHVybiB0aGlzLm1ham9yIDwgdHlwLm1ham9yID8gLTEgOiB0aGlzLm1ham9yID4gdHlwLm1ham9yID8gMSA6IDBcbiAgfVxufVxuXG4vLyBjb252ZXJ0IHRvIHN0YXRpYyBmaWVsZHMgd2hlbiBiZXR0ZXIgc3VwcG9ydGVkXG5UeXBlLnVpbnQgPSBuZXcgVHlwZSgwLCAndWludCcsIHRydWUpXG5UeXBlLm5lZ2ludCA9IG5ldyBUeXBlKDEsICduZWdpbnQnLCB0cnVlKVxuVHlwZS5ieXRlcyA9IG5ldyBUeXBlKDIsICdieXRlcycsIHRydWUpXG5UeXBlLnN0cmluZyA9IG5ldyBUeXBlKDMsICdzdHJpbmcnLCB0cnVlKVxuVHlwZS5hcnJheSA9IG5ldyBUeXBlKDQsICdhcnJheScsIGZhbHNlKVxuVHlwZS5tYXAgPSBuZXcgVHlwZSg1LCAnbWFwJywgZmFsc2UpXG5UeXBlLnRhZyA9IG5ldyBUeXBlKDYsICd0YWcnLCBmYWxzZSkgLy8gdGVybWluYWw/XG5UeXBlLmZsb2F0ID0gbmV3IFR5cGUoNywgJ2Zsb2F0JywgdHJ1ZSlcblR5cGUuZmFsc2UgPSBuZXcgVHlwZSg3LCAnZmFsc2UnLCB0cnVlKVxuVHlwZS50cnVlID0gbmV3IFR5cGUoNywgJ3RydWUnLCB0cnVlKVxuVHlwZS5udWxsID0gbmV3IFR5cGUoNywgJ251bGwnLCB0cnVlKVxuVHlwZS51bmRlZmluZWQgPSBuZXcgVHlwZSg3LCAndW5kZWZpbmVkJywgdHJ1ZSlcblR5cGUuYnJlYWsgPSBuZXcgVHlwZSg3LCAnYnJlYWsnLCB0cnVlKVxuLy8gVHlwZS5pbmRlZmluaXRlTGVuZ3RoID0gbmV3IFR5cGUoMCwgJ2luZGVmaW5pdGVMZW5ndGgnLCB0cnVlKVxuXG5jbGFzcyBUb2tlbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1R5cGV9IHR5cGVcbiAgICogQHBhcmFtIHthbnl9IFt2YWx1ZV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmNvZGVkTGVuZ3RoXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGUsIHZhbHVlLCBlbmNvZGVkTGVuZ3RoKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICAgIHRoaXMuZW5jb2RlZExlbmd0aCA9IGVuY29kZWRMZW5ndGhcbiAgICAvKiogQHR5cGUge1VpbnQ4QXJyYXl8dW5kZWZpbmVkfSAqL1xuICAgIHRoaXMuZW5jb2RlZEJ5dGVzID0gdW5kZWZpbmVkXG4gICAgLyoqIEB0eXBlIHtVaW50OEFycmF5fHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmJ5dGVWYWx1ZSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIGBUb2tlblske3RoaXMudHlwZX1dLiR7dGhpcy52YWx1ZX1gXG4gIH1cbn1cblxuZXhwb3J0IHsgVHlwZSwgVG9rZW4gfVxuIl0sIm5hbWVzIjpbIlR5cGUiLCJjb25zdHJ1Y3RvciIsIm1ham9yIiwibmFtZSIsInRlcm1pbmFsIiwibWFqb3JFbmNvZGVkIiwidG9TdHJpbmciLCJjb21wYXJlIiwidHlwIiwidWludCIsIm5lZ2ludCIsImJ5dGVzIiwic3RyaW5nIiwiYXJyYXkiLCJtYXAiLCJ0YWciLCJmbG9hdCIsImZhbHNlIiwidHJ1ZSIsIm51bGwiLCJ1bmRlZmluZWQiLCJicmVhayIsIlRva2VuIiwidHlwZSIsInZhbHVlIiwiZW5jb2RlZExlbmd0aCIsImVuY29kZWRCeXRlcyIsImJ5dGVWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/cborg/lib/token.js\n");

/***/ })

};
;